/*
	File Generated by NetTiers templates [www.nettiers.net]
	Generated on : 14 Ocak 2019 Pazartesi
	Important: Do not modify this file. Edit the file ClientView.cs instead.
*/

#region Using directives

using System;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using Ekip.Framework.Entities;
using Ekip.Framework.Data.Bases;

#endregion

namespace Ekip.Framework.Data.SqlClient
{
/// <summary>
///	This class is the base repository for the CRUD operations on the ClientView objects.
/// </summary>
public abstract partial class SqlClientViewProviderBase : ClientViewProviderBase
{
	
	string _connectionString;
    bool _useStoredProcedure;
    string _providerInvariantName;
		
	#region Constructors
	
	/// <summary>
	/// Creates a new <see cref="SqlClientViewProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	protected SqlClientViewProviderBase()
	{		
	}
	
	/// <summary>
	/// Creates a new <see cref="SqlClientViewProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlClientViewProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
			
	#endregion 
	
	#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
		
	
	#region GetAll Methods
	
	/// <summary>
	/// Gets All rows from the DataSource.
	/// </summary>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="count">The total number of rows in the data source.</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of ClientView objects.</returns>
	public override VList<ClientView> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
	{
		SqlDatabase database = new SqlDatabase(this._connectionString);
		DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_ClientView_Get_List", _useStoredProcedure);
		
		IDataReader reader = null;
		//Create Collection
		VList<ClientView> rows = new VList<ClientView>();
		
		try
		{
			if (transactionManager != null)
			{
				reader = Utility.ExecuteReader(transactionManager, commandWrapper);
			}
			else
			{
				reader = Utility.ExecuteReader(database, commandWrapper);
			}
		
			Fill(reader, rows, start, pageLength);
			count = rows.Count;

			if(reader.NextResult())
			{
				if(reader.Read())
				{
					count = reader.GetInt32(0);
				}
			}
		}
		finally
		{
			if (reader != null)
				reader.Close();
		}
		return rows;
	}//end getall
	
	#endregion
	
	#region Get Methods
			
	/// <summary>
	/// Gets a page of rows from the DataSource.
	/// </summary>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
	/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="count">The total number of rows in the data source.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of ClientView objects.</returns>
	public override VList<ClientView> Get(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
	{
		SqlDatabase database = new SqlDatabase(this._connectionString);
		DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_ClientView_Get", _useStoredProcedure);

		database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
		database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
		database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
		database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
	
		IDataReader reader = null;
		//Create Collection
		VList<ClientView> rows = new VList<ClientView>();
		
		try
		{
			if (transactionManager != null)
			{
				reader = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				reader = Utility.ExecuteReader(database, commandWrapper);
			}

			Fill(reader, rows, 0, int.MaxValue);
			count = rows.Count;

			if(reader.NextResult())
			{
				if(reader.Read())
				{
					count = reader.GetInt32(0);
				}
			}
		}
		finally
		{
		     if (reader != null)
		     	 reader.Close();
		}
		return rows;
	}
	
	#endregion
	
	#region Find Methods
	
	#region Parameterized Find Methods
	
	/// <summary>
	/// Returns rows from the DataSource that meet the parameter conditions.
	/// </summary>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
	/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="count">out. The number of rows that match this query.</param>
	/// <returns>Returns a typed collection of ClientView objects.</returns>
	public override VList<ClientView> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
	{
		SqlFilterParameterCollection filter = null;
		
		if (parameters == null)
			filter = new SqlFilterParameterCollection();
		else 
			filter = parameters.GetParameters();
			
		SqlDatabase database = new SqlDatabase(this._connectionString);
		DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_ClientView_Find_Dynamic", typeof(ClientViewColumn), filter, orderBy, start, pageLength);
		
		SqlFilterParameter param;

		for ( int i = 0; i < filter.Count; i++ )
		{
			param = filter[i];
			database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
		}

		VList<ClientView> rows = new VList<ClientView>();
		IDataReader reader = null;
		
		try
		{
			if ( transactionManager != null )
			{
				reader = Utility.ExecuteReader(transactionManager, commandWrapper);
			}
			else
			{
				reader = Utility.ExecuteReader(database, commandWrapper);
			}
			
			Fill(reader, rows, 0, int.MaxValue);
			count = rows.Count;
			
			if ( reader.NextResult() )
			{
				if ( reader.Read() )
				{
					count = reader.GetInt32(0);
				}
			}
		}
		finally
		{
			if ( reader != null )
				reader.Close();
		}
		
		return rows;
	}
	
	#endregion Parameterized Find Methods

	#endregion 

	#region Custom Methods
	

	#region ClientView_Find
	
	/// <summary>
	///	This method wraps the 'ClientView_Find' stored procedure. 
	/// </summary>
		/// <param name="fileNumber"> A <c>System.Int32?</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="lastName"> A <c>System.String</c> instance.</param>
		/// <param name="middleName"> A <c>System.String</c> instance.</param>
		/// <param name="referance"> A <c>System.String</c> instance.</param>
		/// <param name="pediatrician"> A <c>System.String</c> instance.</param>
		/// <param name="blood"> A <c>System.Byte?</c> instance.</param>
		/// <param name="birthDate1"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="birthDate2"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="firstDate1"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="firstDate2"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="gender"> A <c>System.Byte?</c> instance.</param>
		/// <param name="ıdCard"> A <c>System.String</c> instance.</param>
		/// <param name="age1"> A <c>System.Int32?</c> instance.</param>
		/// <param name="age2"> A <c>System.Int32?</c> instance.</param>
		/// <param name="mother"> A <c>System.String</c> instance.</param>
		/// <param name="motherPhone"> A <c>System.String</c> instance.</param>
		/// <param name="motherMobile"> A <c>System.String</c> instance.</param>
		/// <param name="motherEmail"> A <c>System.String</c> instance.</param>
		/// <param name="father"> A <c>System.String</c> instance.</param>
		/// <param name="fatherPhone"> A <c>System.String</c> instance.</param>
		/// <param name="fatherMobile"> A <c>System.String</c> instance.</param>
		/// <param name="fatherEmail"> A <c>System.String</c> instance.</param>
		/// <param name="addressLine"> A <c>System.String</c> instance.</param>
		/// <param name="cityId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="districtId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="regionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advisorIdList"> A <c>System.String</c> instance.</param>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remark>This method is generated from a stored procedure.</remark>
	public override void Find(TransactionManager transactionManager, int start, int pageLength, System.Int32? fileNumber, System.String firstName, System.String lastName, System.String middleName, System.String referance, System.String pediatrician, System.Byte? blood, System.DateTime? birthDate1, System.DateTime? birthDate2, System.DateTime? firstDate1, System.DateTime? firstDate2, System.Byte? gender, System.String ıdCard, System.Int32? age1, System.Int32? age2, System.String mother, System.String motherPhone, System.String motherMobile, System.String motherEmail, System.String father, System.String fatherPhone, System.String fatherMobile, System.String fatherEmail, System.String addressLine, System.Int32? cityId, System.Int32? districtId, System.Int32? regionId, System.String advisorIdList)
	{
		SqlDatabase database = new SqlDatabase(this._connectionString);
		DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ClientView_Find", true);
		
		database.AddInParameter(commandWrapper, "@FileNumber", DbType.Int32,  fileNumber );
		database.AddInParameter(commandWrapper, "@FirstName", DbType.AnsiString,  firstName );
		database.AddInParameter(commandWrapper, "@LastName", DbType.AnsiString,  lastName );
		database.AddInParameter(commandWrapper, "@MiddleName", DbType.AnsiString,  middleName );
		database.AddInParameter(commandWrapper, "@Referance", DbType.AnsiString,  referance );
		database.AddInParameter(commandWrapper, "@Pediatrician", DbType.AnsiString,  pediatrician );
		database.AddInParameter(commandWrapper, "@Blood", DbType.Byte,  blood );
		database.AddInParameter(commandWrapper, "@BirthDate1", DbType.DateTime,  birthDate1 );
		database.AddInParameter(commandWrapper, "@BirthDate2", DbType.DateTime,  birthDate2 );
		database.AddInParameter(commandWrapper, "@FirstDate1", DbType.DateTime,  firstDate1 );
		database.AddInParameter(commandWrapper, "@FirstDate2", DbType.DateTime,  firstDate2 );
		database.AddInParameter(commandWrapper, "@Gender", DbType.Byte,  gender );
		database.AddInParameter(commandWrapper, "@IdCard", DbType.AnsiString,  ıdCard );
		database.AddInParameter(commandWrapper, "@Age1", DbType.Int32,  age1 );
		database.AddInParameter(commandWrapper, "@Age2", DbType.Int32,  age2 );
		database.AddInParameter(commandWrapper, "@Mother", DbType.AnsiString,  mother );
		database.AddInParameter(commandWrapper, "@MotherPhone", DbType.AnsiString,  motherPhone );
		database.AddInParameter(commandWrapper, "@MotherMobile", DbType.AnsiString,  motherMobile );
		database.AddInParameter(commandWrapper, "@MotherEmail", DbType.AnsiString,  motherEmail );
		database.AddInParameter(commandWrapper, "@Father", DbType.AnsiString,  father );
		database.AddInParameter(commandWrapper, "@FatherPhone", DbType.AnsiString,  fatherPhone );
		database.AddInParameter(commandWrapper, "@FatherMobile", DbType.AnsiString,  fatherMobile );
		database.AddInParameter(commandWrapper, "@FatherEmail", DbType.AnsiString,  fatherEmail );
		database.AddInParameter(commandWrapper, "@AddressLine", DbType.AnsiString,  addressLine );
		database.AddInParameter(commandWrapper, "@CityId", DbType.Int32,  cityId );
		database.AddInParameter(commandWrapper, "@DistrictId", DbType.Int32,  districtId );
		database.AddInParameter(commandWrapper, "@RegionId", DbType.Int32,  regionId );
		database.AddInParameter(commandWrapper, "@AdvisorIDList", DbType.String,  advisorIdList );
		

		try
		{
			
			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
			
			
			
			return;
		}
		catch(SqlException ex)
		{
			throw new DataException("A data access error occured, please check inner SqlException.", ex);
		}
	}
	#endregion

	#endregion


	}//end class
} // end namespace
