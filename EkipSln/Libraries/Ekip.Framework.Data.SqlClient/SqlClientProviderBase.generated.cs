
/*
	File Generated by NetTiers templates [www.nettiers.net]
	Generated on : 1 Şubat 2019 Cuma
	Important: Do not modify this file. Edit the file SqlClientProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using Ekip.Framework.Entities;
using Ekip.Framework.Data;
using Ekip.Framework.Data.Bases;

#endregion

namespace Ekip.Framework.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Client"/> entity.
	///</summary>
	public abstract partial class SqlClientProviderBase : ClientProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlClientProviderBase"/> instance.
		/// </summary>
		public SqlClientProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlClientProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlClientProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_clientId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _clientId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Client_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@ClientId", DbType.Int32, _clientId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Client)
					,_clientId);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
		public override TList<Client> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<Client>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Client_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@ClientId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FileNumber", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FirstContactDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FirstContactAge", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CurrentAge", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BirthDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CalendarAgeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FullName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MiddleName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Reference", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MotherId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FatherId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AddressId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdCard", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Gender", DbType.Byte, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Blood", DbType.Byte, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Pediatrician", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CountOfChild", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FamilyStatus", DbType.Byte, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Notes", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreateDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UpdateDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreateUserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UpdateUserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Active", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Deleted", DbType.Boolean, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("clientıd ") || clause.Trim().StartsWith("clientıd="))
				{
					database.SetParameterValue(commandWrapper, "@ClientId", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("filenumber ") || clause.Trim().StartsWith("filenumber="))
				{
					database.SetParameterValue(commandWrapper, "@FileNumber", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("firstcontactdate ") || clause.Trim().StartsWith("firstcontactdate="))
				{
					database.SetParameterValue(commandWrapper, "@FirstContactDate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("firstcontactage ") || clause.Trim().StartsWith("firstcontactage="))
				{
					database.SetParameterValue(commandWrapper, "@FirstContactAge", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("currentage ") || clause.Trim().StartsWith("currentage="))
				{
					database.SetParameterValue(commandWrapper, "@CurrentAge", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("birthdate ") || clause.Trim().StartsWith("birthdate="))
				{
					database.SetParameterValue(commandWrapper, "@BirthDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("calendarageıd ") || clause.Trim().StartsWith("calendarageıd="))
				{
					database.SetParameterValue(commandWrapper, "@CalendarAgeId", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fullname ") || clause.Trim().StartsWith("fullname="))
				{
					database.SetParameterValue(commandWrapper, "@FullName", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("middlename ") || clause.Trim().StartsWith("middlename="))
				{
					database.SetParameterValue(commandWrapper, "@MiddleName", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("reference ") || clause.Trim().StartsWith("reference="))
				{
					database.SetParameterValue(commandWrapper, "@Reference", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("motherıd ") || clause.Trim().StartsWith("motherıd="))
				{
					database.SetParameterValue(commandWrapper, "@MotherId", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fatherıd ") || clause.Trim().StartsWith("fatherıd="))
				{
					database.SetParameterValue(commandWrapper, "@FatherId", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("addressıd ") || clause.Trim().StartsWith("addressıd="))
				{
					database.SetParameterValue(commandWrapper, "@AddressId", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ıdcard ") || clause.Trim().StartsWith("ıdcard="))
				{
					database.SetParameterValue(commandWrapper, "@IdCard", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gender ") || clause.Trim().StartsWith("gender="))
				{
					database.SetParameterValue(commandWrapper, "@Gender", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("blood ") || clause.Trim().StartsWith("blood="))
				{
					database.SetParameterValue(commandWrapper, "@Blood", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pediatrician ") || clause.Trim().StartsWith("pediatrician="))
				{
					database.SetParameterValue(commandWrapper, "@Pediatrician", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("countofchild ") || clause.Trim().StartsWith("countofchild="))
				{
					database.SetParameterValue(commandWrapper, "@CountOfChild", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("familystatus ") || clause.Trim().StartsWith("familystatus="))
				{
					database.SetParameterValue(commandWrapper, "@FamilyStatus", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("notes ") || clause.Trim().StartsWith("notes="))
				{
					database.SetParameterValue(commandWrapper, "@Notes", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("createdate ") || clause.Trim().StartsWith("createdate="))
				{
					database.SetParameterValue(commandWrapper, "@CreateDate", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("updatedate ") || clause.Trim().StartsWith("updatedate="))
				{
					database.SetParameterValue(commandWrapper, "@UpdateDate", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("createuserıd ") || clause.Trim().StartsWith("createuserıd="))
				{
					database.SetParameterValue(commandWrapper, "@CreateUserId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("updateuserıd ") || clause.Trim().StartsWith("updateuserıd="))
				{
					database.SetParameterValue(commandWrapper, "@UpdateUserId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("active ") || clause.Trim().StartsWith("active="))
				{
					database.SetParameterValue(commandWrapper, "@Active", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("deleted ") || clause.Trim().StartsWith("deleted="))
				{
					database.SetParameterValue(commandWrapper, "@Deleted", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<Client> rows = new TList<Client>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
		public override TList<Client> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Client_Find_Dynamic", typeof(ClientColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<Client> rows = new TList<Client>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Client> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Client_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<Client> rows = new TList<Client>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
		public override TList<Client> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Client_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<Client> rows = new TList<Client>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByAddressId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Client_ClientAddress key.
		///		FK_Client_ClientAddress Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_addressId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Client> GetByAddressId(TransactionManager transactionManager, System.Int32? _addressId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Client_GetByAddressId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AddressId", DbType.Int32, _addressId);
			
			IDataReader reader = null;
			TList<Client> rows = new TList<Client>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAddressId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAddressId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByFatherId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Client_ClientFather key.
		///		FK_Client_ClientFather Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_fatherId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Client> GetByFatherId(TransactionManager transactionManager, System.Int32 _fatherId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Client_GetByFatherId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@FatherId", DbType.Int32, _fatherId);
			
			IDataReader reader = null;
			TList<Client> rows = new TList<Client>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByFatherId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByFatherId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMotherId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Client_ClientMother key.
		///		FK_Client_ClientMother Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_motherId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Client> GetByMotherId(TransactionManager transactionManager, System.Int32 _motherId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Client_GetByMotherId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MotherId", DbType.Int32, _motherId);
			
			IDataReader reader = null;
			TList<Client> rows = new TList<Client>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMotherId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMotherId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByFileNumber
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Client index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_fileNumber"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="Ekip.Framework.Entities.Client"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override Ekip.Framework.Entities.Client GetByFileNumber(TransactionManager transactionManager, System.Int32 _fileNumber, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Client_GetByFileNumber", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@FileNumber", DbType.Int32, _fileNumber);
			
			IDataReader reader = null;
			TList<Client> tmp = new TList<Client>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByFileNumber", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByFileNumber", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByClientId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_Client index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_clientId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="Ekip.Framework.Entities.Client"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override Ekip.Framework.Entities.Client GetByClientId(TransactionManager transactionManager, System.Int32 _clientId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Client_GetByClientId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ClientId", DbType.Int32, _clientId);
			
			IDataReader reader = null;
			TList<Client> tmp = new TList<Client>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByClientId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByClientId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the Ekip.Framework.Entities.Client object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<Ekip.Framework.Entities.Client> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "Client";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ClientId", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("FileNumber", typeof(System.Int32));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("FirstContactDate", typeof(System.DateTime));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("FirstContactAge", typeof(System.Int32));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("CurrentAge", typeof(System.Int32));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("BirthDate", typeof(System.DateTime));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("CalendarAgeId", typeof(System.Int32));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("FullName", typeof(System.String));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("MiddleName", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("Reference", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("MotherId", typeof(System.Int32));
			col10.AllowDBNull = false;		
			DataColumn col11 = dataTable.Columns.Add("FatherId", typeof(System.Int32));
			col11.AllowDBNull = false;		
			DataColumn col12 = dataTable.Columns.Add("AddressId", typeof(System.Int32));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("IdCard", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("Gender", typeof(System.Byte));
			col14.AllowDBNull = false;		
			DataColumn col15 = dataTable.Columns.Add("Blood", typeof(System.Byte));
			col15.AllowDBNull = false;		
			DataColumn col16 = dataTable.Columns.Add("Pediatrician", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("CountOfChild", typeof(System.Int32));
			col17.AllowDBNull = false;		
			DataColumn col18 = dataTable.Columns.Add("FamilyStatus", typeof(System.Byte));
			col18.AllowDBNull = false;		
			DataColumn col19 = dataTable.Columns.Add("Notes", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("CreateDate", typeof(System.DateTime));
			col20.AllowDBNull = false;		
			DataColumn col21 = dataTable.Columns.Add("UpdateDate", typeof(System.DateTime));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("CreateUserId", typeof(System.Int32));
			col22.AllowDBNull = false;		
			DataColumn col23 = dataTable.Columns.Add("UpdateUserId", typeof(System.Int32));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("Active", typeof(System.Boolean));
			col24.AllowDBNull = false;		
			DataColumn col25 = dataTable.Columns.Add("Deleted", typeof(System.Boolean));
			col25.AllowDBNull = false;		
			
			bulkCopy.ColumnMappings.Add("ClientId", "ClientId");
			bulkCopy.ColumnMappings.Add("FileNumber", "FileNumber");
			bulkCopy.ColumnMappings.Add("FirstContactDate", "FirstContactDate");
			bulkCopy.ColumnMappings.Add("FirstContactAge", "FirstContactAge");
			bulkCopy.ColumnMappings.Add("CurrentAge", "CurrentAge");
			bulkCopy.ColumnMappings.Add("BirthDate", "BirthDate");
			bulkCopy.ColumnMappings.Add("CalendarAgeId", "CalendarAgeId");
			bulkCopy.ColumnMappings.Add("FullName", "FullName");
			bulkCopy.ColumnMappings.Add("MiddleName", "MiddleName");
			bulkCopy.ColumnMappings.Add("Reference", "Reference");
			bulkCopy.ColumnMappings.Add("MotherId", "MotherId");
			bulkCopy.ColumnMappings.Add("FatherId", "FatherId");
			bulkCopy.ColumnMappings.Add("AddressId", "AddressId");
			bulkCopy.ColumnMappings.Add("IdCard", "IdCard");
			bulkCopy.ColumnMappings.Add("Gender", "Gender");
			bulkCopy.ColumnMappings.Add("Blood", "Blood");
			bulkCopy.ColumnMappings.Add("Pediatrician", "Pediatrician");
			bulkCopy.ColumnMappings.Add("CountOfChild", "CountOfChild");
			bulkCopy.ColumnMappings.Add("FamilyStatus", "FamilyStatus");
			bulkCopy.ColumnMappings.Add("Notes", "Notes");
			bulkCopy.ColumnMappings.Add("CreateDate", "CreateDate");
			bulkCopy.ColumnMappings.Add("UpdateDate", "UpdateDate");
			bulkCopy.ColumnMappings.Add("CreateUserId", "CreateUserId");
			bulkCopy.ColumnMappings.Add("UpdateUserId", "UpdateUserId");
			bulkCopy.ColumnMappings.Add("Active", "Active");
			bulkCopy.ColumnMappings.Add("Deleted", "Deleted");
			
			foreach(Ekip.Framework.Entities.Client entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ClientId"] = entity.ClientId;
							
				
					row["FileNumber"] = entity.FileNumber;
							
				
					row["FirstContactDate"] = entity.FirstContactDate;
							
				
					row["FirstContactAge"] = entity.FirstContactAge;
							
				
					row["CurrentAge"] = entity.CurrentAge;
							
				
					row["BirthDate"] = entity.BirthDate;
							
				
					row["CalendarAgeId"] = entity.CalendarAgeId.HasValue ? (object) entity.CalendarAgeId  : System.DBNull.Value;
							
				
					row["FullName"] = entity.FullName;
							
				
					row["MiddleName"] = entity.MiddleName;
							
				
					row["Reference"] = entity.Reference;
							
				
					row["MotherId"] = entity.MotherId;
							
				
					row["FatherId"] = entity.FatherId;
							
				
					row["AddressId"] = entity.AddressId.HasValue ? (object) entity.AddressId  : System.DBNull.Value;
							
				
					row["IdCard"] = entity.IdCard;
							
				
					row["Gender"] = entity.Gender;
							
				
					row["Blood"] = entity.Blood;
							
				
					row["Pediatrician"] = entity.Pediatrician;
							
				
					row["CountOfChild"] = entity.CountOfChild;
							
				
					row["FamilyStatus"] = entity.FamilyStatus;
							
				
					row["Notes"] = entity.Notes;
							
				
					row["CreateDate"] = entity.CreateDate;
							
				
					row["UpdateDate"] = entity.UpdateDate.HasValue ? (object) entity.UpdateDate  : System.DBNull.Value;
							
				
					row["CreateUserId"] = entity.CreateUserId;
							
				
					row["UpdateUserId"] = entity.UpdateUserId.HasValue ? (object) entity.UpdateUserId  : System.DBNull.Value;
							
				
					row["Active"] = entity.Active;
							
				
					row["Deleted"] = entity.Deleted;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(Ekip.Framework.Entities.Client entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a Ekip.Framework.Entities.Client object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">Ekip.Framework.Entities.Client object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the Ekip.Framework.Entities.Client object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, Ekip.Framework.Entities.Client entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Client_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@ClientId", DbType.Int32, 4);
            database.AddInParameter(commandWrapper, "@FileNumber", DbType.Int32, entity.FileNumber );
            database.AddInParameter(commandWrapper, "@FirstContactDate", DbType.DateTime, entity.FirstContactDate );
            database.AddInParameter(commandWrapper, "@FirstContactAge", DbType.Int32, entity.FirstContactAge );
            database.AddInParameter(commandWrapper, "@CurrentAge", DbType.Int32, entity.CurrentAge );
            database.AddInParameter(commandWrapper, "@BirthDate", DbType.DateTime, entity.BirthDate );
			database.AddInParameter(commandWrapper, "@CalendarAgeId", DbType.Int32, (entity.CalendarAgeId.HasValue ? (object) entity.CalendarAgeId  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@FullName", DbType.AnsiString, entity.FullName );
            database.AddInParameter(commandWrapper, "@MiddleName", DbType.AnsiString, entity.MiddleName );
            database.AddInParameter(commandWrapper, "@Reference", DbType.AnsiString, entity.Reference );
            database.AddInParameter(commandWrapper, "@MotherId", DbType.Int32, entity.MotherId );
            database.AddInParameter(commandWrapper, "@FatherId", DbType.Int32, entity.FatherId );
			database.AddInParameter(commandWrapper, "@AddressId", DbType.Int32, (entity.AddressId.HasValue ? (object) entity.AddressId  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@IdCard", DbType.AnsiString, entity.IdCard );
            database.AddInParameter(commandWrapper, "@Gender", DbType.Byte, entity.Gender );
            database.AddInParameter(commandWrapper, "@Blood", DbType.Byte, entity.Blood );
            database.AddInParameter(commandWrapper, "@Pediatrician", DbType.AnsiString, entity.Pediatrician );
            database.AddInParameter(commandWrapper, "@CountOfChild", DbType.Int32, entity.CountOfChild );
            database.AddInParameter(commandWrapper, "@FamilyStatus", DbType.Byte, entity.FamilyStatus );
            database.AddInParameter(commandWrapper, "@Notes", DbType.AnsiString, entity.Notes );
            database.AddInParameter(commandWrapper, "@CreateDate", DbType.DateTime, entity.CreateDate );
			database.AddInParameter(commandWrapper, "@UpdateDate", DbType.DateTime, (entity.UpdateDate.HasValue ? (object) entity.UpdateDate  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@CreateUserId", DbType.Int32, entity.CreateUserId );
			database.AddInParameter(commandWrapper, "@UpdateUserId", DbType.Int32, (entity.UpdateUserId.HasValue ? (object) entity.UpdateUserId  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@Active", DbType.Boolean, entity.Active );
            database.AddInParameter(commandWrapper, "@Deleted", DbType.Boolean, entity.Deleted );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _clientId = database.GetParameterValue(commandWrapper, "@ClientId");
			entity.ClientId = (System.Int32)_clientId;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">Ekip.Framework.Entities.Client object to update.</param>
		/// <remarks>
		///		After updating the datasource, the Ekip.Framework.Entities.Client object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, Ekip.Framework.Entities.Client entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Client_Update", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@ClientId", DbType.Int32, entity.ClientId );
            database.AddInParameter(commandWrapper, "@FileNumber", DbType.Int32, entity.FileNumber );
            database.AddInParameter(commandWrapper, "@FirstContactDate", DbType.DateTime, entity.FirstContactDate );
            database.AddInParameter(commandWrapper, "@FirstContactAge", DbType.Int32, entity.FirstContactAge );
            database.AddInParameter(commandWrapper, "@CurrentAge", DbType.Int32, entity.CurrentAge );
            database.AddInParameter(commandWrapper, "@BirthDate", DbType.DateTime, entity.BirthDate );
			database.AddInParameter(commandWrapper, "@CalendarAgeId", DbType.Int32, (entity.CalendarAgeId.HasValue ? (object) entity.CalendarAgeId : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@FullName", DbType.AnsiString, entity.FullName );
            database.AddInParameter(commandWrapper, "@MiddleName", DbType.AnsiString, entity.MiddleName );
            database.AddInParameter(commandWrapper, "@Reference", DbType.AnsiString, entity.Reference );
            database.AddInParameter(commandWrapper, "@MotherId", DbType.Int32, entity.MotherId );
            database.AddInParameter(commandWrapper, "@FatherId", DbType.Int32, entity.FatherId );
			database.AddInParameter(commandWrapper, "@AddressId", DbType.Int32, (entity.AddressId.HasValue ? (object) entity.AddressId : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@IdCard", DbType.AnsiString, entity.IdCard );
            database.AddInParameter(commandWrapper, "@Gender", DbType.Byte, entity.Gender );
            database.AddInParameter(commandWrapper, "@Blood", DbType.Byte, entity.Blood );
            database.AddInParameter(commandWrapper, "@Pediatrician", DbType.AnsiString, entity.Pediatrician );
            database.AddInParameter(commandWrapper, "@CountOfChild", DbType.Int32, entity.CountOfChild );
            database.AddInParameter(commandWrapper, "@FamilyStatus", DbType.Byte, entity.FamilyStatus );
            database.AddInParameter(commandWrapper, "@Notes", DbType.AnsiString, entity.Notes );
            database.AddInParameter(commandWrapper, "@CreateDate", DbType.DateTime, entity.CreateDate );
			database.AddInParameter(commandWrapper, "@UpdateDate", DbType.DateTime, (entity.UpdateDate.HasValue ? (object) entity.UpdateDate : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@CreateUserId", DbType.Int32, entity.CreateUserId );
			database.AddInParameter(commandWrapper, "@UpdateUserId", DbType.Int32, (entity.UpdateUserId.HasValue ? (object) entity.UpdateUserId : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@Active", DbType.Boolean, entity.Active );
            database.AddInParameter(commandWrapper, "@Deleted", DbType.Boolean, entity.Deleted );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region Client_FindByReason_FirstDate_BirthDate
					
		/// <summary>
		///	This method wraps the 'Client_FindByReason_FirstDate_BirthDate' stored procedure. 
		/// </summary>	
		/// <param name="seanceReasonIds"> A <c>System.String</c> instance.</param>
		/// <param name="firstContactYears"> A <c>System.String</c> instance.</param>
		/// <param name="birthDateYears"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void FindByReason_FirstDate_BirthDate(TransactionManager transactionManager, int start, int pageLength , System.String seanceReasonIds, System.String firstContactYears, System.String birthDateYears)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Client_FindByReason_FirstDate_BirthDate", true);
			
			database.AddInParameter(commandWrapper, "@SeanceReasonIds", DbType.AnsiString,  seanceReasonIds );
			database.AddInParameter(commandWrapper, "@FirstContactYears", DbType.AnsiString,  firstContactYears );
			database.AddInParameter(commandWrapper, "@BirthDateYears", DbType.AnsiString,  birthDateYears );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "FindByReason_FirstDate_BirthDate", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "FindByReason_FirstDate_BirthDate", (IEntity)null));


				
				return;
		}
		#endregion

		#region Client_AdvisorReport
					
		/// <summary>
		///	This method wraps the 'Client_AdvisorReport' stored procedure. 
		/// </summary>	
		/// <param name="advisorIds"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void AdvisorReport(TransactionManager transactionManager, int start, int pageLength , System.String advisorIds)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Client_AdvisorReport", true);
			
			database.AddInParameter(commandWrapper, "@AdvisorIds", DbType.AnsiString,  advisorIds );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "AdvisorReport", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "AdvisorReport", (IEntity)null));


				
				return;
		}
		#endregion

		#region Client_GetAllFirstContactYears
					
		/// <summary>
		///	This method wraps the 'Client_GetAllFirstContactYears' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetAllFirstContactYears(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Client_GetAllFirstContactYears", true);
			
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAllFirstContactYears", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetAllFirstContactYears", (IEntity)null));



			return dr;
		}
		#endregion

		#region Client_GetByFirstContactYears
					
		/// <summary>
		///	This method wraps the 'Client_GetByFirstContactYears' stored procedure. 
		/// </summary>	
		/// <param name="years"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;Client&gt;"/> instance.</returns>
		public override TList<Client> GetByFirstContactYears(TransactionManager transactionManager, int start, int pageLength , System.String years)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Client_GetByFirstContactYears", true);
			
			database.AddInParameter(commandWrapper, "@Years", DbType.String,  years );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<Client> rows = new TList<Client>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByFirstContactYears", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByFirstContactYears", rows));


				return rows;
		}
		#endregion

		#region Client_GetAllBirthDateYears
					
		/// <summary>
		///	This method wraps the 'Client_GetAllBirthDateYears' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetAllBirthDateYears(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Client_GetAllBirthDateYears", true);
			
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAllBirthDateYears", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetAllBirthDateYears", (IEntity)null));



			return dr;
		}
		#endregion

		#region Client_GetFirst
					
		/// <summary>
		///	This method wraps the 'Client_GetFirst' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;Client&gt;"/> instance.</returns>
		public override TList<Client> GetFirst(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Client_GetFirst", true);
			
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<Client> rows = new TList<Client>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetFirst", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetFirst", rows));


				return rows;
		}
		#endregion

		#region Client_GetFileNumbers
					
		/// <summary>
		///	This method wraps the 'Client_GetFileNumbers' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetFileNumbers(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Client_GetFileNumbers", true);
			
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetFileNumbers", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetFileNumbers", (IEntity)null));



			return dr;
		}
		#endregion

		#region Client_GetLast
					
		/// <summary>
		///	This method wraps the 'Client_GetLast' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;Client&gt;"/> instance.</returns>
		public override TList<Client> GetLast(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Client_GetLast", true);
			
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<Client> rows = new TList<Client>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetLast", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetLast", rows));


				return rows;
		}
		#endregion
		#endregion
	}//end class
} // end namespace
