
/*
	File Generated by NetTiers templates [www.nettiers.net]
	Generated on : 3 Şubat 2019 Pazar
	Important: Do not modify this file. Edit the file SqlWiscrProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using Ekip.Framework.Entities;
using Ekip.Framework.Data;
using Ekip.Framework.Data.Bases;

#endregion

namespace Ekip.Framework.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Wiscr"/> entity.
	///</summary>
	public abstract partial class SqlWiscrProviderBase : WiscrProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlWiscrProviderBase"/> instance.
		/// </summary>
		public SqlWiscrProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlWiscrProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlWiscrProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_wiscrId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _wiscrId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Wiscr_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@WiscrId", DbType.Int32, _wiscrId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Wiscr)
					,_wiscrId);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of Ekip.Framework.Entities.Wiscr objects.</returns>
		public override TList<Wiscr> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<Wiscr>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Wiscr_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@WiscrId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeanceId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GeneralRawScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GeneralStandartScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SimilarityRawScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SimilarityStandartScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ArithmeticRawScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ArithmeticStandartScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WordRawScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WordStandartScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JudgingRawScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JudgingStandartScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SetOfNumbersRawScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SetOfNumbersStandartScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ImageDefineRawScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ImageDefineStandartScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ImageEditingRawScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ImageEditingStandartScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CubesPatternRawScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CubesPatternStandartScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PartsMergeRawScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PartsMergeStandartScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PasswordRawScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PasswordStandartScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MazesRawScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MazesStandartScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TotalVerbalScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TotalPerformanceScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TotalScore", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Notes", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TestDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreateDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UpdateDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreateUserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UpdateUserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Active", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Deleted", DbType.Boolean, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("wiscrıd ") || clause.Trim().StartsWith("wiscrıd="))
				{
					database.SetParameterValue(commandWrapper, "@WiscrId", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("seanceıd ") || clause.Trim().StartsWith("seanceıd="))
				{
					database.SetParameterValue(commandWrapper, "@SeanceId", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("generalrawscore ") || clause.Trim().StartsWith("generalrawscore="))
				{
					database.SetParameterValue(commandWrapper, "@GeneralRawScore", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("generalstandartscore ") || clause.Trim().StartsWith("generalstandartscore="))
				{
					database.SetParameterValue(commandWrapper, "@GeneralStandartScore", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("similarityrawscore ") || clause.Trim().StartsWith("similarityrawscore="))
				{
					database.SetParameterValue(commandWrapper, "@SimilarityRawScore", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("similaritystandartscore ") || clause.Trim().StartsWith("similaritystandartscore="))
				{
					database.SetParameterValue(commandWrapper, "@SimilarityStandartScore", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("arithmeticrawscore ") || clause.Trim().StartsWith("arithmeticrawscore="))
				{
					database.SetParameterValue(commandWrapper, "@ArithmeticRawScore", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("arithmeticstandartscore ") || clause.Trim().StartsWith("arithmeticstandartscore="))
				{
					database.SetParameterValue(commandWrapper, "@ArithmeticStandartScore", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wordrawscore ") || clause.Trim().StartsWith("wordrawscore="))
				{
					database.SetParameterValue(commandWrapper, "@WordRawScore", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wordstandartscore ") || clause.Trim().StartsWith("wordstandartscore="))
				{
					database.SetParameterValue(commandWrapper, "@WordStandartScore", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("judgingrawscore ") || clause.Trim().StartsWith("judgingrawscore="))
				{
					database.SetParameterValue(commandWrapper, "@JudgingRawScore", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("judgingstandartscore ") || clause.Trim().StartsWith("judgingstandartscore="))
				{
					database.SetParameterValue(commandWrapper, "@JudgingStandartScore", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("setofnumbersrawscore ") || clause.Trim().StartsWith("setofnumbersrawscore="))
				{
					database.SetParameterValue(commandWrapper, "@SetOfNumbersRawScore", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("setofnumbersstandartscore ") || clause.Trim().StartsWith("setofnumbersstandartscore="))
				{
					database.SetParameterValue(commandWrapper, "@SetOfNumbersStandartScore", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ımagedefinerawscore ") || clause.Trim().StartsWith("ımagedefinerawscore="))
				{
					database.SetParameterValue(commandWrapper, "@ImageDefineRawScore", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ımagedefinestandartscore ") || clause.Trim().StartsWith("ımagedefinestandartscore="))
				{
					database.SetParameterValue(commandWrapper, "@ImageDefineStandartScore", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ımageeditingrawscore ") || clause.Trim().StartsWith("ımageeditingrawscore="))
				{
					database.SetParameterValue(commandWrapper, "@ImageEditingRawScore", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ımageeditingstandartscore ") || clause.Trim().StartsWith("ımageeditingstandartscore="))
				{
					database.SetParameterValue(commandWrapper, "@ImageEditingStandartScore", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cubespatternrawscore ") || clause.Trim().StartsWith("cubespatternrawscore="))
				{
					database.SetParameterValue(commandWrapper, "@CubesPatternRawScore", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cubespatternstandartscore ") || clause.Trim().StartsWith("cubespatternstandartscore="))
				{
					database.SetParameterValue(commandWrapper, "@CubesPatternStandartScore", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("partsmergerawscore ") || clause.Trim().StartsWith("partsmergerawscore="))
				{
					database.SetParameterValue(commandWrapper, "@PartsMergeRawScore", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("partsmergestandartscore ") || clause.Trim().StartsWith("partsmergestandartscore="))
				{
					database.SetParameterValue(commandWrapper, "@PartsMergeStandartScore", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("passwordrawscore ") || clause.Trim().StartsWith("passwordrawscore="))
				{
					database.SetParameterValue(commandWrapper, "@PasswordRawScore", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("passwordstandartscore ") || clause.Trim().StartsWith("passwordstandartscore="))
				{
					database.SetParameterValue(commandWrapper, "@PasswordStandartScore", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mazesrawscore ") || clause.Trim().StartsWith("mazesrawscore="))
				{
					database.SetParameterValue(commandWrapper, "@MazesRawScore", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mazesstandartscore ") || clause.Trim().StartsWith("mazesstandartscore="))
				{
					database.SetParameterValue(commandWrapper, "@MazesStandartScore", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("totalverbalscore ") || clause.Trim().StartsWith("totalverbalscore="))
				{
					database.SetParameterValue(commandWrapper, "@TotalVerbalScore", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("totalperformancescore ") || clause.Trim().StartsWith("totalperformancescore="))
				{
					database.SetParameterValue(commandWrapper, "@TotalPerformanceScore", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("totalscore ") || clause.Trim().StartsWith("totalscore="))
				{
					database.SetParameterValue(commandWrapper, "@TotalScore", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("notes ") || clause.Trim().StartsWith("notes="))
				{
					database.SetParameterValue(commandWrapper, "@Notes", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("testdate ") || clause.Trim().StartsWith("testdate="))
				{
					database.SetParameterValue(commandWrapper, "@TestDate", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("createdate ") || clause.Trim().StartsWith("createdate="))
				{
					database.SetParameterValue(commandWrapper, "@CreateDate", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("updatedate ") || clause.Trim().StartsWith("updatedate="))
				{
					database.SetParameterValue(commandWrapper, "@UpdateDate", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("createuserıd ") || clause.Trim().StartsWith("createuserıd="))
				{
					database.SetParameterValue(commandWrapper, "@CreateUserId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("updateuserıd ") || clause.Trim().StartsWith("updateuserıd="))
				{
					database.SetParameterValue(commandWrapper, "@UpdateUserId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("active ") || clause.Trim().StartsWith("active="))
				{
					database.SetParameterValue(commandWrapper, "@Active", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("deleted ") || clause.Trim().StartsWith("deleted="))
				{
					database.SetParameterValue(commandWrapper, "@Deleted", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<Wiscr> rows = new TList<Wiscr>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of Ekip.Framework.Entities.Wiscr objects.</returns>
		public override TList<Wiscr> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Wiscr_Find_Dynamic", typeof(WiscrColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<Wiscr> rows = new TList<Wiscr>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Ekip.Framework.Entities.Wiscr objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Wiscr> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Wiscr_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<Wiscr> rows = new TList<Wiscr>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Ekip.Framework.Entities.Wiscr objects.</returns>
		public override TList<Wiscr> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Wiscr_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<Wiscr> rows = new TList<Wiscr>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetByWiscrId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_Wiscr index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_wiscrId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="Ekip.Framework.Entities.Wiscr"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override Ekip.Framework.Entities.Wiscr GetByWiscrId(TransactionManager transactionManager, System.Int32 _wiscrId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Wiscr_GetByWiscrId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@WiscrId", DbType.Int32, _wiscrId);
			
			IDataReader reader = null;
			TList<Wiscr> tmp = new TList<Wiscr>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWiscrId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWiscrId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the Ekip.Framework.Entities.Wiscr object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<Ekip.Framework.Entities.Wiscr> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "Wiscr";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("WiscrId", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("SeanceId", typeof(System.Int32));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("GeneralRawScore", typeof(System.Int32));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("GeneralStandartScore", typeof(System.Int32));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("SimilarityRawScore", typeof(System.Int32));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("SimilarityStandartScore", typeof(System.Int32));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("ArithmeticRawScore", typeof(System.Int32));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("ArithmeticStandartScore", typeof(System.Int32));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("WordRawScore", typeof(System.Int32));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("WordStandartScore", typeof(System.Int32));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("JudgingRawScore", typeof(System.Int32));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("JudgingStandartScore", typeof(System.Int32));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("SetOfNumbersRawScore", typeof(System.Int32));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("SetOfNumbersStandartScore", typeof(System.Int32));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("ImageDefineRawScore", typeof(System.Int32));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("ImageDefineStandartScore", typeof(System.Int32));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("ImageEditingRawScore", typeof(System.Int32));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("ImageEditingStandartScore", typeof(System.Int32));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("CubesPatternRawScore", typeof(System.Int32));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("CubesPatternStandartScore", typeof(System.Int32));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("PartsMergeRawScore", typeof(System.Int32));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("PartsMergeStandartScore", typeof(System.Int32));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("PasswordRawScore", typeof(System.Int32));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("PasswordStandartScore", typeof(System.Int32));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("MazesRawScore", typeof(System.Int32));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("MazesStandartScore", typeof(System.Int32));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("TotalVerbalScore", typeof(System.Int32));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("TotalPerformanceScore", typeof(System.Int32));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("TotalScore", typeof(System.Int32));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("Notes", typeof(System.String));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("TestDate", typeof(System.DateTime));
			col30.AllowDBNull = false;		
			DataColumn col31 = dataTable.Columns.Add("CreateDate", typeof(System.DateTime));
			col31.AllowDBNull = false;		
			DataColumn col32 = dataTable.Columns.Add("UpdateDate", typeof(System.DateTime));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("CreateUserId", typeof(System.Int32));
			col33.AllowDBNull = false;		
			DataColumn col34 = dataTable.Columns.Add("UpdateUserId", typeof(System.Int32));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("Active", typeof(System.Boolean));
			col35.AllowDBNull = false;		
			DataColumn col36 = dataTable.Columns.Add("Deleted", typeof(System.Boolean));
			col36.AllowDBNull = false;		
			
			bulkCopy.ColumnMappings.Add("WiscrId", "WiscrId");
			bulkCopy.ColumnMappings.Add("SeanceId", "SeanceId");
			bulkCopy.ColumnMappings.Add("GeneralRawScore", "GeneralRawScore");
			bulkCopy.ColumnMappings.Add("GeneralStandartScore", "GeneralStandartScore");
			bulkCopy.ColumnMappings.Add("SimilarityRawScore", "SimilarityRawScore");
			bulkCopy.ColumnMappings.Add("SimilarityStandartScore", "SimilarityStandartScore");
			bulkCopy.ColumnMappings.Add("ArithmeticRawScore", "ArithmeticRawScore");
			bulkCopy.ColumnMappings.Add("ArithmeticStandartScore", "ArithmeticStandartScore");
			bulkCopy.ColumnMappings.Add("WordRawScore", "WordRawScore");
			bulkCopy.ColumnMappings.Add("WordStandartScore", "WordStandartScore");
			bulkCopy.ColumnMappings.Add("JudgingRawScore", "JudgingRawScore");
			bulkCopy.ColumnMappings.Add("JudgingStandartScore", "JudgingStandartScore");
			bulkCopy.ColumnMappings.Add("SetOfNumbersRawScore", "SetOfNumbersRawScore");
			bulkCopy.ColumnMappings.Add("SetOfNumbersStandartScore", "SetOfNumbersStandartScore");
			bulkCopy.ColumnMappings.Add("ImageDefineRawScore", "ImageDefineRawScore");
			bulkCopy.ColumnMappings.Add("ImageDefineStandartScore", "ImageDefineStandartScore");
			bulkCopy.ColumnMappings.Add("ImageEditingRawScore", "ImageEditingRawScore");
			bulkCopy.ColumnMappings.Add("ImageEditingStandartScore", "ImageEditingStandartScore");
			bulkCopy.ColumnMappings.Add("CubesPatternRawScore", "CubesPatternRawScore");
			bulkCopy.ColumnMappings.Add("CubesPatternStandartScore", "CubesPatternStandartScore");
			bulkCopy.ColumnMappings.Add("PartsMergeRawScore", "PartsMergeRawScore");
			bulkCopy.ColumnMappings.Add("PartsMergeStandartScore", "PartsMergeStandartScore");
			bulkCopy.ColumnMappings.Add("PasswordRawScore", "PasswordRawScore");
			bulkCopy.ColumnMappings.Add("PasswordStandartScore", "PasswordStandartScore");
			bulkCopy.ColumnMappings.Add("MazesRawScore", "MazesRawScore");
			bulkCopy.ColumnMappings.Add("MazesStandartScore", "MazesStandartScore");
			bulkCopy.ColumnMappings.Add("TotalVerbalScore", "TotalVerbalScore");
			bulkCopy.ColumnMappings.Add("TotalPerformanceScore", "TotalPerformanceScore");
			bulkCopy.ColumnMappings.Add("TotalScore", "TotalScore");
			bulkCopy.ColumnMappings.Add("Notes", "Notes");
			bulkCopy.ColumnMappings.Add("TestDate", "TestDate");
			bulkCopy.ColumnMappings.Add("CreateDate", "CreateDate");
			bulkCopy.ColumnMappings.Add("UpdateDate", "UpdateDate");
			bulkCopy.ColumnMappings.Add("CreateUserId", "CreateUserId");
			bulkCopy.ColumnMappings.Add("UpdateUserId", "UpdateUserId");
			bulkCopy.ColumnMappings.Add("Active", "Active");
			bulkCopy.ColumnMappings.Add("Deleted", "Deleted");
			
			foreach(Ekip.Framework.Entities.Wiscr entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["WiscrId"] = entity.WiscrId;
							
				
					row["SeanceId"] = entity.SeanceId.HasValue ? (object) entity.SeanceId  : System.DBNull.Value;
							
				
					row["GeneralRawScore"] = entity.GeneralRawScore.HasValue ? (object) entity.GeneralRawScore  : System.DBNull.Value;
							
				
					row["GeneralStandartScore"] = entity.GeneralStandartScore.HasValue ? (object) entity.GeneralStandartScore  : System.DBNull.Value;
							
				
					row["SimilarityRawScore"] = entity.SimilarityRawScore.HasValue ? (object) entity.SimilarityRawScore  : System.DBNull.Value;
							
				
					row["SimilarityStandartScore"] = entity.SimilarityStandartScore.HasValue ? (object) entity.SimilarityStandartScore  : System.DBNull.Value;
							
				
					row["ArithmeticRawScore"] = entity.ArithmeticRawScore.HasValue ? (object) entity.ArithmeticRawScore  : System.DBNull.Value;
							
				
					row["ArithmeticStandartScore"] = entity.ArithmeticStandartScore.HasValue ? (object) entity.ArithmeticStandartScore  : System.DBNull.Value;
							
				
					row["WordRawScore"] = entity.WordRawScore.HasValue ? (object) entity.WordRawScore  : System.DBNull.Value;
							
				
					row["WordStandartScore"] = entity.WordStandartScore.HasValue ? (object) entity.WordStandartScore  : System.DBNull.Value;
							
				
					row["JudgingRawScore"] = entity.JudgingRawScore.HasValue ? (object) entity.JudgingRawScore  : System.DBNull.Value;
							
				
					row["JudgingStandartScore"] = entity.JudgingStandartScore.HasValue ? (object) entity.JudgingStandartScore  : System.DBNull.Value;
							
				
					row["SetOfNumbersRawScore"] = entity.SetOfNumbersRawScore.HasValue ? (object) entity.SetOfNumbersRawScore  : System.DBNull.Value;
							
				
					row["SetOfNumbersStandartScore"] = entity.SetOfNumbersStandartScore.HasValue ? (object) entity.SetOfNumbersStandartScore  : System.DBNull.Value;
							
				
					row["ImageDefineRawScore"] = entity.ImageDefineRawScore.HasValue ? (object) entity.ImageDefineRawScore  : System.DBNull.Value;
							
				
					row["ImageDefineStandartScore"] = entity.ImageDefineStandartScore.HasValue ? (object) entity.ImageDefineStandartScore  : System.DBNull.Value;
							
				
					row["ImageEditingRawScore"] = entity.ImageEditingRawScore.HasValue ? (object) entity.ImageEditingRawScore  : System.DBNull.Value;
							
				
					row["ImageEditingStandartScore"] = entity.ImageEditingStandartScore.HasValue ? (object) entity.ImageEditingStandartScore  : System.DBNull.Value;
							
				
					row["CubesPatternRawScore"] = entity.CubesPatternRawScore.HasValue ? (object) entity.CubesPatternRawScore  : System.DBNull.Value;
							
				
					row["CubesPatternStandartScore"] = entity.CubesPatternStandartScore.HasValue ? (object) entity.CubesPatternStandartScore  : System.DBNull.Value;
							
				
					row["PartsMergeRawScore"] = entity.PartsMergeRawScore.HasValue ? (object) entity.PartsMergeRawScore  : System.DBNull.Value;
							
				
					row["PartsMergeStandartScore"] = entity.PartsMergeStandartScore.HasValue ? (object) entity.PartsMergeStandartScore  : System.DBNull.Value;
							
				
					row["PasswordRawScore"] = entity.PasswordRawScore.HasValue ? (object) entity.PasswordRawScore  : System.DBNull.Value;
							
				
					row["PasswordStandartScore"] = entity.PasswordStandartScore.HasValue ? (object) entity.PasswordStandartScore  : System.DBNull.Value;
							
				
					row["MazesRawScore"] = entity.MazesRawScore.HasValue ? (object) entity.MazesRawScore  : System.DBNull.Value;
							
				
					row["MazesStandartScore"] = entity.MazesStandartScore.HasValue ? (object) entity.MazesStandartScore  : System.DBNull.Value;
							
				
					row["TotalVerbalScore"] = entity.TotalVerbalScore.HasValue ? (object) entity.TotalVerbalScore  : System.DBNull.Value;
							
				
					row["TotalPerformanceScore"] = entity.TotalPerformanceScore.HasValue ? (object) entity.TotalPerformanceScore  : System.DBNull.Value;
							
				
					row["TotalScore"] = entity.TotalScore.HasValue ? (object) entity.TotalScore  : System.DBNull.Value;
							
				
					row["Notes"] = entity.Notes;
							
				
					row["TestDate"] = entity.TestDate;
							
				
					row["CreateDate"] = entity.CreateDate;
							
				
					row["UpdateDate"] = entity.UpdateDate.HasValue ? (object) entity.UpdateDate  : System.DBNull.Value;
							
				
					row["CreateUserId"] = entity.CreateUserId;
							
				
					row["UpdateUserId"] = entity.UpdateUserId.HasValue ? (object) entity.UpdateUserId  : System.DBNull.Value;
							
				
					row["Active"] = entity.Active;
							
				
					row["Deleted"] = entity.Deleted;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(Ekip.Framework.Entities.Wiscr entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a Ekip.Framework.Entities.Wiscr object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">Ekip.Framework.Entities.Wiscr object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the Ekip.Framework.Entities.Wiscr object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, Ekip.Framework.Entities.Wiscr entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Wiscr_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@WiscrId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@SeanceId", DbType.Int32, (entity.SeanceId.HasValue ? (object) entity.SeanceId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GeneralRawScore", DbType.Int32, (entity.GeneralRawScore.HasValue ? (object) entity.GeneralRawScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GeneralStandartScore", DbType.Int32, (entity.GeneralStandartScore.HasValue ? (object) entity.GeneralStandartScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SimilarityRawScore", DbType.Int32, (entity.SimilarityRawScore.HasValue ? (object) entity.SimilarityRawScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SimilarityStandartScore", DbType.Int32, (entity.SimilarityStandartScore.HasValue ? (object) entity.SimilarityStandartScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ArithmeticRawScore", DbType.Int32, (entity.ArithmeticRawScore.HasValue ? (object) entity.ArithmeticRawScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ArithmeticStandartScore", DbType.Int32, (entity.ArithmeticStandartScore.HasValue ? (object) entity.ArithmeticStandartScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WordRawScore", DbType.Int32, (entity.WordRawScore.HasValue ? (object) entity.WordRawScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WordStandartScore", DbType.Int32, (entity.WordStandartScore.HasValue ? (object) entity.WordStandartScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@JudgingRawScore", DbType.Int32, (entity.JudgingRawScore.HasValue ? (object) entity.JudgingRawScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@JudgingStandartScore", DbType.Int32, (entity.JudgingStandartScore.HasValue ? (object) entity.JudgingStandartScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SetOfNumbersRawScore", DbType.Int32, (entity.SetOfNumbersRawScore.HasValue ? (object) entity.SetOfNumbersRawScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SetOfNumbersStandartScore", DbType.Int32, (entity.SetOfNumbersStandartScore.HasValue ? (object) entity.SetOfNumbersStandartScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ImageDefineRawScore", DbType.Int32, (entity.ImageDefineRawScore.HasValue ? (object) entity.ImageDefineRawScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ImageDefineStandartScore", DbType.Int32, (entity.ImageDefineStandartScore.HasValue ? (object) entity.ImageDefineStandartScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ImageEditingRawScore", DbType.Int32, (entity.ImageEditingRawScore.HasValue ? (object) entity.ImageEditingRawScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ImageEditingStandartScore", DbType.Int32, (entity.ImageEditingStandartScore.HasValue ? (object) entity.ImageEditingStandartScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CubesPatternRawScore", DbType.Int32, (entity.CubesPatternRawScore.HasValue ? (object) entity.CubesPatternRawScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CubesPatternStandartScore", DbType.Int32, (entity.CubesPatternStandartScore.HasValue ? (object) entity.CubesPatternStandartScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PartsMergeRawScore", DbType.Int32, (entity.PartsMergeRawScore.HasValue ? (object) entity.PartsMergeRawScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PartsMergeStandartScore", DbType.Int32, (entity.PartsMergeStandartScore.HasValue ? (object) entity.PartsMergeStandartScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PasswordRawScore", DbType.Int32, (entity.PasswordRawScore.HasValue ? (object) entity.PasswordRawScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PasswordStandartScore", DbType.Int32, (entity.PasswordStandartScore.HasValue ? (object) entity.PasswordStandartScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MazesRawScore", DbType.Int32, (entity.MazesRawScore.HasValue ? (object) entity.MazesRawScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MazesStandartScore", DbType.Int32, (entity.MazesStandartScore.HasValue ? (object) entity.MazesStandartScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TotalVerbalScore", DbType.Int32, (entity.TotalVerbalScore.HasValue ? (object) entity.TotalVerbalScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TotalPerformanceScore", DbType.Int32, (entity.TotalPerformanceScore.HasValue ? (object) entity.TotalPerformanceScore  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TotalScore", DbType.Int32, (entity.TotalScore.HasValue ? (object) entity.TotalScore  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
            database.AddInParameter(commandWrapper, "@TestDate", DbType.DateTime, entity.TestDate );
            database.AddInParameter(commandWrapper, "@CreateDate", DbType.DateTime, entity.CreateDate );
			database.AddInParameter(commandWrapper, "@UpdateDate", DbType.DateTime, (entity.UpdateDate.HasValue ? (object) entity.UpdateDate  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@CreateUserId", DbType.Int32, entity.CreateUserId );
			database.AddInParameter(commandWrapper, "@UpdateUserId", DbType.Int32, (entity.UpdateUserId.HasValue ? (object) entity.UpdateUserId  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@Active", DbType.Boolean, entity.Active );
            database.AddInParameter(commandWrapper, "@Deleted", DbType.Boolean, entity.Deleted );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _wiscrId = database.GetParameterValue(commandWrapper, "@WiscrId");
			entity.WiscrId = (System.Int32)_wiscrId;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">Ekip.Framework.Entities.Wiscr object to update.</param>
		/// <remarks>
		///		After updating the datasource, the Ekip.Framework.Entities.Wiscr object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, Ekip.Framework.Entities.Wiscr entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_Wiscr_Update", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@WiscrId", DbType.Int32, entity.WiscrId );
			database.AddInParameter(commandWrapper, "@SeanceId", DbType.Int32, (entity.SeanceId.HasValue ? (object) entity.SeanceId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GeneralRawScore", DbType.Int32, (entity.GeneralRawScore.HasValue ? (object) entity.GeneralRawScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GeneralStandartScore", DbType.Int32, (entity.GeneralStandartScore.HasValue ? (object) entity.GeneralStandartScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SimilarityRawScore", DbType.Int32, (entity.SimilarityRawScore.HasValue ? (object) entity.SimilarityRawScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SimilarityStandartScore", DbType.Int32, (entity.SimilarityStandartScore.HasValue ? (object) entity.SimilarityStandartScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ArithmeticRawScore", DbType.Int32, (entity.ArithmeticRawScore.HasValue ? (object) entity.ArithmeticRawScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ArithmeticStandartScore", DbType.Int32, (entity.ArithmeticStandartScore.HasValue ? (object) entity.ArithmeticStandartScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WordRawScore", DbType.Int32, (entity.WordRawScore.HasValue ? (object) entity.WordRawScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WordStandartScore", DbType.Int32, (entity.WordStandartScore.HasValue ? (object) entity.WordStandartScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@JudgingRawScore", DbType.Int32, (entity.JudgingRawScore.HasValue ? (object) entity.JudgingRawScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@JudgingStandartScore", DbType.Int32, (entity.JudgingStandartScore.HasValue ? (object) entity.JudgingStandartScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SetOfNumbersRawScore", DbType.Int32, (entity.SetOfNumbersRawScore.HasValue ? (object) entity.SetOfNumbersRawScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SetOfNumbersStandartScore", DbType.Int32, (entity.SetOfNumbersStandartScore.HasValue ? (object) entity.SetOfNumbersStandartScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ImageDefineRawScore", DbType.Int32, (entity.ImageDefineRawScore.HasValue ? (object) entity.ImageDefineRawScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ImageDefineStandartScore", DbType.Int32, (entity.ImageDefineStandartScore.HasValue ? (object) entity.ImageDefineStandartScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ImageEditingRawScore", DbType.Int32, (entity.ImageEditingRawScore.HasValue ? (object) entity.ImageEditingRawScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ImageEditingStandartScore", DbType.Int32, (entity.ImageEditingStandartScore.HasValue ? (object) entity.ImageEditingStandartScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CubesPatternRawScore", DbType.Int32, (entity.CubesPatternRawScore.HasValue ? (object) entity.CubesPatternRawScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CubesPatternStandartScore", DbType.Int32, (entity.CubesPatternStandartScore.HasValue ? (object) entity.CubesPatternStandartScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PartsMergeRawScore", DbType.Int32, (entity.PartsMergeRawScore.HasValue ? (object) entity.PartsMergeRawScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PartsMergeStandartScore", DbType.Int32, (entity.PartsMergeStandartScore.HasValue ? (object) entity.PartsMergeStandartScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PasswordRawScore", DbType.Int32, (entity.PasswordRawScore.HasValue ? (object) entity.PasswordRawScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PasswordStandartScore", DbType.Int32, (entity.PasswordStandartScore.HasValue ? (object) entity.PasswordStandartScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MazesRawScore", DbType.Int32, (entity.MazesRawScore.HasValue ? (object) entity.MazesRawScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MazesStandartScore", DbType.Int32, (entity.MazesStandartScore.HasValue ? (object) entity.MazesStandartScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TotalVerbalScore", DbType.Int32, (entity.TotalVerbalScore.HasValue ? (object) entity.TotalVerbalScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TotalPerformanceScore", DbType.Int32, (entity.TotalPerformanceScore.HasValue ? (object) entity.TotalPerformanceScore : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TotalScore", DbType.Int32, (entity.TotalScore.HasValue ? (object) entity.TotalScore : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
            database.AddInParameter(commandWrapper, "@TestDate", DbType.DateTime, entity.TestDate );
            database.AddInParameter(commandWrapper, "@CreateDate", DbType.DateTime, entity.CreateDate );
			database.AddInParameter(commandWrapper, "@UpdateDate", DbType.DateTime, (entity.UpdateDate.HasValue ? (object) entity.UpdateDate : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@CreateUserId", DbType.Int32, entity.CreateUserId );
			database.AddInParameter(commandWrapper, "@UpdateUserId", DbType.Int32, (entity.UpdateUserId.HasValue ? (object) entity.UpdateUserId : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@Active", DbType.Boolean, entity.Active );
            database.AddInParameter(commandWrapper, "@Deleted", DbType.Boolean, entity.Deleted );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
