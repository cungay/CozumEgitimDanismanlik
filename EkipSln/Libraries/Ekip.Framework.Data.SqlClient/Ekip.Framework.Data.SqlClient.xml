<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ekip.Framework.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.NeighborhoodView"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the NeighborhoodView objects.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NeighborhoodView objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProviderBase.Get(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NeighborhoodView objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NeighborhoodView objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProviderBase.GetByNeighborhoodId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wraps the 'NeighborhoodView_GetByNeighborhoodId' stored procedure. 
            </summary>
            <param name="neighborhoodId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodViewProviderBase.GetByTownId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wraps the 'NeighborhoodView_GetByTownId' stored procedure. 
            </summary>
            <param name="townId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlProvinceViewProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ProvinceView"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceViewProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlProvinceViewProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlProvinceViewProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ProvinceView objects.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceViewProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlProvinceViewProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceViewProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlProvinceViewProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlProvinceViewProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlProvinceViewProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlProvinceViewProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceViewProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ProvinceView objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceViewProviderBase.Get(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ProvinceView objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceViewProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ProvinceView objects.</returns>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlStreetViewProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.StreetView"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetViewProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlStreetViewProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlStreetViewProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the StreetView objects.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetViewProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlStreetViewProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetViewProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlStreetViewProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlStreetViewProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlStreetViewProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlStreetViewProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetViewProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of StreetView objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetViewProviderBase.Get(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of StreetView objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetViewProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of StreetView objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetViewProviderBase.GetByNeighborhoodId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wraps the 'StreetView_GetByNeighborhoodId' stored procedure. 
            </summary>
            <param name="neighborhoodId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetViewProviderBase.GetByStreetId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wraps the 'StreetView_GetByStreetId' stored procedure. 
            </summary>
            <param name="streetId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlTownViewProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.TownView"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownViewProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlTownViewProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlTownViewProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the TownView objects.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownViewProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlTownViewProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownViewProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlTownViewProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlTownViewProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlTownViewProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlTownViewProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownViewProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of TownView objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownViewProviderBase.Get(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of TownView objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownViewProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of TownView objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownViewProviderBase.GetByProvinceId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wraps the 'TownView_GetByProvinceId' stored procedure. 
            </summary>
            <param name="provinceId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownViewProviderBase.GetByTownId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wraps the 'TownView_GetByTownId' stored procedure. 
            </summary>
            <param name="townId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlAdvisorProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Advisor"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAdvisorProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlAdvisorProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Advisor"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_advisorId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Advisor objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Advisor objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Advisor objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Advisor objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.GetByAdvisorId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Advisor index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_advisorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Advisor"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Advisor})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Advisor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Advisor)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Advisor object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Advisor object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Advisor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAdvisorProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Advisor)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Advisor object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Advisor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_questionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestion objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestion objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestion objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestion objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.GetByQuestionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SeanceQuestion index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestion})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.SeanceQuestion object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.SeanceQuestion)">
            <summary>
            	Inserts a Ekip.Framework.Entities.SeanceQuestion object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.SeanceQuestion object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.SeanceQuestion object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.SeanceQuestion)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.SeanceQuestion object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.SeanceQuestion object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSeanceProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Seance"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Seance"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_seanceId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Seance objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Seance objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Seance objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Seance objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.GetByClientId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Seance_Client key.
            	FK_Seance_Client Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_clientId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Seance objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.GetBySeanceId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Seance index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_seanceId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Seance"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Seance})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Seance object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Seance)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Seance object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Seance object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Seance object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Seance)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Seance object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Seance object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.DeleteBySeanceID(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wraps the 'Seance_DeleteBySeanceID' stored procedure. 
            </summary>	
            <param name="seanceId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceProviderBase.DeleteByClientID(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wraps the 'Seance_DeleteByClientID' stored procedure. 
            </summary>	
            <param name="clientId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSchoolProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.School"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSchoolProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSchoolProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.School"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_schoolId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.School objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.School objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.School objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.School objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.GetBySchoolId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_School_SchoolName index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_schoolId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.School"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.School})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.School object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.School)">
            <summary>
            	Inserts a Ekip.Framework.Entities.School object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.School object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.School object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSchoolProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.School)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.School object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.School object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlReasonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Reason"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlReasonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlReasonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Reason"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_reasonId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Reason objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Reason objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Reason objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Reason objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.GetByReasonKey(Ekip.Framework.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Reason index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_reasonKey"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Reason"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.GetByReasonId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Reason_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_reasonId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Reason"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Reason})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Reason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Reason)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Reason object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Reason object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Reason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlReasonProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Reason)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Reason object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Reason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_groupId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormGroup objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormGroup objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormGroup objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormGroup objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.GetByGroupId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_QuestionForm_Group index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormGroup})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.QuestionFormGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.QuestionFormGroup)">
            <summary>
            	Inserts a Ekip.Framework.Entities.QuestionFormGroup object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.QuestionFormGroup object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.QuestionFormGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormGroupProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.QuestionFormGroup)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.QuestionFormGroup object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.QuestionFormGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_optionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestionOption objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestionOption objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestionOption objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestionOption objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.GetByQuestionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SeanceQuestion_Option_SeanceQuestion key.
            	FK_SeanceQuestion_Option_SeanceQuestion Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_questionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestionOption objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.GetByOptionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SeanceQuestion_Option index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_optionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionOption})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.SeanceQuestionOption object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.SeanceQuestionOption)">
            <summary>
            	Inserts a Ekip.Framework.Entities.SeanceQuestionOption object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.SeanceQuestionOption object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.SeanceQuestionOption object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionOptionProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.SeanceQuestionOption)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.SeanceQuestionOption object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.SeanceQuestionOption object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlTownProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Town"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlTownProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlTownProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Town"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlTownProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlTownProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_townId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Town objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Town objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Town objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Town objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.GetByProvinceId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Town_ProvinceId index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_provinceId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.GetByTownId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Town index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_townId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Town"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Town})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Town object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Town)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Town object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Town object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Town object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Town)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Town object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Town object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTownProviderBase.GetByProvinceId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wraps the 'Town_GetByProvinceId' stored procedure. 
            </summary>	
            <param name="provinceId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.SeanceReason"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.SeanceReason"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rowId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceReason objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceReason objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceReason objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceReason objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.GetByReasonId(Ekip.Framework.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Seance_Reason_Reason key.
            	FK_Seance_Reason_Reason Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_reasonId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceReason objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.GetBySeanceId(Ekip.Framework.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Seance_Reason_Seance key.
            	FK_Seance_Reason_Seance Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_seanceId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceReason objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.GetByRowId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Seance_Reason index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_rowId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceReason"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceReason})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.SeanceReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.SeanceReason)">
            <summary>
            	Inserts a Ekip.Framework.Entities.SeanceReason object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.SeanceReason object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.SeanceReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceReasonProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.SeanceReason)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.SeanceReason object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.SeanceReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlTeacherProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Teacher"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTeacherProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlTeacherProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Teacher"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_teacherId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Teacher objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Teacher objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Teacher objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Teacher objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.GetBySchoolId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Teacher_School key.
            	FK_Teacher_School Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_schoolId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Teacher objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.GetByTeacherId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Teacher_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_teacherId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Teacher"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Teacher})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Teacher object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Teacher)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Teacher object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Teacher object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Teacher object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlTeacherProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Teacher)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Teacher object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Teacher object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlWippsiProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Wippsi"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWippsiProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlWippsiProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Wippsi"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_wippsiId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Wippsi objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Wippsi objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Wippsi objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Wippsi objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.GetByWippsiId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Wippsi index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_wippsiId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Wippsi"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wippsi})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Wippsi object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Wippsi)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Wippsi object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Wippsi object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Wippsi object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWippsiProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Wippsi)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Wippsi object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Wippsi object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rowId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestionAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestionAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestionAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestionAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.GetByClientId(Ekip.Framework.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SeanceQuestion_Answer_Client key.
            	FK_SeanceQuestion_Answer_Client Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_clientId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestionAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.GetByQuestionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SeanceQuestion_Answer_SeanceQuestion key.
            	FK_SeanceQuestion_Answer_SeanceQuestion Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_questionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestionAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.GetByOptionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SeanceQuestion_Answer_SeanceQuestion_Option key.
            	FK_SeanceQuestion_Answer_SeanceQuestion_Option Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_optionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.SeanceQuestionAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.GetByRowId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SeanceQuestion_Answer index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_rowId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionAnswer})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.SeanceQuestionAnswer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.SeanceQuestionAnswer)">
            <summary>
            	Inserts a Ekip.Framework.Entities.SeanceQuestionAnswer object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.SeanceQuestionAnswer object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.SeanceQuestionAnswer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSeanceQuestionAnswerProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.SeanceQuestionAnswer)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.SeanceQuestionAnswer object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.SeanceQuestionAnswer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlStreetProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Street"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlStreetProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Street"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_streetId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Street objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Street objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Street objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Street objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.GetByNeighborhoodId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Street index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_neighborhoodId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.GetByStreetId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Street index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_streetId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Street"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Street})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Street object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Street)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Street object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Street object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Street object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Street)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Street object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Street object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlStreetProviderBase.GetByNeighborhoodId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wraps the 'Street_GetByNeighborhoodId' stored procedure. 
            </summary>	
            <param name="neighborhoodId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.QuestionForm"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.QuestionForm"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_questionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionForm objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionForm objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionForm objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionForm objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.GetByGroupId(Ekip.Framework.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QuestionForm_QuestionForm_Group key.
            	FK_QuestionForm_QuestionForm_Group Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_groupId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionForm objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.GetByQuestionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_QuestionForm index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionForm"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionForm})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.QuestionForm object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.QuestionForm)">
            <summary>
            	Inserts a Ekip.Framework.Entities.QuestionForm object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.QuestionForm object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.QuestionForm object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.QuestionForm)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.QuestionForm object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.QuestionForm object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSiblingProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Sibling"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSiblingProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSiblingProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Sibling"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_siblingId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Sibling objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Sibling objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Sibling objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Sibling objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.GetByClientId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Sibling_Client key.
            	FK_Sibling_Client Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_clientId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Sibling objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.GetBySiblingId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Sibling index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_siblingId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Sibling"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Sibling})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Sibling object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Sibling)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Sibling object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Sibling object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Sibling object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlSiblingProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Sibling)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Sibling object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Sibling object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlClientFatherProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ClientFather"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientFatherProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientFatherProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ClientFather"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_fatherId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientFather objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientFather objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientFather objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientFather objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.GetByFatherId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Father index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_fatherId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientFather"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientFather})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ClientFather object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ClientFather)">
            <summary>
            	Inserts a Ekip.Framework.Entities.ClientFather object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ClientFather object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ClientFather object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientFatherProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ClientFather)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ClientFather object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.ClientFather object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlClientMotherProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ClientMother"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientMotherProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientMotherProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ClientMother"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_motherId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientMother objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientMother objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientMother objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientMother objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.GetByMotherId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Mother index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_motherId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientMother"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientMother})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ClientMother object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ClientMother)">
            <summary>
            	Inserts a Ekip.Framework.Entities.ClientMother object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ClientMother object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ClientMother object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientMotherProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ClientMother)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ClientMother object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.ClientMother object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlClientAddressProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ClientAddress"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientAddressProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientAddressProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ClientAddress"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_addressId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientAddress objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientAddress objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientAddress objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientAddress objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.GetByAddressId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Users_Address index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_addressId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientAddress"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientAddress})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ClientAddress object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ClientAddress)">
            <summary>
            	Inserts a Ekip.Framework.Entities.ClientAddress object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ClientAddress object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ClientAddress object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ClientAddress)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ClientAddress object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.ClientAddress object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientAddressProviderBase.GetCurrentAddress(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'ClientAddress_GetCurrentAddress' stored procedure. 
            </summary>	
            <param name="clientId"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlProvinceProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Province"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlProvinceProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Province"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_provinceId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Province objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Province objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Province objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Province objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.GetByProvinceName(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Province_ProvinceName index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_provinceName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Province"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.GetByProvinceId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Province index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_provinceId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Province"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Province})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Province object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Province)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Province object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Province object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Province object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlProvinceProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Province)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Province object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Province object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.CalendarAge"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.CalendarAge"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_calendarAgeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.CalendarAge objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.CalendarAge objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.CalendarAge objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.CalendarAge objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.GetByCalendarAgeId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CalendarAge index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_calendarAgeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.CalendarAge"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.CalendarAge})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.CalendarAge object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.CalendarAge)">
            <summary>
            	Inserts a Ekip.Framework.Entities.CalendarAge object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.CalendarAge object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.CalendarAge object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.CalendarAge)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.CalendarAge object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.CalendarAge object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlCalendarAgeProviderBase.GetByYearAndMonth(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wraps the 'CalendarAge_GetByYearAndMonth' stored procedure. 
            </summary>	
            <param name="year"> A <c>System.Int32?</c> instance.</param>
            <param name="month"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlClientProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Client"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlClientProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Client"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_clientId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.GetByAddressId(Ekip.Framework.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Client_ClientAddress key.
            	FK_Client_ClientAddress Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_addressId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.GetByFatherId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Client_ClientFather key.
            	FK_Client_ClientFather Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_fatherId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.GetByMotherId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Client_ClientMother key.
            	FK_Client_ClientMother Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_motherId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Client objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.GetByFileNumber(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Client index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_fileNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Client"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.GetByClientId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Client index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_clientId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Client"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Client})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Client object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Client)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Client object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Client object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Client object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Client)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Client object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Client object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.FindByReason_FirstDate_BirthDate(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            This method wraps the 'Client_FindByReason_FirstDate_BirthDate' stored procedure. 
            </summary>	
            <param name="seanceReasonIds"> A <c>System.String</c> instance.</param>
            <param name="firstContactYears"> A <c>System.String</c> instance.</param>
            <param name="birthDateYears"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.AdvisorReport(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'Client_AdvisorReport' stored procedure. 
            </summary>	
            <param name="advisorIds"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.GetAllFirstContactYears(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'Client_GetAllFirstContactYears' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.GetByFirstContactYears(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'Client_GetByFirstContactYears' stored procedure. 
            </summary>	
            <param name="years"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.GetAllBirthDateYears(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'Client_GetAllBirthDateYears' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.GetFirst(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'Client_GetFirst' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.GetFileNumbers(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'Client_GetFileNumbers' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientProviderBase.GetLast(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'Client_GetLast' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlClientEducationProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ClientEducation"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientEducationProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ClientEducation"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_educationId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientEducation objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientEducation objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientEducation objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientEducation objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.GetByClientId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ClientEducation_Client key.
            	FK_ClientEducation_Client Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_clientId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientEducation objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.GetBySchoolId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ClientEducation_School key.
            	FK_ClientEducation_School Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_schoolId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ClientEducation objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.GetByEducationId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ClientEducation index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_educationId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientEducation"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientEducation})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ClientEducation object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ClientEducation)">
            <summary>
            	Inserts a Ekip.Framework.Entities.ClientEducation object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ClientEducation object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ClientEducation object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlClientEducationProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ClientEducation)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ClientEducation object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.ClientEducation object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlAreaProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Area"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAreaProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlAreaProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Area"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_areaId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Area objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Area objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Area objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Area objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.GetByAreaId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Area index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_areaId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Area"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Area})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Area object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Area)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Area object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Area object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Area object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlAreaProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Area)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Area object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Area object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlJobProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Job"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlJobProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlJobProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlJobProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Job"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlJobProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlJobProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_jobId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Job objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Job objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Job objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Job objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.GetByJobName(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Job_FullName index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_jobName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Job"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.GetByJobId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Job index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_jobId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Job"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Job})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Job object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Job)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Job object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Job object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Job object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlJobProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Job)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Job object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Job object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Neighborhood"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Neighborhood"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_neighborhoodId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Neighborhood objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Neighborhood objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Neighborhood objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Neighborhood objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.GetByTownId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Neighborhood index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_townId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.GetByNeighborhoodId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Neighborhood index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_neighborhoodId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Neighborhood"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Neighborhood})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Neighborhood object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Neighborhood)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Neighborhood object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Neighborhood object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Neighborhood object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNeighborhoodProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Neighborhood)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Neighborhood object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Neighborhood object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_optionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormOption objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormOption objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormOption objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormOption objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.GetByQuestionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QuestionForm_Option_QuestionForm key.
            	FK_QuestionForm_Option_QuestionForm Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_questionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormOption objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.GetByOptionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_QuestionForm_Option index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_optionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormOption})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.QuestionFormOption object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.QuestionFormOption)">
            <summary>
            	Inserts a Ekip.Framework.Entities.QuestionFormOption object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.QuestionFormOption object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.QuestionFormOption object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormOptionProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.QuestionFormOption)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.QuestionFormOption object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.QuestionFormOption object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rowId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.GetByClientId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QuestionForm_Answer_Client key.
            	FK_QuestionForm_Answer_Client Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_clientId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.GetByQuestionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QuestionForm_Answer_QuestionForm key.
            	FK_QuestionForm_Answer_QuestionForm Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_questionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.GetByOptionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QuestionForm_Answer_QuestionForm_Option key.
            	FK_QuestionForm_Answer_QuestionForm_Option Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_optionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.QuestionFormAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.GetByRowId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_QuestionForm_Answer index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_rowId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormAnswer})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.QuestionFormAnswer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.QuestionFormAnswer)">
            <summary>
            	Inserts a Ekip.Framework.Entities.QuestionFormAnswer object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.QuestionFormAnswer object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.QuestionFormAnswer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlQuestionFormAnswerProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.QuestionFormAnswer)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.QuestionFormAnswer object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.QuestionFormAnswer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_groupId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormGroup objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormGroup objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormGroup objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormGroup objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.GetByGroupId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ObservationForm_Group index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormGroup})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ObservationFormGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ObservationFormGroup)">
            <summary>
            	Inserts a Ekip.Framework.Entities.ObservationFormGroup object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ObservationFormGroup object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ObservationFormGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormGroupProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ObservationFormGroup)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ObservationFormGroup object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.ObservationFormGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlObservationFormProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ObservationForm"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlObservationFormProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ObservationForm"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_questionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationForm objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationForm objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationForm objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationForm objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.GetByGroupId(Ekip.Framework.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ObservationForm_ObservationForm_Group key.
            	FK_ObservationForm_ObservationForm_Group Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_groupId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationForm objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.GetByQuestionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ObservationForm index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationForm"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationForm})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ObservationForm object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ObservationForm)">
            <summary>
            	Inserts a Ekip.Framework.Entities.ObservationForm object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ObservationForm object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ObservationForm object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ObservationForm)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ObservationForm object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.ObservationForm object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_optionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormOption objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormOption objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormOption objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormOption objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.GetByQuestionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ObservationForm_Option_ObservationForm key.
            	FK_ObservationForm_Option_ObservationForm Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_questionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormOption objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.GetByOptionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ObservationForm_Option index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_optionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormOption})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ObservationFormOption object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ObservationFormOption)">
            <summary>
            	Inserts a Ekip.Framework.Entities.ObservationFormOption object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ObservationFormOption object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ObservationFormOption object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormOptionProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ObservationFormOption)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ObservationFormOption object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.ObservationFormOption object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rowId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.GetByClientId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ObservationForm_Answer_Client key.
            	FK_ObservationForm_Answer_Client Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_clientId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.GetByQuestionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ObservationForm_Answer_ObservationForm key.
            	FK_ObservationForm_Answer_ObservationForm Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_questionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.GetByOptionId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ObservationForm_Answer_ObservationForm_Option key.
            	FK_ObservationForm_Answer_ObservationForm_Option Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_optionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.ObservationFormAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.GetByRowId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ObservationForm_Answer index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_rowId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormAnswer})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ObservationFormAnswer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ObservationFormAnswer)">
            <summary>
            	Inserts a Ekip.Framework.Entities.ObservationFormAnswer object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ObservationFormAnswer object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.ObservationFormAnswer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlObservationFormAnswerProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.ObservationFormAnswer)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.ObservationFormAnswer object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.ObservationFormAnswer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlWiscrProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Wiscr"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWiscrProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlWiscrProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Ekip.Framework.Entities.Wiscr"/> entity.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.Delete(Ekip.Framework.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_wiscrId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.Find(Ekip.Framework.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Wiscr objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.Find(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Wiscr objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.GetAll(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Wiscr objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.GetPaged(Ekip.Framework.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Ekip.Framework.Entities.Wiscr objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.GetByWiscrId(Ekip.Framework.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Wiscr index.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="_wiscrId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Wiscr"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.BulkInsert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wiscr})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Wiscr object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.Insert(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Wiscr)">
            <summary>
            	Inserts a Ekip.Framework.Entities.Wiscr object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Wiscr object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Ekip.Framework.Entities.Wiscr object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlWiscrProviderBase.Update(Ekip.Framework.Data.TransactionManager,Ekip.Framework.Entities.Wiscr)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Ekip.Framework.Data.TransactionManager"/> object</param>
            <param name="entity">Ekip.Framework.Entities.Wiscr object to update.</param>
            <remarks>
            	After updating the datasource, the Ekip.Framework.Entities.Wiscr object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:Ekip.Framework.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.AdvisorProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Advisor"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlAdvisorProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlAdvisorProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SeanceQuestionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSeanceQuestionProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSeanceQuestionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SeanceProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Seance"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSeanceProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSeanceProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SchoolProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.School"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSchoolProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSchoolProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ReasonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Reason"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlReasonProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlReasonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.QuestionFormGroupProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlQuestionFormGroupProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlQuestionFormGroupProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SeanceQuestionOptionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSeanceQuestionOptionProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSeanceQuestionOptionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.TownProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Town"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlTownProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlTownProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SeanceReasonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.SeanceReason"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSeanceReasonProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSeanceReasonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.TeacherProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Teacher"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlTeacherProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlTeacherProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.WippsiProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Wippsi"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlWippsiProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlWippsiProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SeanceQuestionAnswerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSeanceQuestionAnswerProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSeanceQuestionAnswerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.StreetProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Street"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlStreetProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlStreetProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.QuestionFormProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.QuestionForm"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlQuestionFormProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlQuestionFormProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SiblingProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Sibling"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSiblingProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlSiblingProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ClientFatherProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.ClientFather"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlClientFatherProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlClientFatherProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ClientMotherProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.ClientMother"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlClientMotherProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlClientMotherProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ClientAddressProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.ClientAddress"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlClientAddressProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlClientAddressProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ProvinceProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Province"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlProvinceProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlProvinceProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.CalendarAgeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.CalendarAge"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlCalendarAgeProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlCalendarAgeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ClientProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Client"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlClientProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlClientProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ClientEducationProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.ClientEducation"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlClientEducationProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlClientEducationProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.AreaProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Area"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlAreaProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlAreaProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.JobProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Job"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlJobProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlJobProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.NeighborhoodProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Neighborhood"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlNeighborhoodProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlNeighborhoodProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.QuestionFormOptionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlQuestionFormOptionProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlQuestionFormOptionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.QuestionFormAnswerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlQuestionFormAnswerProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlQuestionFormAnswerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ObservationFormGroupProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlObservationFormGroupProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlObservationFormGroupProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ObservationFormProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.ObservationForm"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlObservationFormProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlObservationFormProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ObservationFormOptionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlObservationFormOptionProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlObservationFormOptionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ObservationFormAnswerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlObservationFormAnswerProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlObservationFormAnswerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.WiscrProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.Wiscr"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlWiscrProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlWiscrProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.NeighborhoodViewProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.NeighborhoodView"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlNeighborhoodViewProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlNeighborhoodViewProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ProvinceViewProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.ProvinceView"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlProvinceViewProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlProvinceViewProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.StreetViewProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.StreetView"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlStreetViewProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlStreetViewProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.TownViewProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Ekip.Framework.Entities.TownView"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlTownViewProvider">
            <summary>
            Gets the current <see cref="P:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.SqlTownViewProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(Ekip.Framework.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(Ekip.Framework.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(Ekip.Framework.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(Ekip.Framework.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(Ekip.Framework.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(Ekip.Framework.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(Ekip.Framework.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(Ekip.Framework.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(Ekip.Framework.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(Ekip.Framework.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(Ekip.Framework.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(Ekip.Framework.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:Ekip.Framework.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:Ekip.Framework.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:Ekip.Framework.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Ekip.Framework.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Ekip.Framework.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,Ekip.Framework.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="T:Ekip.Framework.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:Ekip.Framework.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:Ekip.Framework.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
    </members>
</doc>
