
/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 13 Şubat 2019 Çarşamba
	Important: Do not modify this file. Edit the file Wippsi.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Ekip.Framework.Entities.Validation;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'Wippsi' table. [No description found the database]	
	///</summary>
	[DataContract]
	[DataObject, CLSCompliant(true)]
	public abstract partial class WippsiBase : EntityBase, IWippsi, IEntityId<WippsiKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		[DataMember]
		private WippsiEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		[DataMember]
		private WippsiEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private WippsiEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		private TList<Wippsi> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		public event WippsiEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		public event WippsiEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="WippsiBase"/> instance.
		///</summary>
		public WippsiBase()
		{
			this.entityData = new WippsiEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="WippsiBase"/> instance.
		///</summary>
		///<param name="_seanceId"></param>
		///<param name="_generalRawScore"></param>
		///<param name="_generalStandartScore"></param>
		///<param name="_similarityRawScore"></param>
		///<param name="_similarityStandartScore"></param>
		///<param name="_arithmeticRawScore"></param>
		///<param name="_arithmeticStandartScore"></param>
		///<param name="_wordRawScore"></param>
		///<param name="_wordStandartScore"></param>
		///<param name="_understandingRawScore"></param>
		///<param name="_understandingStandartScore"></param>
		///<param name="_sentencesRawScore"></param>
		///<param name="_sentencesStandartScore"></param>
		///<param name="_ımageDefineRawScore"></param>
		///<param name="_ımageDefineStandartScore"></param>
		///<param name="_animalHomesRawScore"></param>
		///<param name="_animalHomesStandartScore"></param>
		///<param name="_geometricShapeRawScore"></param>
		///<param name="_geometricShapeStandartScore"></param>
		///<param name="_blocksPatternRawScore"></param>
		///<param name="_blocksPatternStandartScore"></param>
		///<param name="_animalHomesAgainRawScore"></param>
		///<param name="_animalHomesAgainStandartScore"></param>
		///<param name="_mazesRawScore"></param>
		///<param name="_mazesStandartScore"></param>
		///<param name="_totalVerbalScore"></param>
		///<param name="_totalPerformanceScore"></param>
		///<param name="_totalScore"></param>
		///<param name="_notes"></param>
		///<param name="_testDate"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_createUserId"></param>
		///<param name="_updateUserId"></param>
		///<param name="_active"></param>
		///<param name="_deleted"></param>
		public WippsiBase(System.Int32? _seanceId, System.Int32? _generalRawScore, System.Int32? _generalStandartScore, 
			System.Int32? _similarityRawScore, System.Int32? _similarityStandartScore, System.Int32? _arithmeticRawScore, 
			System.Int32? _arithmeticStandartScore, System.Int32? _wordRawScore, System.Int32? _wordStandartScore, 
			System.Int32? _understandingRawScore, System.Int32? _understandingStandartScore, System.Int32? _sentencesRawScore, 
			System.Int32? _sentencesStandartScore, System.Int32? _ımageDefineRawScore, System.Int32? _ımageDefineStandartScore, 
			System.Int32? _animalHomesRawScore, System.Int32? _animalHomesStandartScore, System.Int32? _geometricShapeRawScore, 
			System.Int32? _geometricShapeStandartScore, System.Int32? _blocksPatternRawScore, System.Int32? _blocksPatternStandartScore, 
			System.Int32? _animalHomesAgainRawScore, System.Int32? _animalHomesAgainStandartScore, System.Int32? _mazesRawScore, 
			System.Int32? _mazesStandartScore, System.Int32? _totalVerbalScore, System.Int32? _totalPerformanceScore, 
			System.Int32? _totalScore, System.String _notes, System.DateTime _testDate, System.DateTime _createDate, 
			System.DateTime? _updateDate, System.Int32 _createUserId, System.Int32? _updateUserId, System.Boolean _active, 
			System.Boolean _deleted)
		{
			this.entityData = new WippsiEntityData();
			this.backupData = null;

			this.SeanceId = _seanceId;
			this.GeneralRawScore = _generalRawScore;
			this.GeneralStandartScore = _generalStandartScore;
			this.SimilarityRawScore = _similarityRawScore;
			this.SimilarityStandartScore = _similarityStandartScore;
			this.ArithmeticRawScore = _arithmeticRawScore;
			this.ArithmeticStandartScore = _arithmeticStandartScore;
			this.WordRawScore = _wordRawScore;
			this.WordStandartScore = _wordStandartScore;
			this.UnderstandingRawScore = _understandingRawScore;
			this.UnderstandingStandartScore = _understandingStandartScore;
			this.SentencesRawScore = _sentencesRawScore;
			this.SentencesStandartScore = _sentencesStandartScore;
			this.ImageDefineRawScore = _ımageDefineRawScore;
			this.ImageDefineStandartScore = _ımageDefineStandartScore;
			this.AnimalHomesRawScore = _animalHomesRawScore;
			this.AnimalHomesStandartScore = _animalHomesStandartScore;
			this.GeometricShapeRawScore = _geometricShapeRawScore;
			this.GeometricShapeStandartScore = _geometricShapeStandartScore;
			this.BlocksPatternRawScore = _blocksPatternRawScore;
			this.BlocksPatternStandartScore = _blocksPatternStandartScore;
			this.AnimalHomesAgainRawScore = _animalHomesAgainRawScore;
			this.AnimalHomesAgainStandartScore = _animalHomesAgainStandartScore;
			this.MazesRawScore = _mazesRawScore;
			this.MazesStandartScore = _mazesStandartScore;
			this.TotalVerbalScore = _totalVerbalScore;
			this.TotalPerformanceScore = _totalPerformanceScore;
			this.TotalScore = _totalScore;
			this.Notes = _notes;
			this.TestDate = _testDate;
			this.CreateDate = _createDate;
			this.UpdateDate = _updateDate;
			this.CreateUserId = _createUserId;
			this.UpdateUserId = _updateUserId;
			this.Active = _active;
			this.Deleted = _deleted;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Wippsi"/> instance.
		///</summary>
		///<param name="_seanceId"></param>
		///<param name="_generalRawScore"></param>
		///<param name="_generalStandartScore"></param>
		///<param name="_similarityRawScore"></param>
		///<param name="_similarityStandartScore"></param>
		///<param name="_arithmeticRawScore"></param>
		///<param name="_arithmeticStandartScore"></param>
		///<param name="_wordRawScore"></param>
		///<param name="_wordStandartScore"></param>
		///<param name="_understandingRawScore"></param>
		///<param name="_understandingStandartScore"></param>
		///<param name="_sentencesRawScore"></param>
		///<param name="_sentencesStandartScore"></param>
		///<param name="_ımageDefineRawScore"></param>
		///<param name="_ımageDefineStandartScore"></param>
		///<param name="_animalHomesRawScore"></param>
		///<param name="_animalHomesStandartScore"></param>
		///<param name="_geometricShapeRawScore"></param>
		///<param name="_geometricShapeStandartScore"></param>
		///<param name="_blocksPatternRawScore"></param>
		///<param name="_blocksPatternStandartScore"></param>
		///<param name="_animalHomesAgainRawScore"></param>
		///<param name="_animalHomesAgainStandartScore"></param>
		///<param name="_mazesRawScore"></param>
		///<param name="_mazesStandartScore"></param>
		///<param name="_totalVerbalScore"></param>
		///<param name="_totalPerformanceScore"></param>
		///<param name="_totalScore"></param>
		///<param name="_notes"></param>
		///<param name="_testDate"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_createUserId"></param>
		///<param name="_updateUserId"></param>
		///<param name="_active"></param>
		///<param name="_deleted"></param>
		public static Wippsi CreateWippsi(System.Int32? _seanceId, System.Int32? _generalRawScore, System.Int32? _generalStandartScore, 
			System.Int32? _similarityRawScore, System.Int32? _similarityStandartScore, System.Int32? _arithmeticRawScore, 
			System.Int32? _arithmeticStandartScore, System.Int32? _wordRawScore, System.Int32? _wordStandartScore, 
			System.Int32? _understandingRawScore, System.Int32? _understandingStandartScore, System.Int32? _sentencesRawScore, 
			System.Int32? _sentencesStandartScore, System.Int32? _ımageDefineRawScore, System.Int32? _ımageDefineStandartScore, 
			System.Int32? _animalHomesRawScore, System.Int32? _animalHomesStandartScore, System.Int32? _geometricShapeRawScore, 
			System.Int32? _geometricShapeStandartScore, System.Int32? _blocksPatternRawScore, System.Int32? _blocksPatternStandartScore, 
			System.Int32? _animalHomesAgainRawScore, System.Int32? _animalHomesAgainStandartScore, System.Int32? _mazesRawScore, 
			System.Int32? _mazesStandartScore, System.Int32? _totalVerbalScore, System.Int32? _totalPerformanceScore, 
			System.Int32? _totalScore, System.String _notes, System.DateTime _testDate, System.DateTime _createDate, 
			System.DateTime? _updateDate, System.Int32 _createUserId, System.Int32? _updateUserId, System.Boolean _active, 
			System.Boolean _deleted)
		{
			Wippsi newWippsi = new Wippsi();
			newWippsi.SeanceId = _seanceId;
			newWippsi.GeneralRawScore = _generalRawScore;
			newWippsi.GeneralStandartScore = _generalStandartScore;
			newWippsi.SimilarityRawScore = _similarityRawScore;
			newWippsi.SimilarityStandartScore = _similarityStandartScore;
			newWippsi.ArithmeticRawScore = _arithmeticRawScore;
			newWippsi.ArithmeticStandartScore = _arithmeticStandartScore;
			newWippsi.WordRawScore = _wordRawScore;
			newWippsi.WordStandartScore = _wordStandartScore;
			newWippsi.UnderstandingRawScore = _understandingRawScore;
			newWippsi.UnderstandingStandartScore = _understandingStandartScore;
			newWippsi.SentencesRawScore = _sentencesRawScore;
			newWippsi.SentencesStandartScore = _sentencesStandartScore;
			newWippsi.ImageDefineRawScore = _ımageDefineRawScore;
			newWippsi.ImageDefineStandartScore = _ımageDefineStandartScore;
			newWippsi.AnimalHomesRawScore = _animalHomesRawScore;
			newWippsi.AnimalHomesStandartScore = _animalHomesStandartScore;
			newWippsi.GeometricShapeRawScore = _geometricShapeRawScore;
			newWippsi.GeometricShapeStandartScore = _geometricShapeStandartScore;
			newWippsi.BlocksPatternRawScore = _blocksPatternRawScore;
			newWippsi.BlocksPatternStandartScore = _blocksPatternStandartScore;
			newWippsi.AnimalHomesAgainRawScore = _animalHomesAgainRawScore;
			newWippsi.AnimalHomesAgainStandartScore = _animalHomesAgainStandartScore;
			newWippsi.MazesRawScore = _mazesRawScore;
			newWippsi.MazesStandartScore = _mazesStandartScore;
			newWippsi.TotalVerbalScore = _totalVerbalScore;
			newWippsi.TotalPerformanceScore = _totalPerformanceScore;
			newWippsi.TotalScore = _totalScore;
			newWippsi.Notes = _notes;
			newWippsi.TestDate = _testDate;
			newWippsi.CreateDate = _createDate;
			newWippsi.UpdateDate = _updateDate;
			newWippsi.CreateUserId = _createUserId;
			newWippsi.UpdateUserId = _updateUserId;
			newWippsi.Active = _active;
			newWippsi.Deleted = _deleted;
			return newWippsi;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the WippsiId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 WippsiId
		{
			get
			{
				return this.entityData.WippsiId; 
			}
			
			set
			{
				if (this.entityData.WippsiId == value)
					return;
				
                OnPropertyChanging("WippsiId");                    
				OnColumnChanging(WippsiColumn.WippsiId, this.entityData.WippsiId);
				this.entityData.WippsiId = value;
				this.EntityId.WippsiId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.WippsiId, this.entityData.WippsiId);
				OnPropertyChanged("WippsiId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeanceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SeanceId
		{
			get
			{
				return this.entityData.SeanceId; 
			}
			
			set
			{
				if (this.entityData.SeanceId == value)
					return;
				
                OnPropertyChanging("SeanceId");                    
				OnColumnChanging(WippsiColumn.SeanceId, this.entityData.SeanceId);
				this.entityData.SeanceId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.SeanceId, this.entityData.SeanceId);
				OnPropertyChanged("SeanceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GeneralRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GeneralRawScore
		{
			get
			{
				return this.entityData.GeneralRawScore; 
			}
			
			set
			{
				if (this.entityData.GeneralRawScore == value)
					return;
				
                OnPropertyChanging("GeneralRawScore");                    
				OnColumnChanging(WippsiColumn.GeneralRawScore, this.entityData.GeneralRawScore);
				this.entityData.GeneralRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.GeneralRawScore, this.entityData.GeneralRawScore);
				OnPropertyChanged("GeneralRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GeneralStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GeneralStandartScore
		{
			get
			{
				return this.entityData.GeneralStandartScore; 
			}
			
			set
			{
				if (this.entityData.GeneralStandartScore == value)
					return;
				
                OnPropertyChanging("GeneralStandartScore");                    
				OnColumnChanging(WippsiColumn.GeneralStandartScore, this.entityData.GeneralStandartScore);
				this.entityData.GeneralStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.GeneralStandartScore, this.entityData.GeneralStandartScore);
				OnPropertyChanged("GeneralStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SimilarityRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SimilarityRawScore
		{
			get
			{
				return this.entityData.SimilarityRawScore; 
			}
			
			set
			{
				if (this.entityData.SimilarityRawScore == value)
					return;
				
                OnPropertyChanging("SimilarityRawScore");                    
				OnColumnChanging(WippsiColumn.SimilarityRawScore, this.entityData.SimilarityRawScore);
				this.entityData.SimilarityRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.SimilarityRawScore, this.entityData.SimilarityRawScore);
				OnPropertyChanged("SimilarityRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SimilarityStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SimilarityStandartScore
		{
			get
			{
				return this.entityData.SimilarityStandartScore; 
			}
			
			set
			{
				if (this.entityData.SimilarityStandartScore == value)
					return;
				
                OnPropertyChanging("SimilarityStandartScore");                    
				OnColumnChanging(WippsiColumn.SimilarityStandartScore, this.entityData.SimilarityStandartScore);
				this.entityData.SimilarityStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.SimilarityStandartScore, this.entityData.SimilarityStandartScore);
				OnPropertyChanged("SimilarityStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ArithmeticRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ArithmeticRawScore
		{
			get
			{
				return this.entityData.ArithmeticRawScore; 
			}
			
			set
			{
				if (this.entityData.ArithmeticRawScore == value)
					return;
				
                OnPropertyChanging("ArithmeticRawScore");                    
				OnColumnChanging(WippsiColumn.ArithmeticRawScore, this.entityData.ArithmeticRawScore);
				this.entityData.ArithmeticRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.ArithmeticRawScore, this.entityData.ArithmeticRawScore);
				OnPropertyChanged("ArithmeticRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ArithmeticStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ArithmeticStandartScore
		{
			get
			{
				return this.entityData.ArithmeticStandartScore; 
			}
			
			set
			{
				if (this.entityData.ArithmeticStandartScore == value)
					return;
				
                OnPropertyChanging("ArithmeticStandartScore");                    
				OnColumnChanging(WippsiColumn.ArithmeticStandartScore, this.entityData.ArithmeticStandartScore);
				this.entityData.ArithmeticStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.ArithmeticStandartScore, this.entityData.ArithmeticStandartScore);
				OnPropertyChanged("ArithmeticStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WordRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? WordRawScore
		{
			get
			{
				return this.entityData.WordRawScore; 
			}
			
			set
			{
				if (this.entityData.WordRawScore == value)
					return;
				
                OnPropertyChanging("WordRawScore");                    
				OnColumnChanging(WippsiColumn.WordRawScore, this.entityData.WordRawScore);
				this.entityData.WordRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.WordRawScore, this.entityData.WordRawScore);
				OnPropertyChanged("WordRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WordStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? WordStandartScore
		{
			get
			{
				return this.entityData.WordStandartScore; 
			}
			
			set
			{
				if (this.entityData.WordStandartScore == value)
					return;
				
                OnPropertyChanging("WordStandartScore");                    
				OnColumnChanging(WippsiColumn.WordStandartScore, this.entityData.WordStandartScore);
				this.entityData.WordStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.WordStandartScore, this.entityData.WordStandartScore);
				OnPropertyChanged("WordStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnderstandingRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UnderstandingRawScore
		{
			get
			{
				return this.entityData.UnderstandingRawScore; 
			}
			
			set
			{
				if (this.entityData.UnderstandingRawScore == value)
					return;
				
                OnPropertyChanging("UnderstandingRawScore");                    
				OnColumnChanging(WippsiColumn.UnderstandingRawScore, this.entityData.UnderstandingRawScore);
				this.entityData.UnderstandingRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.UnderstandingRawScore, this.entityData.UnderstandingRawScore);
				OnPropertyChanged("UnderstandingRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnderstandingStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UnderstandingStandartScore
		{
			get
			{
				return this.entityData.UnderstandingStandartScore; 
			}
			
			set
			{
				if (this.entityData.UnderstandingStandartScore == value)
					return;
				
                OnPropertyChanging("UnderstandingStandartScore");                    
				OnColumnChanging(WippsiColumn.UnderstandingStandartScore, this.entityData.UnderstandingStandartScore);
				this.entityData.UnderstandingStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.UnderstandingStandartScore, this.entityData.UnderstandingStandartScore);
				OnPropertyChanged("UnderstandingStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SentencesRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SentencesRawScore
		{
			get
			{
				return this.entityData.SentencesRawScore; 
			}
			
			set
			{
				if (this.entityData.SentencesRawScore == value)
					return;
				
                OnPropertyChanging("SentencesRawScore");                    
				OnColumnChanging(WippsiColumn.SentencesRawScore, this.entityData.SentencesRawScore);
				this.entityData.SentencesRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.SentencesRawScore, this.entityData.SentencesRawScore);
				OnPropertyChanged("SentencesRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SentencesStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SentencesStandartScore
		{
			get
			{
				return this.entityData.SentencesStandartScore; 
			}
			
			set
			{
				if (this.entityData.SentencesStandartScore == value)
					return;
				
                OnPropertyChanging("SentencesStandartScore");                    
				OnColumnChanging(WippsiColumn.SentencesStandartScore, this.entityData.SentencesStandartScore);
				this.entityData.SentencesStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.SentencesStandartScore, this.entityData.SentencesStandartScore);
				OnPropertyChanged("SentencesStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImageDefineRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ImageDefineRawScore
		{
			get
			{
				return this.entityData.ImageDefineRawScore; 
			}
			
			set
			{
				if (this.entityData.ImageDefineRawScore == value)
					return;
				
                OnPropertyChanging("ImageDefineRawScore");                    
				OnColumnChanging(WippsiColumn.ImageDefineRawScore, this.entityData.ImageDefineRawScore);
				this.entityData.ImageDefineRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.ImageDefineRawScore, this.entityData.ImageDefineRawScore);
				OnPropertyChanged("ImageDefineRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImageDefineStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ImageDefineStandartScore
		{
			get
			{
				return this.entityData.ImageDefineStandartScore; 
			}
			
			set
			{
				if (this.entityData.ImageDefineStandartScore == value)
					return;
				
                OnPropertyChanging("ImageDefineStandartScore");                    
				OnColumnChanging(WippsiColumn.ImageDefineStandartScore, this.entityData.ImageDefineStandartScore);
				this.entityData.ImageDefineStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.ImageDefineStandartScore, this.entityData.ImageDefineStandartScore);
				OnPropertyChanged("ImageDefineStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnimalHomesRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AnimalHomesRawScore
		{
			get
			{
				return this.entityData.AnimalHomesRawScore; 
			}
			
			set
			{
				if (this.entityData.AnimalHomesRawScore == value)
					return;
				
                OnPropertyChanging("AnimalHomesRawScore");                    
				OnColumnChanging(WippsiColumn.AnimalHomesRawScore, this.entityData.AnimalHomesRawScore);
				this.entityData.AnimalHomesRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.AnimalHomesRawScore, this.entityData.AnimalHomesRawScore);
				OnPropertyChanged("AnimalHomesRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnimalHomesStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AnimalHomesStandartScore
		{
			get
			{
				return this.entityData.AnimalHomesStandartScore; 
			}
			
			set
			{
				if (this.entityData.AnimalHomesStandartScore == value)
					return;
				
                OnPropertyChanging("AnimalHomesStandartScore");                    
				OnColumnChanging(WippsiColumn.AnimalHomesStandartScore, this.entityData.AnimalHomesStandartScore);
				this.entityData.AnimalHomesStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.AnimalHomesStandartScore, this.entityData.AnimalHomesStandartScore);
				OnPropertyChanged("AnimalHomesStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GeometricShapeRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GeometricShapeRawScore
		{
			get
			{
				return this.entityData.GeometricShapeRawScore; 
			}
			
			set
			{
				if (this.entityData.GeometricShapeRawScore == value)
					return;
				
                OnPropertyChanging("GeometricShapeRawScore");                    
				OnColumnChanging(WippsiColumn.GeometricShapeRawScore, this.entityData.GeometricShapeRawScore);
				this.entityData.GeometricShapeRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.GeometricShapeRawScore, this.entityData.GeometricShapeRawScore);
				OnPropertyChanged("GeometricShapeRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GeometricShapeStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GeometricShapeStandartScore
		{
			get
			{
				return this.entityData.GeometricShapeStandartScore; 
			}
			
			set
			{
				if (this.entityData.GeometricShapeStandartScore == value)
					return;
				
                OnPropertyChanging("GeometricShapeStandartScore");                    
				OnColumnChanging(WippsiColumn.GeometricShapeStandartScore, this.entityData.GeometricShapeStandartScore);
				this.entityData.GeometricShapeStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.GeometricShapeStandartScore, this.entityData.GeometricShapeStandartScore);
				OnPropertyChanged("GeometricShapeStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BlocksPatternRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? BlocksPatternRawScore
		{
			get
			{
				return this.entityData.BlocksPatternRawScore; 
			}
			
			set
			{
				if (this.entityData.BlocksPatternRawScore == value)
					return;
				
                OnPropertyChanging("BlocksPatternRawScore");                    
				OnColumnChanging(WippsiColumn.BlocksPatternRawScore, this.entityData.BlocksPatternRawScore);
				this.entityData.BlocksPatternRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.BlocksPatternRawScore, this.entityData.BlocksPatternRawScore);
				OnPropertyChanged("BlocksPatternRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BlocksPatternStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? BlocksPatternStandartScore
		{
			get
			{
				return this.entityData.BlocksPatternStandartScore; 
			}
			
			set
			{
				if (this.entityData.BlocksPatternStandartScore == value)
					return;
				
                OnPropertyChanging("BlocksPatternStandartScore");                    
				OnColumnChanging(WippsiColumn.BlocksPatternStandartScore, this.entityData.BlocksPatternStandartScore);
				this.entityData.BlocksPatternStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.BlocksPatternStandartScore, this.entityData.BlocksPatternStandartScore);
				OnPropertyChanged("BlocksPatternStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnimalHomesAgainRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AnimalHomesAgainRawScore
		{
			get
			{
				return this.entityData.AnimalHomesAgainRawScore; 
			}
			
			set
			{
				if (this.entityData.AnimalHomesAgainRawScore == value)
					return;
				
                OnPropertyChanging("AnimalHomesAgainRawScore");                    
				OnColumnChanging(WippsiColumn.AnimalHomesAgainRawScore, this.entityData.AnimalHomesAgainRawScore);
				this.entityData.AnimalHomesAgainRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.AnimalHomesAgainRawScore, this.entityData.AnimalHomesAgainRawScore);
				OnPropertyChanged("AnimalHomesAgainRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnimalHomesAgainStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AnimalHomesAgainStandartScore
		{
			get
			{
				return this.entityData.AnimalHomesAgainStandartScore; 
			}
			
			set
			{
				if (this.entityData.AnimalHomesAgainStandartScore == value)
					return;
				
                OnPropertyChanging("AnimalHomesAgainStandartScore");                    
				OnColumnChanging(WippsiColumn.AnimalHomesAgainStandartScore, this.entityData.AnimalHomesAgainStandartScore);
				this.entityData.AnimalHomesAgainStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.AnimalHomesAgainStandartScore, this.entityData.AnimalHomesAgainStandartScore);
				OnPropertyChanged("AnimalHomesAgainStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MazesRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MazesRawScore
		{
			get
			{
				return this.entityData.MazesRawScore; 
			}
			
			set
			{
				if (this.entityData.MazesRawScore == value)
					return;
				
                OnPropertyChanging("MazesRawScore");                    
				OnColumnChanging(WippsiColumn.MazesRawScore, this.entityData.MazesRawScore);
				this.entityData.MazesRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.MazesRawScore, this.entityData.MazesRawScore);
				OnPropertyChanged("MazesRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MazesStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MazesStandartScore
		{
			get
			{
				return this.entityData.MazesStandartScore; 
			}
			
			set
			{
				if (this.entityData.MazesStandartScore == value)
					return;
				
                OnPropertyChanging("MazesStandartScore");                    
				OnColumnChanging(WippsiColumn.MazesStandartScore, this.entityData.MazesStandartScore);
				this.entityData.MazesStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.MazesStandartScore, this.entityData.MazesStandartScore);
				OnPropertyChanged("MazesStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalVerbalScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TotalVerbalScore
		{
			get
			{
				return this.entityData.TotalVerbalScore; 
			}
			
			set
			{
				if (this.entityData.TotalVerbalScore == value)
					return;
				
                OnPropertyChanging("TotalVerbalScore");                    
				OnColumnChanging(WippsiColumn.TotalVerbalScore, this.entityData.TotalVerbalScore);
				this.entityData.TotalVerbalScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.TotalVerbalScore, this.entityData.TotalVerbalScore);
				OnPropertyChanged("TotalVerbalScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalPerformanceScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TotalPerformanceScore
		{
			get
			{
				return this.entityData.TotalPerformanceScore; 
			}
			
			set
			{
				if (this.entityData.TotalPerformanceScore == value)
					return;
				
                OnPropertyChanging("TotalPerformanceScore");                    
				OnColumnChanging(WippsiColumn.TotalPerformanceScore, this.entityData.TotalPerformanceScore);
				this.entityData.TotalPerformanceScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.TotalPerformanceScore, this.entityData.TotalPerformanceScore);
				OnPropertyChanged("TotalPerformanceScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TotalScore
		{
			get
			{
				return this.entityData.TotalScore; 
			}
			
			set
			{
				if (this.entityData.TotalScore == value)
					return;
				
                OnPropertyChanging("TotalScore");                    
				OnColumnChanging(WippsiColumn.TotalScore, this.entityData.TotalScore);
				this.entityData.TotalScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.TotalScore, this.entityData.TotalScore);
				OnPropertyChanged("TotalScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
				
                OnPropertyChanging("Notes");                    
				OnColumnChanging(WippsiColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TestDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime TestDate
		{
			get
			{
				return this.entityData.TestDate; 
			}
			
			set
			{
				if (this.entityData.TestDate == value)
					return;
				
                OnPropertyChanging("TestDate");                    
				OnColumnChanging(WippsiColumn.TestDate, this.entityData.TestDate);
				this.entityData.TestDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.TestDate, this.entityData.TestDate);
				OnPropertyChanged("TestDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
				
                OnPropertyChanging("CreateDate");                    
				OnColumnChanging(WippsiColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
				
                OnPropertyChanging("UpdateDate");                    
				OnColumnChanging(WippsiColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CreateUserId
		{
			get
			{
				return this.entityData.CreateUserId; 
			}
			
			set
			{
				if (this.entityData.CreateUserId == value)
					return;
				
                OnPropertyChanging("CreateUserId");                    
				OnColumnChanging(WippsiColumn.CreateUserId, this.entityData.CreateUserId);
				this.entityData.CreateUserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.CreateUserId, this.entityData.CreateUserId);
				OnPropertyChanged("CreateUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UpdateUserId
		{
			get
			{
				return this.entityData.UpdateUserId; 
			}
			
			set
			{
				if (this.entityData.UpdateUserId == value)
					return;
				
                OnPropertyChanging("UpdateUserId");                    
				OnColumnChanging(WippsiColumn.UpdateUserId, this.entityData.UpdateUserId);
				this.entityData.UpdateUserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.UpdateUserId, this.entityData.UpdateUserId);
				OnPropertyChanged("UpdateUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Active property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Active
		{
			get
			{
				return this.entityData.Active; 
			}
			
			set
			{
				if (this.entityData.Active == value)
					return;
				
                OnPropertyChanging("Active");                    
				OnColumnChanging(WippsiColumn.Active, this.entityData.Active);
				this.entityData.Active = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.Active, this.entityData.Active);
				OnPropertyChanged("Active");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Deleted property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Deleted
		{
			get
			{
				return this.entityData.Deleted; 
			}
			
			set
			{
				if (this.entityData.Deleted == value)
					return;
				
                OnPropertyChanging("Deleted");                    
				OnColumnChanging(WippsiColumn.Deleted, this.entityData.Deleted);
				this.entityData.Deleted = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WippsiColumn.Deleted, this.entityData.Deleted);
				OnPropertyChanged("Deleted");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Wippsi"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"WippsiId", "SeanceId", "GeneralRawScore", "GeneralStandartScore", "SimilarityRawScore", "SimilarityStandartScore", "ArithmeticRawScore", "ArithmeticStandartScore", "WordRawScore", "WordStandartScore", "UnderstandingRawScore", "UnderstandingStandartScore", "SentencesRawScore", "SentencesStandartScore", "ImageDefineRawScore", "ImageDefineStandartScore", "AnimalHomesRawScore", "AnimalHomesStandartScore", "GeometricShapeRawScore", "GeometricShapeStandartScore", "BlocksPatternRawScore", "BlocksPatternStandartScore", "AnimalHomesAgainRawScore", "AnimalHomesAgainStandartScore", "MazesRawScore", "MazesStandartScore", "TotalVerbalScore", "TotalPerformanceScore", "TotalScore", "Notes", "TestDate", "CreateDate", "UpdateDate", "CreateUserId", "UpdateUserId", "Active", "Deleted"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as WippsiEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Wippsi) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Wippsi>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Wippsi);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Wippsi Entity 
		///</summary>
		protected virtual Wippsi Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Wippsi copy = new Wippsi();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.WippsiId = this.WippsiId;
				copy.SeanceId = this.SeanceId;
				copy.GeneralRawScore = this.GeneralRawScore;
				copy.GeneralStandartScore = this.GeneralStandartScore;
				copy.SimilarityRawScore = this.SimilarityRawScore;
				copy.SimilarityStandartScore = this.SimilarityStandartScore;
				copy.ArithmeticRawScore = this.ArithmeticRawScore;
				copy.ArithmeticStandartScore = this.ArithmeticStandartScore;
				copy.WordRawScore = this.WordRawScore;
				copy.WordStandartScore = this.WordStandartScore;
				copy.UnderstandingRawScore = this.UnderstandingRawScore;
				copy.UnderstandingStandartScore = this.UnderstandingStandartScore;
				copy.SentencesRawScore = this.SentencesRawScore;
				copy.SentencesStandartScore = this.SentencesStandartScore;
				copy.ImageDefineRawScore = this.ImageDefineRawScore;
				copy.ImageDefineStandartScore = this.ImageDefineStandartScore;
				copy.AnimalHomesRawScore = this.AnimalHomesRawScore;
				copy.AnimalHomesStandartScore = this.AnimalHomesStandartScore;
				copy.GeometricShapeRawScore = this.GeometricShapeRawScore;
				copy.GeometricShapeStandartScore = this.GeometricShapeStandartScore;
				copy.BlocksPatternRawScore = this.BlocksPatternRawScore;
				copy.BlocksPatternStandartScore = this.BlocksPatternStandartScore;
				copy.AnimalHomesAgainRawScore = this.AnimalHomesAgainRawScore;
				copy.AnimalHomesAgainStandartScore = this.AnimalHomesAgainStandartScore;
				copy.MazesRawScore = this.MazesRawScore;
				copy.MazesStandartScore = this.MazesStandartScore;
				copy.TotalVerbalScore = this.TotalVerbalScore;
				copy.TotalPerformanceScore = this.TotalPerformanceScore;
				copy.TotalScore = this.TotalScore;
				copy.Notes = this.Notes;
				copy.TestDate = this.TestDate;
				copy.CreateDate = this.CreateDate;
				copy.UpdateDate = this.UpdateDate;
				copy.CreateUserId = this.CreateUserId;
				copy.UpdateUserId = this.UpdateUserId;
				copy.Active = this.Active;
				copy.Deleted = this.Deleted;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Wippsi Entity 
		///</summary>
		public virtual Wippsi Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Wippsi Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Wippsi DeepCopy()
		{
			return EntityHelper.Clone<Wippsi>(this as Wippsi);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as WippsiEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new WippsiEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as WippsiEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(WippsiColumn column)
		{
			switch(column)
			{
					case WippsiColumn.WippsiId:
					return entityData.WippsiId != _originalData.WippsiId;
					case WippsiColumn.SeanceId:
					return entityData.SeanceId != _originalData.SeanceId;
					case WippsiColumn.GeneralRawScore:
					return entityData.GeneralRawScore != _originalData.GeneralRawScore;
					case WippsiColumn.GeneralStandartScore:
					return entityData.GeneralStandartScore != _originalData.GeneralStandartScore;
					case WippsiColumn.SimilarityRawScore:
					return entityData.SimilarityRawScore != _originalData.SimilarityRawScore;
					case WippsiColumn.SimilarityStandartScore:
					return entityData.SimilarityStandartScore != _originalData.SimilarityStandartScore;
					case WippsiColumn.ArithmeticRawScore:
					return entityData.ArithmeticRawScore != _originalData.ArithmeticRawScore;
					case WippsiColumn.ArithmeticStandartScore:
					return entityData.ArithmeticStandartScore != _originalData.ArithmeticStandartScore;
					case WippsiColumn.WordRawScore:
					return entityData.WordRawScore != _originalData.WordRawScore;
					case WippsiColumn.WordStandartScore:
					return entityData.WordStandartScore != _originalData.WordStandartScore;
					case WippsiColumn.UnderstandingRawScore:
					return entityData.UnderstandingRawScore != _originalData.UnderstandingRawScore;
					case WippsiColumn.UnderstandingStandartScore:
					return entityData.UnderstandingStandartScore != _originalData.UnderstandingStandartScore;
					case WippsiColumn.SentencesRawScore:
					return entityData.SentencesRawScore != _originalData.SentencesRawScore;
					case WippsiColumn.SentencesStandartScore:
					return entityData.SentencesStandartScore != _originalData.SentencesStandartScore;
					case WippsiColumn.ImageDefineRawScore:
					return entityData.ImageDefineRawScore != _originalData.ImageDefineRawScore;
					case WippsiColumn.ImageDefineStandartScore:
					return entityData.ImageDefineStandartScore != _originalData.ImageDefineStandartScore;
					case WippsiColumn.AnimalHomesRawScore:
					return entityData.AnimalHomesRawScore != _originalData.AnimalHomesRawScore;
					case WippsiColumn.AnimalHomesStandartScore:
					return entityData.AnimalHomesStandartScore != _originalData.AnimalHomesStandartScore;
					case WippsiColumn.GeometricShapeRawScore:
					return entityData.GeometricShapeRawScore != _originalData.GeometricShapeRawScore;
					case WippsiColumn.GeometricShapeStandartScore:
					return entityData.GeometricShapeStandartScore != _originalData.GeometricShapeStandartScore;
					case WippsiColumn.BlocksPatternRawScore:
					return entityData.BlocksPatternRawScore != _originalData.BlocksPatternRawScore;
					case WippsiColumn.BlocksPatternStandartScore:
					return entityData.BlocksPatternStandartScore != _originalData.BlocksPatternStandartScore;
					case WippsiColumn.AnimalHomesAgainRawScore:
					return entityData.AnimalHomesAgainRawScore != _originalData.AnimalHomesAgainRawScore;
					case WippsiColumn.AnimalHomesAgainStandartScore:
					return entityData.AnimalHomesAgainStandartScore != _originalData.AnimalHomesAgainStandartScore;
					case WippsiColumn.MazesRawScore:
					return entityData.MazesRawScore != _originalData.MazesRawScore;
					case WippsiColumn.MazesStandartScore:
					return entityData.MazesStandartScore != _originalData.MazesStandartScore;
					case WippsiColumn.TotalVerbalScore:
					return entityData.TotalVerbalScore != _originalData.TotalVerbalScore;
					case WippsiColumn.TotalPerformanceScore:
					return entityData.TotalPerformanceScore != _originalData.TotalPerformanceScore;
					case WippsiColumn.TotalScore:
					return entityData.TotalScore != _originalData.TotalScore;
					case WippsiColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case WippsiColumn.TestDate:
					return entityData.TestDate != _originalData.TestDate;
					case WippsiColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case WippsiColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
					case WippsiColumn.CreateUserId:
					return entityData.CreateUserId != _originalData.CreateUserId;
					case WippsiColumn.UpdateUserId:
					return entityData.UpdateUserId != _originalData.UpdateUserId;
					case WippsiColumn.Active:
					return entityData.Active != _originalData.Active;
					case WippsiColumn.Deleted:
					return entityData.Deleted != _originalData.Deleted;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< WippsiColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.WippsiId != _originalData.WippsiId;
			result = result || entityData.SeanceId != _originalData.SeanceId;
			result = result || entityData.GeneralRawScore != _originalData.GeneralRawScore;
			result = result || entityData.GeneralStandartScore != _originalData.GeneralStandartScore;
			result = result || entityData.SimilarityRawScore != _originalData.SimilarityRawScore;
			result = result || entityData.SimilarityStandartScore != _originalData.SimilarityStandartScore;
			result = result || entityData.ArithmeticRawScore != _originalData.ArithmeticRawScore;
			result = result || entityData.ArithmeticStandartScore != _originalData.ArithmeticStandartScore;
			result = result || entityData.WordRawScore != _originalData.WordRawScore;
			result = result || entityData.WordStandartScore != _originalData.WordStandartScore;
			result = result || entityData.UnderstandingRawScore != _originalData.UnderstandingRawScore;
			result = result || entityData.UnderstandingStandartScore != _originalData.UnderstandingStandartScore;
			result = result || entityData.SentencesRawScore != _originalData.SentencesRawScore;
			result = result || entityData.SentencesStandartScore != _originalData.SentencesStandartScore;
			result = result || entityData.ImageDefineRawScore != _originalData.ImageDefineRawScore;
			result = result || entityData.ImageDefineStandartScore != _originalData.ImageDefineStandartScore;
			result = result || entityData.AnimalHomesRawScore != _originalData.AnimalHomesRawScore;
			result = result || entityData.AnimalHomesStandartScore != _originalData.AnimalHomesStandartScore;
			result = result || entityData.GeometricShapeRawScore != _originalData.GeometricShapeRawScore;
			result = result || entityData.GeometricShapeStandartScore != _originalData.GeometricShapeStandartScore;
			result = result || entityData.BlocksPatternRawScore != _originalData.BlocksPatternRawScore;
			result = result || entityData.BlocksPatternStandartScore != _originalData.BlocksPatternStandartScore;
			result = result || entityData.AnimalHomesAgainRawScore != _originalData.AnimalHomesAgainRawScore;
			result = result || entityData.AnimalHomesAgainStandartScore != _originalData.AnimalHomesAgainStandartScore;
			result = result || entityData.MazesRawScore != _originalData.MazesRawScore;
			result = result || entityData.MazesStandartScore != _originalData.MazesStandartScore;
			result = result || entityData.TotalVerbalScore != _originalData.TotalVerbalScore;
			result = result || entityData.TotalPerformanceScore != _originalData.TotalPerformanceScore;
			result = result || entityData.TotalScore != _originalData.TotalScore;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.TestDate != _originalData.TestDate;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			result = result || entityData.CreateUserId != _originalData.CreateUserId;
			result = result || entityData.UpdateUserId != _originalData.UpdateUserId;
			result = result || entityData.Active != _originalData.Active;
			result = result || entityData.Deleted != _originalData.Deleted;
			return result;
		}	
		
		///<summary>
		///  Returns a Wippsi Entity with the original data.
		///</summary>
		public Wippsi GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateWippsi(
				_originalData.SeanceId,
				_originalData.GeneralRawScore,
				_originalData.GeneralStandartScore,
				_originalData.SimilarityRawScore,
				_originalData.SimilarityStandartScore,
				_originalData.ArithmeticRawScore,
				_originalData.ArithmeticStandartScore,
				_originalData.WordRawScore,
				_originalData.WordStandartScore,
				_originalData.UnderstandingRawScore,
				_originalData.UnderstandingStandartScore,
				_originalData.SentencesRawScore,
				_originalData.SentencesStandartScore,
				_originalData.ImageDefineRawScore,
				_originalData.ImageDefineStandartScore,
				_originalData.AnimalHomesRawScore,
				_originalData.AnimalHomesStandartScore,
				_originalData.GeometricShapeRawScore,
				_originalData.GeometricShapeStandartScore,
				_originalData.BlocksPatternRawScore,
				_originalData.BlocksPatternStandartScore,
				_originalData.AnimalHomesAgainRawScore,
				_originalData.AnimalHomesAgainStandartScore,
				_originalData.MazesRawScore,
				_originalData.MazesStandartScore,
				_originalData.TotalVerbalScore,
				_originalData.TotalPerformanceScore,
				_originalData.TotalScore,
				_originalData.Notes,
				_originalData.TestDate,
				_originalData.CreateDate,
				_originalData.UpdateDate,
				_originalData.CreateUserId,
				_originalData.UpdateUserId,
				_originalData.Active,
				_originalData.Deleted
				);
				
			return (Wippsi)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="WippsiBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is WippsiBase)
				return ValueEquals(this, (WippsiBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="WippsiBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.WippsiId.GetHashCode() ^ 
					((this.SeanceId == null) ? string.Empty : this.SeanceId.ToString()).GetHashCode() ^ 
					((this.GeneralRawScore == null) ? string.Empty : this.GeneralRawScore.ToString()).GetHashCode() ^ 
					((this.GeneralStandartScore == null) ? string.Empty : this.GeneralStandartScore.ToString()).GetHashCode() ^ 
					((this.SimilarityRawScore == null) ? string.Empty : this.SimilarityRawScore.ToString()).GetHashCode() ^ 
					((this.SimilarityStandartScore == null) ? string.Empty : this.SimilarityStandartScore.ToString()).GetHashCode() ^ 
					((this.ArithmeticRawScore == null) ? string.Empty : this.ArithmeticRawScore.ToString()).GetHashCode() ^ 
					((this.ArithmeticStandartScore == null) ? string.Empty : this.ArithmeticStandartScore.ToString()).GetHashCode() ^ 
					((this.WordRawScore == null) ? string.Empty : this.WordRawScore.ToString()).GetHashCode() ^ 
					((this.WordStandartScore == null) ? string.Empty : this.WordStandartScore.ToString()).GetHashCode() ^ 
					((this.UnderstandingRawScore == null) ? string.Empty : this.UnderstandingRawScore.ToString()).GetHashCode() ^ 
					((this.UnderstandingStandartScore == null) ? string.Empty : this.UnderstandingStandartScore.ToString()).GetHashCode() ^ 
					((this.SentencesRawScore == null) ? string.Empty : this.SentencesRawScore.ToString()).GetHashCode() ^ 
					((this.SentencesStandartScore == null) ? string.Empty : this.SentencesStandartScore.ToString()).GetHashCode() ^ 
					((this.ImageDefineRawScore == null) ? string.Empty : this.ImageDefineRawScore.ToString()).GetHashCode() ^ 
					((this.ImageDefineStandartScore == null) ? string.Empty : this.ImageDefineStandartScore.ToString()).GetHashCode() ^ 
					((this.AnimalHomesRawScore == null) ? string.Empty : this.AnimalHomesRawScore.ToString()).GetHashCode() ^ 
					((this.AnimalHomesStandartScore == null) ? string.Empty : this.AnimalHomesStandartScore.ToString()).GetHashCode() ^ 
					((this.GeometricShapeRawScore == null) ? string.Empty : this.GeometricShapeRawScore.ToString()).GetHashCode() ^ 
					((this.GeometricShapeStandartScore == null) ? string.Empty : this.GeometricShapeStandartScore.ToString()).GetHashCode() ^ 
					((this.BlocksPatternRawScore == null) ? string.Empty : this.BlocksPatternRawScore.ToString()).GetHashCode() ^ 
					((this.BlocksPatternStandartScore == null) ? string.Empty : this.BlocksPatternStandartScore.ToString()).GetHashCode() ^ 
					((this.AnimalHomesAgainRawScore == null) ? string.Empty : this.AnimalHomesAgainRawScore.ToString()).GetHashCode() ^ 
					((this.AnimalHomesAgainStandartScore == null) ? string.Empty : this.AnimalHomesAgainStandartScore.ToString()).GetHashCode() ^ 
					((this.MazesRawScore == null) ? string.Empty : this.MazesRawScore.ToString()).GetHashCode() ^ 
					((this.MazesStandartScore == null) ? string.Empty : this.MazesStandartScore.ToString()).GetHashCode() ^ 
					((this.TotalVerbalScore == null) ? string.Empty : this.TotalVerbalScore.ToString()).GetHashCode() ^ 
					((this.TotalPerformanceScore == null) ? string.Empty : this.TotalPerformanceScore.ToString()).GetHashCode() ^ 
					((this.TotalScore == null) ? string.Empty : this.TotalScore.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					this.TestDate.GetHashCode() ^ 
					this.CreateDate.GetHashCode() ^ 
					((this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString()).GetHashCode() ^ 
					this.CreateUserId.GetHashCode() ^ 
					((this.UpdateUserId == null) ? string.Empty : this.UpdateUserId.ToString()).GetHashCode() ^ 
					this.Active.GetHashCode() ^ 
					this.Deleted.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="WippsiBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(WippsiBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="WippsiBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="WippsiBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="WippsiBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(WippsiBase Object1, WippsiBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.WippsiId != Object2.WippsiId)
				equal = false;
			if ( Object1.SeanceId != null && Object2.SeanceId != null )
			{
				if (Object1.SeanceId != Object2.SeanceId)
					equal = false;
			}
			else if (Object1.SeanceId == null ^ Object2.SeanceId == null )
			{
				equal = false;
			}
			if ( Object1.GeneralRawScore != null && Object2.GeneralRawScore != null )
			{
				if (Object1.GeneralRawScore != Object2.GeneralRawScore)
					equal = false;
			}
			else if (Object1.GeneralRawScore == null ^ Object2.GeneralRawScore == null )
			{
				equal = false;
			}
			if ( Object1.GeneralStandartScore != null && Object2.GeneralStandartScore != null )
			{
				if (Object1.GeneralStandartScore != Object2.GeneralStandartScore)
					equal = false;
			}
			else if (Object1.GeneralStandartScore == null ^ Object2.GeneralStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.SimilarityRawScore != null && Object2.SimilarityRawScore != null )
			{
				if (Object1.SimilarityRawScore != Object2.SimilarityRawScore)
					equal = false;
			}
			else if (Object1.SimilarityRawScore == null ^ Object2.SimilarityRawScore == null )
			{
				equal = false;
			}
			if ( Object1.SimilarityStandartScore != null && Object2.SimilarityStandartScore != null )
			{
				if (Object1.SimilarityStandartScore != Object2.SimilarityStandartScore)
					equal = false;
			}
			else if (Object1.SimilarityStandartScore == null ^ Object2.SimilarityStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.ArithmeticRawScore != null && Object2.ArithmeticRawScore != null )
			{
				if (Object1.ArithmeticRawScore != Object2.ArithmeticRawScore)
					equal = false;
			}
			else if (Object1.ArithmeticRawScore == null ^ Object2.ArithmeticRawScore == null )
			{
				equal = false;
			}
			if ( Object1.ArithmeticStandartScore != null && Object2.ArithmeticStandartScore != null )
			{
				if (Object1.ArithmeticStandartScore != Object2.ArithmeticStandartScore)
					equal = false;
			}
			else if (Object1.ArithmeticStandartScore == null ^ Object2.ArithmeticStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.WordRawScore != null && Object2.WordRawScore != null )
			{
				if (Object1.WordRawScore != Object2.WordRawScore)
					equal = false;
			}
			else if (Object1.WordRawScore == null ^ Object2.WordRawScore == null )
			{
				equal = false;
			}
			if ( Object1.WordStandartScore != null && Object2.WordStandartScore != null )
			{
				if (Object1.WordStandartScore != Object2.WordStandartScore)
					equal = false;
			}
			else if (Object1.WordStandartScore == null ^ Object2.WordStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.UnderstandingRawScore != null && Object2.UnderstandingRawScore != null )
			{
				if (Object1.UnderstandingRawScore != Object2.UnderstandingRawScore)
					equal = false;
			}
			else if (Object1.UnderstandingRawScore == null ^ Object2.UnderstandingRawScore == null )
			{
				equal = false;
			}
			if ( Object1.UnderstandingStandartScore != null && Object2.UnderstandingStandartScore != null )
			{
				if (Object1.UnderstandingStandartScore != Object2.UnderstandingStandartScore)
					equal = false;
			}
			else if (Object1.UnderstandingStandartScore == null ^ Object2.UnderstandingStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.SentencesRawScore != null && Object2.SentencesRawScore != null )
			{
				if (Object1.SentencesRawScore != Object2.SentencesRawScore)
					equal = false;
			}
			else if (Object1.SentencesRawScore == null ^ Object2.SentencesRawScore == null )
			{
				equal = false;
			}
			if ( Object1.SentencesStandartScore != null && Object2.SentencesStandartScore != null )
			{
				if (Object1.SentencesStandartScore != Object2.SentencesStandartScore)
					equal = false;
			}
			else if (Object1.SentencesStandartScore == null ^ Object2.SentencesStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.ImageDefineRawScore != null && Object2.ImageDefineRawScore != null )
			{
				if (Object1.ImageDefineRawScore != Object2.ImageDefineRawScore)
					equal = false;
			}
			else if (Object1.ImageDefineRawScore == null ^ Object2.ImageDefineRawScore == null )
			{
				equal = false;
			}
			if ( Object1.ImageDefineStandartScore != null && Object2.ImageDefineStandartScore != null )
			{
				if (Object1.ImageDefineStandartScore != Object2.ImageDefineStandartScore)
					equal = false;
			}
			else if (Object1.ImageDefineStandartScore == null ^ Object2.ImageDefineStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.AnimalHomesRawScore != null && Object2.AnimalHomesRawScore != null )
			{
				if (Object1.AnimalHomesRawScore != Object2.AnimalHomesRawScore)
					equal = false;
			}
			else if (Object1.AnimalHomesRawScore == null ^ Object2.AnimalHomesRawScore == null )
			{
				equal = false;
			}
			if ( Object1.AnimalHomesStandartScore != null && Object2.AnimalHomesStandartScore != null )
			{
				if (Object1.AnimalHomesStandartScore != Object2.AnimalHomesStandartScore)
					equal = false;
			}
			else if (Object1.AnimalHomesStandartScore == null ^ Object2.AnimalHomesStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.GeometricShapeRawScore != null && Object2.GeometricShapeRawScore != null )
			{
				if (Object1.GeometricShapeRawScore != Object2.GeometricShapeRawScore)
					equal = false;
			}
			else if (Object1.GeometricShapeRawScore == null ^ Object2.GeometricShapeRawScore == null )
			{
				equal = false;
			}
			if ( Object1.GeometricShapeStandartScore != null && Object2.GeometricShapeStandartScore != null )
			{
				if (Object1.GeometricShapeStandartScore != Object2.GeometricShapeStandartScore)
					equal = false;
			}
			else if (Object1.GeometricShapeStandartScore == null ^ Object2.GeometricShapeStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.BlocksPatternRawScore != null && Object2.BlocksPatternRawScore != null )
			{
				if (Object1.BlocksPatternRawScore != Object2.BlocksPatternRawScore)
					equal = false;
			}
			else if (Object1.BlocksPatternRawScore == null ^ Object2.BlocksPatternRawScore == null )
			{
				equal = false;
			}
			if ( Object1.BlocksPatternStandartScore != null && Object2.BlocksPatternStandartScore != null )
			{
				if (Object1.BlocksPatternStandartScore != Object2.BlocksPatternStandartScore)
					equal = false;
			}
			else if (Object1.BlocksPatternStandartScore == null ^ Object2.BlocksPatternStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.AnimalHomesAgainRawScore != null && Object2.AnimalHomesAgainRawScore != null )
			{
				if (Object1.AnimalHomesAgainRawScore != Object2.AnimalHomesAgainRawScore)
					equal = false;
			}
			else if (Object1.AnimalHomesAgainRawScore == null ^ Object2.AnimalHomesAgainRawScore == null )
			{
				equal = false;
			}
			if ( Object1.AnimalHomesAgainStandartScore != null && Object2.AnimalHomesAgainStandartScore != null )
			{
				if (Object1.AnimalHomesAgainStandartScore != Object2.AnimalHomesAgainStandartScore)
					equal = false;
			}
			else if (Object1.AnimalHomesAgainStandartScore == null ^ Object2.AnimalHomesAgainStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.MazesRawScore != null && Object2.MazesRawScore != null )
			{
				if (Object1.MazesRawScore != Object2.MazesRawScore)
					equal = false;
			}
			else if (Object1.MazesRawScore == null ^ Object2.MazesRawScore == null )
			{
				equal = false;
			}
			if ( Object1.MazesStandartScore != null && Object2.MazesStandartScore != null )
			{
				if (Object1.MazesStandartScore != Object2.MazesStandartScore)
					equal = false;
			}
			else if (Object1.MazesStandartScore == null ^ Object2.MazesStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.TotalVerbalScore != null && Object2.TotalVerbalScore != null )
			{
				if (Object1.TotalVerbalScore != Object2.TotalVerbalScore)
					equal = false;
			}
			else if (Object1.TotalVerbalScore == null ^ Object2.TotalVerbalScore == null )
			{
				equal = false;
			}
			if ( Object1.TotalPerformanceScore != null && Object2.TotalPerformanceScore != null )
			{
				if (Object1.TotalPerformanceScore != Object2.TotalPerformanceScore)
					equal = false;
			}
			else if (Object1.TotalPerformanceScore == null ^ Object2.TotalPerformanceScore == null )
			{
				equal = false;
			}
			if ( Object1.TotalScore != null && Object2.TotalScore != null )
			{
				if (Object1.TotalScore != Object2.TotalScore)
					equal = false;
			}
			else if (Object1.TotalScore == null ^ Object2.TotalScore == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if (Object1.TestDate != Object2.TestDate)
				equal = false;
			if (Object1.CreateDate != Object2.CreateDate)
				equal = false;
			if ( Object1.UpdateDate != null && Object2.UpdateDate != null )
			{
				if (Object1.UpdateDate != Object2.UpdateDate)
					equal = false;
			}
			else if (Object1.UpdateDate == null ^ Object2.UpdateDate == null )
			{
				equal = false;
			}
			if (Object1.CreateUserId != Object2.CreateUserId)
				equal = false;
			if ( Object1.UpdateUserId != null && Object2.UpdateUserId != null )
			{
				if (Object1.UpdateUserId != Object2.UpdateUserId)
					equal = false;
			}
			else if (Object1.UpdateUserId == null ^ Object2.UpdateUserId == null )
			{
				equal = false;
			}
			if (Object1.Active != Object2.Active)
				equal = false;
			if (Object1.Deleted != Object2.Deleted)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((WippsiBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static WippsiComparer GetComparer()
        {
            return new WippsiComparer();
        }
        */

        // Comparer delegates back to Wippsi
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Wippsi rhs, WippsiColumn which)
        {
            switch (which)
            {
            	
            	
            	case WippsiColumn.WippsiId:
            		return this.WippsiId.CompareTo(rhs.WippsiId);
            		
            		                 
            	
            	
            	case WippsiColumn.SeanceId:
            		return this.SeanceId.Value.CompareTo(rhs.SeanceId.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.GeneralRawScore:
            		return this.GeneralRawScore.Value.CompareTo(rhs.GeneralRawScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.GeneralStandartScore:
            		return this.GeneralStandartScore.Value.CompareTo(rhs.GeneralStandartScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.SimilarityRawScore:
            		return this.SimilarityRawScore.Value.CompareTo(rhs.SimilarityRawScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.SimilarityStandartScore:
            		return this.SimilarityStandartScore.Value.CompareTo(rhs.SimilarityStandartScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.ArithmeticRawScore:
            		return this.ArithmeticRawScore.Value.CompareTo(rhs.ArithmeticRawScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.ArithmeticStandartScore:
            		return this.ArithmeticStandartScore.Value.CompareTo(rhs.ArithmeticStandartScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.WordRawScore:
            		return this.WordRawScore.Value.CompareTo(rhs.WordRawScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.WordStandartScore:
            		return this.WordStandartScore.Value.CompareTo(rhs.WordStandartScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.UnderstandingRawScore:
            		return this.UnderstandingRawScore.Value.CompareTo(rhs.UnderstandingRawScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.UnderstandingStandartScore:
            		return this.UnderstandingStandartScore.Value.CompareTo(rhs.UnderstandingStandartScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.SentencesRawScore:
            		return this.SentencesRawScore.Value.CompareTo(rhs.SentencesRawScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.SentencesStandartScore:
            		return this.SentencesStandartScore.Value.CompareTo(rhs.SentencesStandartScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.ImageDefineRawScore:
            		return this.ImageDefineRawScore.Value.CompareTo(rhs.ImageDefineRawScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.ImageDefineStandartScore:
            		return this.ImageDefineStandartScore.Value.CompareTo(rhs.ImageDefineStandartScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.AnimalHomesRawScore:
            		return this.AnimalHomesRawScore.Value.CompareTo(rhs.AnimalHomesRawScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.AnimalHomesStandartScore:
            		return this.AnimalHomesStandartScore.Value.CompareTo(rhs.AnimalHomesStandartScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.GeometricShapeRawScore:
            		return this.GeometricShapeRawScore.Value.CompareTo(rhs.GeometricShapeRawScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.GeometricShapeStandartScore:
            		return this.GeometricShapeStandartScore.Value.CompareTo(rhs.GeometricShapeStandartScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.BlocksPatternRawScore:
            		return this.BlocksPatternRawScore.Value.CompareTo(rhs.BlocksPatternRawScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.BlocksPatternStandartScore:
            		return this.BlocksPatternStandartScore.Value.CompareTo(rhs.BlocksPatternStandartScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.AnimalHomesAgainRawScore:
            		return this.AnimalHomesAgainRawScore.Value.CompareTo(rhs.AnimalHomesAgainRawScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.AnimalHomesAgainStandartScore:
            		return this.AnimalHomesAgainStandartScore.Value.CompareTo(rhs.AnimalHomesAgainStandartScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.MazesRawScore:
            		return this.MazesRawScore.Value.CompareTo(rhs.MazesRawScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.MazesStandartScore:
            		return this.MazesStandartScore.Value.CompareTo(rhs.MazesStandartScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.TotalVerbalScore:
            		return this.TotalVerbalScore.Value.CompareTo(rhs.TotalVerbalScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.TotalPerformanceScore:
            		return this.TotalPerformanceScore.Value.CompareTo(rhs.TotalPerformanceScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.TotalScore:
            		return this.TotalScore.Value.CompareTo(rhs.TotalScore.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case WippsiColumn.TestDate:
            		return this.TestDate.CompareTo(rhs.TestDate);
            		
            		                 
            	
            	
            	case WippsiColumn.CreateDate:
            		return this.CreateDate.CompareTo(rhs.CreateDate);
            		
            		                 
            	
            	
            	case WippsiColumn.UpdateDate:
            		return this.UpdateDate.Value.CompareTo(rhs.UpdateDate.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.CreateUserId:
            		return this.CreateUserId.CompareTo(rhs.CreateUserId);
            		
            		                 
            	
            	
            	case WippsiColumn.UpdateUserId:
            		return this.UpdateUserId.Value.CompareTo(rhs.UpdateUserId.Value);
            		
            		                 
            	
            	
            	case WippsiColumn.Active:
            		return this.Active.CompareTo(rhs.Active);
            		
            		                 
            	
            	
            	case WippsiColumn.Deleted:
            		return this.Deleted.CompareTo(rhs.Deleted);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<WippsiKey> Members
		
		// member variable for the EntityId property
		private WippsiKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual WippsiKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new WippsiKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Wippsi")
					.Append("|").Append( this.WippsiId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{38}{37}- WippsiId: {0}{37}- SeanceId: {1}{37}- GeneralRawScore: {2}{37}- GeneralStandartScore: {3}{37}- SimilarityRawScore: {4}{37}- SimilarityStandartScore: {5}{37}- ArithmeticRawScore: {6}{37}- ArithmeticStandartScore: {7}{37}- WordRawScore: {8}{37}- WordStandartScore: {9}{37}- UnderstandingRawScore: {10}{37}- UnderstandingStandartScore: {11}{37}- SentencesRawScore: {12}{37}- SentencesStandartScore: {13}{37}- ImageDefineRawScore: {14}{37}- ImageDefineStandartScore: {15}{37}- AnimalHomesRawScore: {16}{37}- AnimalHomesStandartScore: {17}{37}- GeometricShapeRawScore: {18}{37}- GeometricShapeStandartScore: {19}{37}- BlocksPatternRawScore: {20}{37}- BlocksPatternStandartScore: {21}{37}- AnimalHomesAgainRawScore: {22}{37}- AnimalHomesAgainStandartScore: {23}{37}- MazesRawScore: {24}{37}- MazesStandartScore: {25}{37}- TotalVerbalScore: {26}{37}- TotalPerformanceScore: {27}{37}- TotalScore: {28}{37}- Notes: {29}{37}- TestDate: {30}{37}- CreateDate: {31}{37}- UpdateDate: {32}{37}- CreateUserId: {33}{37}- UpdateUserId: {34}{37}- Active: {35}{37}- Deleted: {36}{37}{39}", 
				this.WippsiId,
				(this.SeanceId == null) ? string.Empty : this.SeanceId.ToString(),
				(this.GeneralRawScore == null) ? string.Empty : this.GeneralRawScore.ToString(),
				(this.GeneralStandartScore == null) ? string.Empty : this.GeneralStandartScore.ToString(),
				(this.SimilarityRawScore == null) ? string.Empty : this.SimilarityRawScore.ToString(),
				(this.SimilarityStandartScore == null) ? string.Empty : this.SimilarityStandartScore.ToString(),
				(this.ArithmeticRawScore == null) ? string.Empty : this.ArithmeticRawScore.ToString(),
				(this.ArithmeticStandartScore == null) ? string.Empty : this.ArithmeticStandartScore.ToString(),
				(this.WordRawScore == null) ? string.Empty : this.WordRawScore.ToString(),
				(this.WordStandartScore == null) ? string.Empty : this.WordStandartScore.ToString(),
				(this.UnderstandingRawScore == null) ? string.Empty : this.UnderstandingRawScore.ToString(),
				(this.UnderstandingStandartScore == null) ? string.Empty : this.UnderstandingStandartScore.ToString(),
				(this.SentencesRawScore == null) ? string.Empty : this.SentencesRawScore.ToString(),
				(this.SentencesStandartScore == null) ? string.Empty : this.SentencesStandartScore.ToString(),
				(this.ImageDefineRawScore == null) ? string.Empty : this.ImageDefineRawScore.ToString(),
				(this.ImageDefineStandartScore == null) ? string.Empty : this.ImageDefineStandartScore.ToString(),
				(this.AnimalHomesRawScore == null) ? string.Empty : this.AnimalHomesRawScore.ToString(),
				(this.AnimalHomesStandartScore == null) ? string.Empty : this.AnimalHomesStandartScore.ToString(),
				(this.GeometricShapeRawScore == null) ? string.Empty : this.GeometricShapeRawScore.ToString(),
				(this.GeometricShapeStandartScore == null) ? string.Empty : this.GeometricShapeStandartScore.ToString(),
				(this.BlocksPatternRawScore == null) ? string.Empty : this.BlocksPatternRawScore.ToString(),
				(this.BlocksPatternStandartScore == null) ? string.Empty : this.BlocksPatternStandartScore.ToString(),
				(this.AnimalHomesAgainRawScore == null) ? string.Empty : this.AnimalHomesAgainRawScore.ToString(),
				(this.AnimalHomesAgainStandartScore == null) ? string.Empty : this.AnimalHomesAgainStandartScore.ToString(),
				(this.MazesRawScore == null) ? string.Empty : this.MazesRawScore.ToString(),
				(this.MazesStandartScore == null) ? string.Empty : this.MazesStandartScore.ToString(),
				(this.TotalVerbalScore == null) ? string.Empty : this.TotalVerbalScore.ToString(),
				(this.TotalPerformanceScore == null) ? string.Empty : this.TotalPerformanceScore.ToString(),
				(this.TotalScore == null) ? string.Empty : this.TotalScore.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				this.TestDate,
				this.CreateDate,
				(this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString(),
				this.CreateUserId,
				(this.UpdateUserId == null) ? string.Empty : this.UpdateUserId.ToString(),
				this.Active,
				this.Deleted,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Wippsi' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	internal protected class WippsiEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// WippsiId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Wippsi"</remarks>
		[DataMember]
		public System.Int32 WippsiId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// SeanceId : 
		/// </summary>
		[DataMember]
		public System.Int32? SeanceId = null;
		
		/// <summary>
		/// GeneralRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? GeneralRawScore = null;
		
		/// <summary>
		/// GeneralStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? GeneralStandartScore = null;
		
		/// <summary>
		/// SimilarityRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? SimilarityRawScore = null;
		
		/// <summary>
		/// SimilarityStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? SimilarityStandartScore = null;
		
		/// <summary>
		/// ArithmeticRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? ArithmeticRawScore = null;
		
		/// <summary>
		/// ArithmeticStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? ArithmeticStandartScore = null;
		
		/// <summary>
		/// WordRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? WordRawScore = null;
		
		/// <summary>
		/// WordStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? WordStandartScore = null;
		
		/// <summary>
		/// UnderstandingRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? UnderstandingRawScore = null;
		
		/// <summary>
		/// UnderstandingStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? UnderstandingStandartScore = null;
		
		/// <summary>
		/// SentencesRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? SentencesRawScore = null;
		
		/// <summary>
		/// SentencesStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? SentencesStandartScore = null;
		
		/// <summary>
		/// ImageDefineRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? ImageDefineRawScore = null;
		
		/// <summary>
		/// ImageDefineStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? ImageDefineStandartScore = null;
		
		/// <summary>
		/// AnimalHomesRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? AnimalHomesRawScore = null;
		
		/// <summary>
		/// AnimalHomesStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? AnimalHomesStandartScore = null;
		
		/// <summary>
		/// GeometricShapeRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? GeometricShapeRawScore = null;
		
		/// <summary>
		/// GeometricShapeStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? GeometricShapeStandartScore = null;
		
		/// <summary>
		/// BlocksPatternRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? BlocksPatternRawScore = null;
		
		/// <summary>
		/// BlocksPatternStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? BlocksPatternStandartScore = null;
		
		/// <summary>
		/// AnimalHomesAgainRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? AnimalHomesAgainRawScore = null;
		
		/// <summary>
		/// AnimalHomesAgainStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? AnimalHomesAgainStandartScore = null;
		
		/// <summary>
		/// MazesRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? MazesRawScore = null;
		
		/// <summary>
		/// MazesStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? MazesStandartScore = null;
		
		/// <summary>
		/// TotalVerbalScore : 
		/// </summary>
		[DataMember]
		public System.Int32? TotalVerbalScore = null;
		
		/// <summary>
		/// TotalPerformanceScore : 
		/// </summary>
		[DataMember]
		public System.Int32? TotalPerformanceScore = null;
		
		/// <summary>
		/// TotalScore : 
		/// </summary>
		[DataMember]
		public System.Int32? TotalScore = null;
		
		/// <summary>
		/// Notes : 
		/// </summary>
		[DataMember]
		public System.String Notes = null;
		
		/// <summary>
		/// TestDate : 
		/// </summary>
		[DataMember]
		public System.DateTime TestDate = DateTime.MinValue;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime CreateDate = DateTime.MinValue;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime? UpdateDate = null;
		
		/// <summary>
		/// CreateUserId : 
		/// </summary>
		[DataMember]
		public System.Int32 CreateUserId = (int)0;
		
		/// <summary>
		/// UpdateUserId : 
		/// </summary>
		[DataMember]
		public System.Int32? UpdateUserId = null;
		
		/// <summary>
		/// Active : 
		/// </summary>
		[DataMember]
		public System.Boolean Active = true;
		
		/// <summary>
		/// Deleted : 
		/// </summary>
		[DataMember]
		public System.Boolean Deleted = false;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			WippsiEntityData _tmp = new WippsiEntityData();
						
			_tmp.WippsiId = this.WippsiId;
			
			_tmp.SeanceId = this.SeanceId;
			_tmp.GeneralRawScore = this.GeneralRawScore;
			_tmp.GeneralStandartScore = this.GeneralStandartScore;
			_tmp.SimilarityRawScore = this.SimilarityRawScore;
			_tmp.SimilarityStandartScore = this.SimilarityStandartScore;
			_tmp.ArithmeticRawScore = this.ArithmeticRawScore;
			_tmp.ArithmeticStandartScore = this.ArithmeticStandartScore;
			_tmp.WordRawScore = this.WordRawScore;
			_tmp.WordStandartScore = this.WordStandartScore;
			_tmp.UnderstandingRawScore = this.UnderstandingRawScore;
			_tmp.UnderstandingStandartScore = this.UnderstandingStandartScore;
			_tmp.SentencesRawScore = this.SentencesRawScore;
			_tmp.SentencesStandartScore = this.SentencesStandartScore;
			_tmp.ImageDefineRawScore = this.ImageDefineRawScore;
			_tmp.ImageDefineStandartScore = this.ImageDefineStandartScore;
			_tmp.AnimalHomesRawScore = this.AnimalHomesRawScore;
			_tmp.AnimalHomesStandartScore = this.AnimalHomesStandartScore;
			_tmp.GeometricShapeRawScore = this.GeometricShapeRawScore;
			_tmp.GeometricShapeStandartScore = this.GeometricShapeStandartScore;
			_tmp.BlocksPatternRawScore = this.BlocksPatternRawScore;
			_tmp.BlocksPatternStandartScore = this.BlocksPatternStandartScore;
			_tmp.AnimalHomesAgainRawScore = this.AnimalHomesAgainRawScore;
			_tmp.AnimalHomesAgainStandartScore = this.AnimalHomesAgainStandartScore;
			_tmp.MazesRawScore = this.MazesRawScore;
			_tmp.MazesStandartScore = this.MazesStandartScore;
			_tmp.TotalVerbalScore = this.TotalVerbalScore;
			_tmp.TotalPerformanceScore = this.TotalPerformanceScore;
			_tmp.TotalScore = this.TotalScore;
			_tmp.Notes = this.Notes;
			_tmp.TestDate = this.TestDate;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.CreateUserId = this.CreateUserId;
			_tmp.UpdateUserId = this.UpdateUserId;
			_tmp.Active = this.Active;
			_tmp.Deleted = this.Deleted;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			WippsiEntityData _tmp = new WippsiEntityData();
						
			_tmp.WippsiId = this.WippsiId;
			
			_tmp.SeanceId = this.SeanceId;
			_tmp.GeneralRawScore = this.GeneralRawScore;
			_tmp.GeneralStandartScore = this.GeneralStandartScore;
			_tmp.SimilarityRawScore = this.SimilarityRawScore;
			_tmp.SimilarityStandartScore = this.SimilarityStandartScore;
			_tmp.ArithmeticRawScore = this.ArithmeticRawScore;
			_tmp.ArithmeticStandartScore = this.ArithmeticStandartScore;
			_tmp.WordRawScore = this.WordRawScore;
			_tmp.WordStandartScore = this.WordStandartScore;
			_tmp.UnderstandingRawScore = this.UnderstandingRawScore;
			_tmp.UnderstandingStandartScore = this.UnderstandingStandartScore;
			_tmp.SentencesRawScore = this.SentencesRawScore;
			_tmp.SentencesStandartScore = this.SentencesStandartScore;
			_tmp.ImageDefineRawScore = this.ImageDefineRawScore;
			_tmp.ImageDefineStandartScore = this.ImageDefineStandartScore;
			_tmp.AnimalHomesRawScore = this.AnimalHomesRawScore;
			_tmp.AnimalHomesStandartScore = this.AnimalHomesStandartScore;
			_tmp.GeometricShapeRawScore = this.GeometricShapeRawScore;
			_tmp.GeometricShapeStandartScore = this.GeometricShapeStandartScore;
			_tmp.BlocksPatternRawScore = this.BlocksPatternRawScore;
			_tmp.BlocksPatternStandartScore = this.BlocksPatternStandartScore;
			_tmp.AnimalHomesAgainRawScore = this.AnimalHomesAgainRawScore;
			_tmp.AnimalHomesAgainStandartScore = this.AnimalHomesAgainStandartScore;
			_tmp.MazesRawScore = this.MazesRawScore;
			_tmp.MazesStandartScore = this.MazesStandartScore;
			_tmp.TotalVerbalScore = this.TotalVerbalScore;
			_tmp.TotalPerformanceScore = this.TotalPerformanceScore;
			_tmp.TotalScore = this.TotalScore;
			_tmp.Notes = this.Notes;
			_tmp.TestDate = this.TestDate;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.CreateUserId = this.CreateUserId;
			_tmp.UpdateUserId = this.UpdateUserId;
			_tmp.Active = this.Active;
			_tmp.Deleted = this.Deleted;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		[DataMember]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new WippsiEntityData();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WippsiColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(WippsiColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WippsiColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(WippsiColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WippsiColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(WippsiColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				WippsiEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new WippsiEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WippsiColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(WippsiColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				WippsiEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new WippsiEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region WippsiEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Wippsi"/> object.
	/// </remarks>
	public class WippsiEventArgs : System.EventArgs
	{
		private WippsiColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the WippsiEventArgs class.
		///</summary>
		public WippsiEventArgs(WippsiColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the WippsiEventArgs class.
		///</summary>
		public WippsiEventArgs(WippsiColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The WippsiColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="WippsiColumn" />
		public WippsiColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Wippsi related events.
	///</summary>
	public delegate void WippsiEventHandler(object sender, WippsiEventArgs e);
	
	#region WippsiComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class WippsiComparer : System.Collections.Generic.IComparer<Wippsi>
	{
		WippsiColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:WippsiComparer"/> class.
        /// </summary>
		public WippsiComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:WippsiComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public WippsiComparer(WippsiColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Wippsi"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Wippsi"/> to compare.</param>
        /// <param name="b">The second <c>Wippsi</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Wippsi a, Wippsi b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Wippsi entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Wippsi a, Wippsi b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public WippsiColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region WippsiKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Wippsi"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class WippsiKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the WippsiKey class.
		/// </summary>
		public WippsiKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the WippsiKey class.
		/// </summary>
		public WippsiKey(WippsiBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.WippsiId = entity.WippsiId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the WippsiKey class.
		/// </summary>
		public WippsiKey(System.Int32 _wippsiId)
		{
			#region Init Properties

			this.WippsiId = _wippsiId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private WippsiBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public WippsiBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the WippsiId property
		private System.Int32 _wippsiId;
		
		/// <summary>
		/// Gets or sets the WippsiId property.
		/// </summary>
		public System.Int32 WippsiId
		{
			get { return _wippsiId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.WippsiId = value;
				
				_wippsiId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				WippsiId = ( values["WippsiId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["WippsiId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("WippsiId", WippsiId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("WippsiId: {0}{1}",
								WippsiId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region WippsiColumn Enum
	
	/// <summary>
	/// Enumerate the Wippsi columns.
	/// </summary>
	[Serializable]
	public enum WippsiColumn : int
	{
		/// <summary>
		/// WippsiId : 
		/// </summary>
		[EnumTextValue("Wippsi Id")]
		[ColumnEnum("WippsiId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		WippsiId = 1,
		/// <summary>
		/// SeanceId : 
		/// </summary>
		[EnumTextValue("Seance Id")]
		[ColumnEnum("SeanceId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SeanceId = 2,
		/// <summary>
		/// GeneralRawScore : 
		/// </summary>
		[EnumTextValue("General Raw Score")]
		[ColumnEnum("GeneralRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GeneralRawScore = 3,
		/// <summary>
		/// GeneralStandartScore : 
		/// </summary>
		[EnumTextValue("General Standart Score")]
		[ColumnEnum("GeneralStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GeneralStandartScore = 4,
		/// <summary>
		/// SimilarityRawScore : 
		/// </summary>
		[EnumTextValue("Similarity Raw Score")]
		[ColumnEnum("SimilarityRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SimilarityRawScore = 5,
		/// <summary>
		/// SimilarityStandartScore : 
		/// </summary>
		[EnumTextValue("Similarity Standart Score")]
		[ColumnEnum("SimilarityStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SimilarityStandartScore = 6,
		/// <summary>
		/// ArithmeticRawScore : 
		/// </summary>
		[EnumTextValue("Arithmetic Raw Score")]
		[ColumnEnum("ArithmeticRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ArithmeticRawScore = 7,
		/// <summary>
		/// ArithmeticStandartScore : 
		/// </summary>
		[EnumTextValue("Arithmetic Standart Score")]
		[ColumnEnum("ArithmeticStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ArithmeticStandartScore = 8,
		/// <summary>
		/// WordRawScore : 
		/// </summary>
		[EnumTextValue("Word Raw Score")]
		[ColumnEnum("WordRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WordRawScore = 9,
		/// <summary>
		/// WordStandartScore : 
		/// </summary>
		[EnumTextValue("Word Standart Score")]
		[ColumnEnum("WordStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WordStandartScore = 10,
		/// <summary>
		/// UnderstandingRawScore : 
		/// </summary>
		[EnumTextValue("Understanding Raw Score")]
		[ColumnEnum("UnderstandingRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UnderstandingRawScore = 11,
		/// <summary>
		/// UnderstandingStandartScore : 
		/// </summary>
		[EnumTextValue("Understanding Standart Score")]
		[ColumnEnum("UnderstandingStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UnderstandingStandartScore = 12,
		/// <summary>
		/// SentencesRawScore : 
		/// </summary>
		[EnumTextValue("Sentences Raw Score")]
		[ColumnEnum("SentencesRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SentencesRawScore = 13,
		/// <summary>
		/// SentencesStandartScore : 
		/// </summary>
		[EnumTextValue("Sentences Standart Score")]
		[ColumnEnum("SentencesStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SentencesStandartScore = 14,
		/// <summary>
		/// ImageDefineRawScore : 
		/// </summary>
		[EnumTextValue("Image Define Raw Score")]
		[ColumnEnum("ImageDefineRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ImageDefineRawScore = 15,
		/// <summary>
		/// ImageDefineStandartScore : 
		/// </summary>
		[EnumTextValue("Image Define Standart Score")]
		[ColumnEnum("ImageDefineStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ImageDefineStandartScore = 16,
		/// <summary>
		/// AnimalHomesRawScore : 
		/// </summary>
		[EnumTextValue("Animal Homes Raw Score")]
		[ColumnEnum("AnimalHomesRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AnimalHomesRawScore = 17,
		/// <summary>
		/// AnimalHomesStandartScore : 
		/// </summary>
		[EnumTextValue("Animal Homes Standart Score")]
		[ColumnEnum("AnimalHomesStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AnimalHomesStandartScore = 18,
		/// <summary>
		/// GeometricShapeRawScore : 
		/// </summary>
		[EnumTextValue("Geometric Shape Raw Score")]
		[ColumnEnum("GeometricShapeRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GeometricShapeRawScore = 19,
		/// <summary>
		/// GeometricShapeStandartScore : 
		/// </summary>
		[EnumTextValue("Geometric Shape Standart Score")]
		[ColumnEnum("GeometricShapeStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GeometricShapeStandartScore = 20,
		/// <summary>
		/// BlocksPatternRawScore : 
		/// </summary>
		[EnumTextValue("Blocks Pattern Raw Score")]
		[ColumnEnum("BlocksPatternRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		BlocksPatternRawScore = 21,
		/// <summary>
		/// BlocksPatternStandartScore : 
		/// </summary>
		[EnumTextValue("Blocks Pattern Standart Score")]
		[ColumnEnum("BlocksPatternStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		BlocksPatternStandartScore = 22,
		/// <summary>
		/// AnimalHomesAgainRawScore : 
		/// </summary>
		[EnumTextValue("Animal Homes Again Raw Score")]
		[ColumnEnum("AnimalHomesAgainRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AnimalHomesAgainRawScore = 23,
		/// <summary>
		/// AnimalHomesAgainStandartScore : 
		/// </summary>
		[EnumTextValue("Animal Homes Again Standart Score")]
		[ColumnEnum("AnimalHomesAgainStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AnimalHomesAgainStandartScore = 24,
		/// <summary>
		/// MazesRawScore : 
		/// </summary>
		[EnumTextValue("Mazes Raw Score")]
		[ColumnEnum("MazesRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MazesRawScore = 25,
		/// <summary>
		/// MazesStandartScore : 
		/// </summary>
		[EnumTextValue("Mazes Standart Score")]
		[ColumnEnum("MazesStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MazesStandartScore = 26,
		/// <summary>
		/// TotalVerbalScore : 
		/// </summary>
		[EnumTextValue("Total Verbal Score")]
		[ColumnEnum("TotalVerbalScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotalVerbalScore = 27,
		/// <summary>
		/// TotalPerformanceScore : 
		/// </summary>
		[EnumTextValue("Total Performance Score")]
		[ColumnEnum("TotalPerformanceScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotalPerformanceScore = 28,
		/// <summary>
		/// TotalScore : 
		/// </summary>
		[EnumTextValue("Total Score")]
		[ColumnEnum("TotalScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotalScore = 29,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("Notes")]
		[ColumnEnum("Notes", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Notes = 30,
		/// <summary>
		/// TestDate : 
		/// </summary>
		[EnumTextValue("Test Date")]
		[ColumnEnum("TestDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		TestDate = 31,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("Create Date")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDate = 32,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("Update Date")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateDate = 33,
		/// <summary>
		/// CreateUserId : 
		/// </summary>
		[EnumTextValue("Create User Id")]
		[ColumnEnum("CreateUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CreateUserId = 34,
		/// <summary>
		/// UpdateUserId : 
		/// </summary>
		[EnumTextValue("Update User Id")]
		[ColumnEnum("UpdateUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UpdateUserId = 35,
		/// <summary>
		/// Active : 
		/// </summary>
		[EnumTextValue("Active")]
		[ColumnEnum("Active", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Active = 36,
		/// <summary>
		/// Deleted : 
		/// </summary>
		[EnumTextValue("Deleted")]
		[ColumnEnum("Deleted", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Deleted = 37
	}//End enum

	#endregion WippsiColumn Enum

} // end namespace
