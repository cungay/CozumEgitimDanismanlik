
/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 5 Şubat 2019 Salı
	Important: Do not modify this file. Edit the file School.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Ekip.Framework.Entities.Validation;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'School' table. [No description found the database]	
	///</summary>
	[DataContract]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SchoolBase : EntityBase, ISchool, IEntityId<SchoolKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		[DataMember]
		private SchoolEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		[DataMember]
		private SchoolEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SchoolEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		private TList<School> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		public event SchoolEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		public event SchoolEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SchoolBase"/> instance.
		///</summary>
		public SchoolBase()
		{
			this.entityData = new SchoolEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SchoolBase"/> instance.
		///</summary>
		///<param name="_schoolName"></param>
		///<param name="_corparationTypeId"></param>
		///<param name="_schoolTypeId"></param>
		///<param name="_provinceId"></param>
		///<param name="_townId"></param>
		///<param name="_address"></param>
		///<param name="_phone"></param>
		///<param name="_fax"></param>
		///<param name="_webAddress"></param>
		///<param name="_notes"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_createUserId"></param>
		///<param name="_updateUserId"></param>
		///<param name="_active"></param>
		///<param name="_deleted"></param>
		public SchoolBase(System.String _schoolName, System.Byte _corparationTypeId, System.Byte _schoolTypeId, 
			System.Int32? _provinceId, System.Int32? _townId, System.String _address, System.String _phone, System.String _fax, 
			System.String _webAddress, System.String _notes, System.DateTime _createDate, System.DateTime? _updateDate, 
			System.Int32 _createUserId, System.Int32? _updateUserId, System.Boolean _active, System.Boolean _deleted)
		{
			this.entityData = new SchoolEntityData();
			this.backupData = null;

			this.SchoolName = _schoolName;
			this.CorparationTypeId = _corparationTypeId;
			this.SchoolTypeId = _schoolTypeId;
			this.ProvinceId = _provinceId;
			this.TownId = _townId;
			this.Address = _address;
			this.Phone = _phone;
			this.Fax = _fax;
			this.WebAddress = _webAddress;
			this.Notes = _notes;
			this.CreateDate = _createDate;
			this.UpdateDate = _updateDate;
			this.CreateUserId = _createUserId;
			this.UpdateUserId = _updateUserId;
			this.Active = _active;
			this.Deleted = _deleted;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="School"/> instance.
		///</summary>
		///<param name="_schoolName"></param>
		///<param name="_corparationTypeId"></param>
		///<param name="_schoolTypeId"></param>
		///<param name="_provinceId"></param>
		///<param name="_townId"></param>
		///<param name="_address"></param>
		///<param name="_phone"></param>
		///<param name="_fax"></param>
		///<param name="_webAddress"></param>
		///<param name="_notes"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_createUserId"></param>
		///<param name="_updateUserId"></param>
		///<param name="_active"></param>
		///<param name="_deleted"></param>
		public static School CreateSchool(System.String _schoolName, System.Byte _corparationTypeId, System.Byte _schoolTypeId, 
			System.Int32? _provinceId, System.Int32? _townId, System.String _address, System.String _phone, System.String _fax, 
			System.String _webAddress, System.String _notes, System.DateTime _createDate, System.DateTime? _updateDate, 
			System.Int32 _createUserId, System.Int32? _updateUserId, System.Boolean _active, System.Boolean _deleted)
		{
			School newSchool = new School();
			newSchool.SchoolName = _schoolName;
			newSchool.CorparationTypeId = _corparationTypeId;
			newSchool.SchoolTypeId = _schoolTypeId;
			newSchool.ProvinceId = _provinceId;
			newSchool.TownId = _townId;
			newSchool.Address = _address;
			newSchool.Phone = _phone;
			newSchool.Fax = _fax;
			newSchool.WebAddress = _webAddress;
			newSchool.Notes = _notes;
			newSchool.CreateDate = _createDate;
			newSchool.UpdateDate = _updateDate;
			newSchool.CreateUserId = _createUserId;
			newSchool.UpdateUserId = _updateUserId;
			newSchool.Active = _active;
			newSchool.Deleted = _deleted;
			return newSchool;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SchoolId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 SchoolId
		{
			get
			{
				return this.entityData.SchoolId; 
			}
			
			set
			{
				if (this.entityData.SchoolId == value)
					return;
				
                OnPropertyChanging("SchoolId");                    
				OnColumnChanging(SchoolColumn.SchoolId, this.entityData.SchoolId);
				this.entityData.SchoolId = value;
				this.EntityId.SchoolId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.SchoolId, this.entityData.SchoolId);
				OnPropertyChanged("SchoolId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SchoolName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String SchoolName
		{
			get
			{
				return this.entityData.SchoolName; 
			}
			
			set
			{
				if (this.entityData.SchoolName == value)
					return;
				
                OnPropertyChanging("SchoolName");                    
				OnColumnChanging(SchoolColumn.SchoolName, this.entityData.SchoolName);
				this.entityData.SchoolName = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.SchoolName, this.entityData.SchoolName);
				OnPropertyChanged("SchoolName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CorparationTypeId property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte CorparationTypeId
		{
			get
			{
				return this.entityData.CorparationTypeId; 
			}
			
			set
			{
				if (this.entityData.CorparationTypeId == value)
					return;
				
                OnPropertyChanging("CorparationTypeId");                    
				OnColumnChanging(SchoolColumn.CorparationTypeId, this.entityData.CorparationTypeId);
				this.entityData.CorparationTypeId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.CorparationTypeId, this.entityData.CorparationTypeId);
				OnPropertyChanged("CorparationTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SchoolTypeId property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte SchoolTypeId
		{
			get
			{
				return this.entityData.SchoolTypeId; 
			}
			
			set
			{
				if (this.entityData.SchoolTypeId == value)
					return;
				
                OnPropertyChanging("SchoolTypeId");                    
				OnColumnChanging(SchoolColumn.SchoolTypeId, this.entityData.SchoolTypeId);
				this.entityData.SchoolTypeId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.SchoolTypeId, this.entityData.SchoolTypeId);
				OnPropertyChanged("SchoolTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProvinceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProvinceId
		{
			get
			{
				return this.entityData.ProvinceId; 
			}
			
			set
			{
				if (this.entityData.ProvinceId == value)
					return;
				
                OnPropertyChanging("ProvinceId");                    
				OnColumnChanging(SchoolColumn.ProvinceId, this.entityData.ProvinceId);
				this.entityData.ProvinceId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.ProvinceId, this.entityData.ProvinceId);
				OnPropertyChanged("ProvinceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TownId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TownId
		{
			get
			{
				return this.entityData.TownId; 
			}
			
			set
			{
				if (this.entityData.TownId == value)
					return;
				
                OnPropertyChanging("TownId");                    
				OnColumnChanging(SchoolColumn.TownId, this.entityData.TownId);
				this.entityData.TownId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.TownId, this.entityData.TownId);
				OnPropertyChanged("TownId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
				
                OnPropertyChanging("Address");                    
				OnColumnChanging(SchoolColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
				
                OnPropertyChanging("Phone");                    
				OnColumnChanging(SchoolColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fax property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Fax
		{
			get
			{
				return this.entityData.Fax; 
			}
			
			set
			{
				if (this.entityData.Fax == value)
					return;
				
                OnPropertyChanging("Fax");                    
				OnColumnChanging(SchoolColumn.Fax, this.entityData.Fax);
				this.entityData.Fax = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.Fax, this.entityData.Fax);
				OnPropertyChanged("Fax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WebAddress property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String WebAddress
		{
			get
			{
				return this.entityData.WebAddress; 
			}
			
			set
			{
				if (this.entityData.WebAddress == value)
					return;
				
                OnPropertyChanging("WebAddress");                    
				OnColumnChanging(SchoolColumn.WebAddress, this.entityData.WebAddress);
				this.entityData.WebAddress = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.WebAddress, this.entityData.WebAddress);
				OnPropertyChanged("WebAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
				
                OnPropertyChanging("Notes");                    
				OnColumnChanging(SchoolColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
				
                OnPropertyChanging("CreateDate");                    
				OnColumnChanging(SchoolColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
				
                OnPropertyChanging("UpdateDate");                    
				OnColumnChanging(SchoolColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CreateUserId
		{
			get
			{
				return this.entityData.CreateUserId; 
			}
			
			set
			{
				if (this.entityData.CreateUserId == value)
					return;
				
                OnPropertyChanging("CreateUserId");                    
				OnColumnChanging(SchoolColumn.CreateUserId, this.entityData.CreateUserId);
				this.entityData.CreateUserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.CreateUserId, this.entityData.CreateUserId);
				OnPropertyChanged("CreateUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UpdateUserId
		{
			get
			{
				return this.entityData.UpdateUserId; 
			}
			
			set
			{
				if (this.entityData.UpdateUserId == value)
					return;
				
                OnPropertyChanging("UpdateUserId");                    
				OnColumnChanging(SchoolColumn.UpdateUserId, this.entityData.UpdateUserId);
				this.entityData.UpdateUserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.UpdateUserId, this.entityData.UpdateUserId);
				OnPropertyChanged("UpdateUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Active property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Active
		{
			get
			{
				return this.entityData.Active; 
			}
			
			set
			{
				if (this.entityData.Active == value)
					return;
				
                OnPropertyChanging("Active");                    
				OnColumnChanging(SchoolColumn.Active, this.entityData.Active);
				this.entityData.Active = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.Active, this.entityData.Active);
				OnPropertyChanged("Active");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Deleted property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Deleted
		{
			get
			{
				return this.entityData.Deleted; 
			}
			
			set
			{
				if (this.entityData.Deleted == value)
					return;
				
                OnPropertyChanging("Deleted");                    
				OnColumnChanging(SchoolColumn.Deleted, this.entityData.Deleted);
				this.entityData.Deleted = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SchoolColumn.Deleted, this.entityData.Deleted);
				OnPropertyChanged("Deleted");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Teacher objects
		///	which are related to this object through the relation FK_Teacher_School
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Teacher> TeacherCollection
		{
			get { return entityData.TeacherCollection; }
			set { entityData.TeacherCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ClientEducation objects
		///	which are related to this object through the relation FK_ClientEducation_School
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ClientEducation> ClientEducationCollection
		{
			get { return entityData.ClientEducationCollection; }
			set { entityData.ClientEducationCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SchoolName", "School Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SchoolName", "School Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address", "Address", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phone", "Phone", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Fax", "Fax", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WebAddress", "Web Address", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "School"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SchoolId", "SchoolName", "CorparationTypeId", "SchoolTypeId", "ProvinceId", "TownId", "Address", "Phone", "Fax", "WebAddress", "Notes", "CreateDate", "UpdateDate", "CreateUserId", "UpdateUserId", "Active", "Deleted"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SchoolEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (School) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<School>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as School);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed School Entity 
		///</summary>
		protected virtual School Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			School copy = new School();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SchoolId = this.SchoolId;
				copy.SchoolName = this.SchoolName;
				copy.CorparationTypeId = this.CorparationTypeId;
				copy.SchoolTypeId = this.SchoolTypeId;
				copy.ProvinceId = this.ProvinceId;
				copy.TownId = this.TownId;
				copy.Address = this.Address;
				copy.Phone = this.Phone;
				copy.Fax = this.Fax;
				copy.WebAddress = this.WebAddress;
				copy.Notes = this.Notes;
				copy.CreateDate = this.CreateDate;
				copy.UpdateDate = this.UpdateDate;
				copy.CreateUserId = this.CreateUserId;
				copy.UpdateUserId = this.UpdateUserId;
				copy.Active = this.Active;
				copy.Deleted = this.Deleted;
			
		
			//deep copy nested objects
			copy.TeacherCollection = (TList<Teacher>) MakeCopyOf(this.TeacherCollection, existingCopies); 
			copy.ClientEducationCollection = (TList<ClientEducation>) MakeCopyOf(this.ClientEducationCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed School Entity 
		///</summary>
		public virtual School Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed School Entity which is a deep copy of the current entity.
		///</summary>
		public virtual School DeepCopy()
		{
			return EntityHelper.Clone<School>(this as School);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SchoolEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SchoolEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SchoolEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SchoolColumn column)
		{
			switch(column)
			{
					case SchoolColumn.SchoolId:
					return entityData.SchoolId != _originalData.SchoolId;
					case SchoolColumn.SchoolName:
					return entityData.SchoolName != _originalData.SchoolName;
					case SchoolColumn.CorparationTypeId:
					return entityData.CorparationTypeId != _originalData.CorparationTypeId;
					case SchoolColumn.SchoolTypeId:
					return entityData.SchoolTypeId != _originalData.SchoolTypeId;
					case SchoolColumn.ProvinceId:
					return entityData.ProvinceId != _originalData.ProvinceId;
					case SchoolColumn.TownId:
					return entityData.TownId != _originalData.TownId;
					case SchoolColumn.Address:
					return entityData.Address != _originalData.Address;
					case SchoolColumn.Phone:
					return entityData.Phone != _originalData.Phone;
					case SchoolColumn.Fax:
					return entityData.Fax != _originalData.Fax;
					case SchoolColumn.WebAddress:
					return entityData.WebAddress != _originalData.WebAddress;
					case SchoolColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case SchoolColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case SchoolColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
					case SchoolColumn.CreateUserId:
					return entityData.CreateUserId != _originalData.CreateUserId;
					case SchoolColumn.UpdateUserId:
					return entityData.UpdateUserId != _originalData.UpdateUserId;
					case SchoolColumn.Active:
					return entityData.Active != _originalData.Active;
					case SchoolColumn.Deleted:
					return entityData.Deleted != _originalData.Deleted;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SchoolColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SchoolId != _originalData.SchoolId;
			result = result || entityData.SchoolName != _originalData.SchoolName;
			result = result || entityData.CorparationTypeId != _originalData.CorparationTypeId;
			result = result || entityData.SchoolTypeId != _originalData.SchoolTypeId;
			result = result || entityData.ProvinceId != _originalData.ProvinceId;
			result = result || entityData.TownId != _originalData.TownId;
			result = result || entityData.Address != _originalData.Address;
			result = result || entityData.Phone != _originalData.Phone;
			result = result || entityData.Fax != _originalData.Fax;
			result = result || entityData.WebAddress != _originalData.WebAddress;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			result = result || entityData.CreateUserId != _originalData.CreateUserId;
			result = result || entityData.UpdateUserId != _originalData.UpdateUserId;
			result = result || entityData.Active != _originalData.Active;
			result = result || entityData.Deleted != _originalData.Deleted;
			return result;
		}	
		
		///<summary>
		///  Returns a School Entity with the original data.
		///</summary>
		public School GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSchool(
				_originalData.SchoolName,
				_originalData.CorparationTypeId,
				_originalData.SchoolTypeId,
				_originalData.ProvinceId,
				_originalData.TownId,
				_originalData.Address,
				_originalData.Phone,
				_originalData.Fax,
				_originalData.WebAddress,
				_originalData.Notes,
				_originalData.CreateDate,
				_originalData.UpdateDate,
				_originalData.CreateUserId,
				_originalData.UpdateUserId,
				_originalData.Active,
				_originalData.Deleted
				);
				
			return (School)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SchoolBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SchoolBase)
				return ValueEquals(this, (SchoolBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SchoolBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SchoolId.GetHashCode() ^ 
					this.SchoolName.GetHashCode() ^ 
					this.CorparationTypeId.GetHashCode() ^ 
					this.SchoolTypeId.GetHashCode() ^ 
					((this.ProvinceId == null) ? string.Empty : this.ProvinceId.ToString()).GetHashCode() ^ 
					((this.TownId == null) ? string.Empty : this.TownId.ToString()).GetHashCode() ^ 
					((this.Address == null) ? string.Empty : this.Address.ToString()).GetHashCode() ^ 
					((this.Phone == null) ? string.Empty : this.Phone.ToString()).GetHashCode() ^ 
					((this.Fax == null) ? string.Empty : this.Fax.ToString()).GetHashCode() ^ 
					((this.WebAddress == null) ? string.Empty : this.WebAddress.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					this.CreateDate.GetHashCode() ^ 
					((this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString()).GetHashCode() ^ 
					this.CreateUserId.GetHashCode() ^ 
					((this.UpdateUserId == null) ? string.Empty : this.UpdateUserId.ToString()).GetHashCode() ^ 
					this.Active.GetHashCode() ^ 
					this.Deleted.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SchoolBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SchoolBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SchoolBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SchoolBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SchoolBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SchoolBase Object1, SchoolBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SchoolId != Object2.SchoolId)
				equal = false;
			if (Object1.SchoolName != Object2.SchoolName)
				equal = false;
			if (Object1.CorparationTypeId != Object2.CorparationTypeId)
				equal = false;
			if (Object1.SchoolTypeId != Object2.SchoolTypeId)
				equal = false;
			if ( Object1.ProvinceId != null && Object2.ProvinceId != null )
			{
				if (Object1.ProvinceId != Object2.ProvinceId)
					equal = false;
			}
			else if (Object1.ProvinceId == null ^ Object2.ProvinceId == null )
			{
				equal = false;
			}
			if ( Object1.TownId != null && Object2.TownId != null )
			{
				if (Object1.TownId != Object2.TownId)
					equal = false;
			}
			else if (Object1.TownId == null ^ Object2.TownId == null )
			{
				equal = false;
			}
			if ( Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object2.Address == null )
			{
				equal = false;
			}
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
			if ( Object1.Fax != null && Object2.Fax != null )
			{
				if (Object1.Fax != Object2.Fax)
					equal = false;
			}
			else if (Object1.Fax == null ^ Object2.Fax == null )
			{
				equal = false;
			}
			if ( Object1.WebAddress != null && Object2.WebAddress != null )
			{
				if (Object1.WebAddress != Object2.WebAddress)
					equal = false;
			}
			else if (Object1.WebAddress == null ^ Object2.WebAddress == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if (Object1.CreateDate != Object2.CreateDate)
				equal = false;
			if ( Object1.UpdateDate != null && Object2.UpdateDate != null )
			{
				if (Object1.UpdateDate != Object2.UpdateDate)
					equal = false;
			}
			else if (Object1.UpdateDate == null ^ Object2.UpdateDate == null )
			{
				equal = false;
			}
			if (Object1.CreateUserId != Object2.CreateUserId)
				equal = false;
			if ( Object1.UpdateUserId != null && Object2.UpdateUserId != null )
			{
				if (Object1.UpdateUserId != Object2.UpdateUserId)
					equal = false;
			}
			else if (Object1.UpdateUserId == null ^ Object2.UpdateUserId == null )
			{
				equal = false;
			}
			if (Object1.Active != Object2.Active)
				equal = false;
			if (Object1.Deleted != Object2.Deleted)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SchoolBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SchoolComparer GetComparer()
        {
            return new SchoolComparer();
        }
        */

        // Comparer delegates back to School
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(School rhs, SchoolColumn which)
        {
            switch (which)
            {
            	
            	
            	case SchoolColumn.SchoolId:
            		return this.SchoolId.CompareTo(rhs.SchoolId);
            		
            		                 
            	
            	
            	case SchoolColumn.SchoolName:
            		return this.SchoolName.CompareTo(rhs.SchoolName);
            		
            		                 
            	
            	
            	case SchoolColumn.CorparationTypeId:
            		return this.CorparationTypeId.CompareTo(rhs.CorparationTypeId);
            		
            		                 
            	
            	
            	case SchoolColumn.SchoolTypeId:
            		return this.SchoolTypeId.CompareTo(rhs.SchoolTypeId);
            		
            		                 
            	
            	
            	case SchoolColumn.ProvinceId:
            		return this.ProvinceId.Value.CompareTo(rhs.ProvinceId.Value);
            		
            		                 
            	
            	
            	case SchoolColumn.TownId:
            		return this.TownId.Value.CompareTo(rhs.TownId.Value);
            		
            		                 
            	
            	
            	case SchoolColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case SchoolColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            	
            	
            	case SchoolColumn.Fax:
            		return this.Fax.CompareTo(rhs.Fax);
            		
            		                 
            	
            	
            	case SchoolColumn.WebAddress:
            		return this.WebAddress.CompareTo(rhs.WebAddress);
            		
            		                 
            	
            	
            	case SchoolColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case SchoolColumn.CreateDate:
            		return this.CreateDate.CompareTo(rhs.CreateDate);
            		
            		                 
            	
            	
            	case SchoolColumn.UpdateDate:
            		return this.UpdateDate.Value.CompareTo(rhs.UpdateDate.Value);
            		
            		                 
            	
            	
            	case SchoolColumn.CreateUserId:
            		return this.CreateUserId.CompareTo(rhs.CreateUserId);
            		
            		                 
            	
            	
            	case SchoolColumn.UpdateUserId:
            		return this.UpdateUserId.Value.CompareTo(rhs.UpdateUserId.Value);
            		
            		                 
            	
            	
            	case SchoolColumn.Active:
            		return this.Active.CompareTo(rhs.Active);
            		
            		                 
            	
            	
            	case SchoolColumn.Deleted:
            		return this.Deleted.CompareTo(rhs.Deleted);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SchoolKey> Members
		
		// member variable for the EntityId property
		private SchoolKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SchoolKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SchoolKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("School")
					.Append("|").Append( this.SchoolId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- SchoolId: {0}{17}- SchoolName: {1}{17}- CorparationTypeId: {2}{17}- SchoolTypeId: {3}{17}- ProvinceId: {4}{17}- TownId: {5}{17}- Address: {6}{17}- Phone: {7}{17}- Fax: {8}{17}- WebAddress: {9}{17}- Notes: {10}{17}- CreateDate: {11}{17}- UpdateDate: {12}{17}- CreateUserId: {13}{17}- UpdateUserId: {14}{17}- Active: {15}{17}- Deleted: {16}{17}{19}", 
				this.SchoolId,
				this.SchoolName,
				this.CorparationTypeId,
				this.SchoolTypeId,
				(this.ProvinceId == null) ? string.Empty : this.ProvinceId.ToString(),
				(this.TownId == null) ? string.Empty : this.TownId.ToString(),
				(this.Address == null) ? string.Empty : this.Address.ToString(),
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				(this.Fax == null) ? string.Empty : this.Fax.ToString(),
				(this.WebAddress == null) ? string.Empty : this.WebAddress.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				this.CreateDate,
				(this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString(),
				this.CreateUserId,
				(this.UpdateUserId == null) ? string.Empty : this.UpdateUserId.ToString(),
				this.Active,
				this.Deleted,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'School' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	internal protected class SchoolEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SchoolId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "School"</remarks>
		[DataMember]
		public System.Int32 SchoolId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// SchoolName : 
		/// </summary>
		[DataMember]
		public System.String SchoolName = string.Empty;
		
		/// <summary>
		/// CorparationTypeId : 
		/// </summary>
		[DataMember]
		public System.Byte CorparationTypeId = (byte)0;
		
		/// <summary>
		/// SchoolTypeId : 
		/// </summary>
		[DataMember]
		public System.Byte SchoolTypeId = (byte)0;
		
		/// <summary>
		/// ProvinceId : 
		/// </summary>
		[DataMember]
		public System.Int32? ProvinceId = null;
		
		/// <summary>
		/// TownId : 
		/// </summary>
		[DataMember]
		public System.Int32? TownId = null;
		
		/// <summary>
		/// Address : 
		/// </summary>
		[DataMember]
		public System.String Address = null;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		[DataMember]
		public System.String Phone = null;
		
		/// <summary>
		/// Fax : 
		/// </summary>
		[DataMember]
		public System.String Fax = null;
		
		/// <summary>
		/// WebAddress : 
		/// </summary>
		[DataMember]
		public System.String WebAddress = null;
		
		/// <summary>
		/// Notes : 
		/// </summary>
		[DataMember]
		public System.String Notes = null;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime CreateDate = DateTime.Now;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime? UpdateDate = null;
		
		/// <summary>
		/// CreateUserId : 
		/// </summary>
		[DataMember]
		public System.Int32 CreateUserId = (int)0;
		
		/// <summary>
		/// UpdateUserId : 
		/// </summary>
		[DataMember]
		public System.Int32? UpdateUserId = null;
		
		/// <summary>
		/// Active : 
		/// </summary>
		[DataMember]
		public System.Boolean Active = true;
		
		/// <summary>
		/// Deleted : 
		/// </summary>
		[DataMember]
		public System.Boolean Deleted = false;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region TeacherCollection
		
		private TList<Teacher> _teacherSchoolId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _teacherSchoolId
		/// </summary>
		[DataMember]
		public TList<Teacher> TeacherCollection
		{
			get
			{
				if (_teacherSchoolId == null)
				{
				_teacherSchoolId = new TList<Teacher>();
				}
	
				return _teacherSchoolId;
			}
			set { _teacherSchoolId = value; }
		}
		
		#endregion

		#region ClientEducationCollection
		
		private TList<ClientEducation> _clientEducationSchoolId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _clientEducationSchoolId
		/// </summary>
		[DataMember]
		public TList<ClientEducation> ClientEducationCollection
		{
			get
			{
				if (_clientEducationSchoolId == null)
				{
				_clientEducationSchoolId = new TList<ClientEducation>();
				}
	
				return _clientEducationSchoolId;
			}
			set { _clientEducationSchoolId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SchoolEntityData _tmp = new SchoolEntityData();
						
			_tmp.SchoolId = this.SchoolId;
			
			_tmp.SchoolName = this.SchoolName;
			_tmp.CorparationTypeId = this.CorparationTypeId;
			_tmp.SchoolTypeId = this.SchoolTypeId;
			_tmp.ProvinceId = this.ProvinceId;
			_tmp.TownId = this.TownId;
			_tmp.Address = this.Address;
			_tmp.Phone = this.Phone;
			_tmp.Fax = this.Fax;
			_tmp.WebAddress = this.WebAddress;
			_tmp.Notes = this.Notes;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.CreateUserId = this.CreateUserId;
			_tmp.UpdateUserId = this.UpdateUserId;
			_tmp.Active = this.Active;
			_tmp.Deleted = this.Deleted;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._teacherSchoolId != null)
				_tmp.TeacherCollection = (TList<Teacher>) MakeCopyOf(this.TeacherCollection); 
			if (this._clientEducationSchoolId != null)
				_tmp.ClientEducationCollection = (TList<ClientEducation>) MakeCopyOf(this.ClientEducationCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SchoolEntityData _tmp = new SchoolEntityData();
						
			_tmp.SchoolId = this.SchoolId;
			
			_tmp.SchoolName = this.SchoolName;
			_tmp.CorparationTypeId = this.CorparationTypeId;
			_tmp.SchoolTypeId = this.SchoolTypeId;
			_tmp.ProvinceId = this.ProvinceId;
			_tmp.TownId = this.TownId;
			_tmp.Address = this.Address;
			_tmp.Phone = this.Phone;
			_tmp.Fax = this.Fax;
			_tmp.WebAddress = this.WebAddress;
			_tmp.Notes = this.Notes;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.CreateUserId = this.CreateUserId;
			_tmp.UpdateUserId = this.UpdateUserId;
			_tmp.Active = this.Active;
			_tmp.Deleted = this.Deleted;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.TeacherCollection = (TList<Teacher>) MakeCopyOf(this.TeacherCollection, existingCopies); 
			_tmp.ClientEducationCollection = (TList<ClientEducation>) MakeCopyOf(this.ClientEducationCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		[DataMember]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new SchoolEntityData();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SchoolColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SchoolColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SchoolColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SchoolColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SchoolColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SchoolColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				SchoolEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SchoolEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SchoolColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SchoolColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SchoolEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SchoolEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SchoolEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="School"/> object.
	/// </remarks>
	public class SchoolEventArgs : System.EventArgs
	{
		private SchoolColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SchoolEventArgs class.
		///</summary>
		public SchoolEventArgs(SchoolColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SchoolEventArgs class.
		///</summary>
		public SchoolEventArgs(SchoolColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SchoolColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SchoolColumn" />
		public SchoolColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all School related events.
	///</summary>
	public delegate void SchoolEventHandler(object sender, SchoolEventArgs e);
	
	#region SchoolComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SchoolComparer : System.Collections.Generic.IComparer<School>
	{
		SchoolColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SchoolComparer"/> class.
        /// </summary>
		public SchoolComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SchoolComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SchoolComparer(SchoolColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="School"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="School"/> to compare.</param>
        /// <param name="b">The second <c>School</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(School a, School b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(School entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(School a, School b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SchoolColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SchoolKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="School"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SchoolKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SchoolKey class.
		/// </summary>
		public SchoolKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SchoolKey class.
		/// </summary>
		public SchoolKey(SchoolBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SchoolId = entity.SchoolId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SchoolKey class.
		/// </summary>
		public SchoolKey(System.Int32 _schoolId)
		{
			#region Init Properties

			this.SchoolId = _schoolId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SchoolBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SchoolBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SchoolId property
		private System.Int32 _schoolId;
		
		/// <summary>
		/// Gets or sets the SchoolId property.
		/// </summary>
		public System.Int32 SchoolId
		{
			get { return _schoolId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SchoolId = value;
				
				_schoolId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SchoolId = ( values["SchoolId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["SchoolId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SchoolId", SchoolId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SchoolId: {0}{1}",
								SchoolId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SchoolColumn Enum
	
	/// <summary>
	/// Enumerate the School columns.
	/// </summary>
	[Serializable]
	public enum SchoolColumn : int
	{
		/// <summary>
		/// SchoolId : 
		/// </summary>
		[EnumTextValue("School Id")]
		[ColumnEnum("SchoolId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		SchoolId = 1,
		/// <summary>
		/// SchoolName : 
		/// </summary>
		[EnumTextValue("School Name")]
		[ColumnEnum("SchoolName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		SchoolName = 2,
		/// <summary>
		/// CorparationTypeId : 
		/// </summary>
		[EnumTextValue("Corparation Type Id")]
		[ColumnEnum("CorparationTypeId", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		CorparationTypeId = 3,
		/// <summary>
		/// SchoolTypeId : 
		/// </summary>
		[EnumTextValue("School Type Id")]
		[ColumnEnum("SchoolTypeId", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		SchoolTypeId = 4,
		/// <summary>
		/// ProvinceId : 
		/// </summary>
		[EnumTextValue("Province Id")]
		[ColumnEnum("ProvinceId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProvinceId = 5,
		/// <summary>
		/// TownId : 
		/// </summary>
		[EnumTextValue("Town Id")]
		[ColumnEnum("TownId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TownId = 6,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("Address", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		Address = 7,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 15)]
		Phone = 8,
		/// <summary>
		/// Fax : 
		/// </summary>
		[EnumTextValue("Fax")]
		[ColumnEnum("Fax", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 15)]
		Fax = 9,
		/// <summary>
		/// WebAddress : 
		/// </summary>
		[EnumTextValue("Web Address")]
		[ColumnEnum("WebAddress", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		WebAddress = 10,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("Notes")]
		[ColumnEnum("Notes", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Notes = 11,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("Create Date")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDate = 12,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("Update Date")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateDate = 13,
		/// <summary>
		/// CreateUserId : 
		/// </summary>
		[EnumTextValue("Create User Id")]
		[ColumnEnum("CreateUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CreateUserId = 14,
		/// <summary>
		/// UpdateUserId : 
		/// </summary>
		[EnumTextValue("Update User Id")]
		[ColumnEnum("UpdateUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UpdateUserId = 15,
		/// <summary>
		/// Active : 
		/// </summary>
		[EnumTextValue("Active")]
		[ColumnEnum("Active", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Active = 16,
		/// <summary>
		/// Deleted : 
		/// </summary>
		[EnumTextValue("Deleted")]
		[ColumnEnum("Deleted", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Deleted = 17
	}//End enum

	#endregion SchoolColumn Enum

} // end namespace
