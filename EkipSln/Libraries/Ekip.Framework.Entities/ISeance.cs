using System;
using System.ComponentModel;

namespace Ekip.Framework.Entities
{
	/// <summary>
	///		The data structure representation of the 'Seance' table via interface.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	public interface ISeance 
	{
		/// <summary>			
		/// SeanceId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Seance"</remarks>
		System.Int32 SeanceId { get; set; }
				
		
		
		/// <summary>
		/// ClientId : 
		/// </summary>
		System.Int32  ClientId  { get; set; }
		
		/// <summary>
		/// AdvisorId : 
		/// </summary>
		System.Int32  AdvisorId  { get; set; }
		
		/// <summary>
		/// SeanceDate : 
		/// </summary>
		System.DateTime?  SeanceDate  { get; set; }
		
		/// <summary>
		/// SeanceTime : 
		/// </summary>
		System.TimeSpan?  SeanceTime  { get; set; }
		
		/// <summary>
		/// Notes : 
		/// </summary>
		System.String  Notes  { get; set; }
		
		/// <summary>
		/// SeanceStatusId : 
		/// </summary>
		System.Byte  SeanceStatusId  { get; set; }
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		System.DateTime  CreateDate  { get; set; }
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		System.DateTime?  UpdateDate  { get; set; }
		
		/// <summary>
		/// CreatedUserId : 
		/// </summary>
		System.Int32?  CreatedUserId  { get; set; }
		
		/// <summary>
		/// UpdatedUserId : 
		/// </summary>
		System.Int32?  UpdatedUserId  { get; set; }
		
		/// <summary>
		/// Active : 
		/// </summary>
		System.Boolean  Active  { get; set; }
		
		/// <summary>
		/// Deleted : 
		/// </summary>
		System.Boolean  Deleted  { get; set; }
			
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		System.Object Clone();
		
		#region Data Properties


		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seanceReasonSeanceId
		/// </summary>	
		TList<SeanceReason> SeanceReasonCollection {  get;  set;}	

		#endregion Data Properties

	}
}


