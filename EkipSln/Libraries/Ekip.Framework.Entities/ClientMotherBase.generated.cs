
/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 13 Şubat 2019 Çarşamba
	Important: Do not modify this file. Edit the file ClientMother.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Ekip.Framework.Entities.Validation;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'ClientMother' table. [No description found the database]	
	///</summary>
	[DataContract]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ClientMotherBase : EntityBase, IClientMother, IEntityId<ClientMotherKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		[DataMember]
		private ClientMotherEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		[DataMember]
		private ClientMotherEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ClientMotherEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		private TList<ClientMother> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		public event ClientMotherEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		public event ClientMotherEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ClientMotherBase"/> instance.
		///</summary>
		public ClientMotherBase()
		{
			this.entityData = new ClientMotherEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ClientMotherBase"/> instance.
		///</summary>
		///<param name="_fullName"></param>
		///<param name="_title"></param>
		///<param name="_email"></param>
		///<param name="_fax"></param>
		///<param name="_homePhone"></param>
		///<param name="_businessPhone"></param>
		///<param name="_mobilePhone"></param>
		///<param name="_otherPhone"></param>
		///<param name="_jobId"></param>
		///<param name="_notes"></param>
		///<param name="_motherStatusId"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_createUserId"></param>
		///<param name="_updateUserId"></param>
		///<param name="_active"></param>
		///<param name="_deleted"></param>
		public ClientMotherBase(System.String _fullName, System.String _title, System.String _email, 
			System.String _fax, System.String _homePhone, System.String _businessPhone, System.String _mobilePhone, 
			System.String _otherPhone, System.Int32? _jobId, System.String _notes, System.Byte _motherStatusId, 
			System.DateTime _createDate, System.DateTime? _updateDate, System.Int32 _createUserId, 
			System.Int32? _updateUserId, System.Boolean _active, System.Boolean _deleted)
		{
			this.entityData = new ClientMotherEntityData();
			this.backupData = null;

			this.FullName = _fullName;
			this.Title = _title;
			this.Email = _email;
			this.Fax = _fax;
			this.HomePhone = _homePhone;
			this.BusinessPhone = _businessPhone;
			this.MobilePhone = _mobilePhone;
			this.OtherPhone = _otherPhone;
			this.JobId = _jobId;
			this.Notes = _notes;
			this.MotherStatusId = _motherStatusId;
			this.CreateDate = _createDate;
			this.UpdateDate = _updateDate;
			this.CreateUserId = _createUserId;
			this.UpdateUserId = _updateUserId;
			this.Active = _active;
			this.Deleted = _deleted;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ClientMother"/> instance.
		///</summary>
		///<param name="_fullName"></param>
		///<param name="_title"></param>
		///<param name="_email"></param>
		///<param name="_fax"></param>
		///<param name="_homePhone"></param>
		///<param name="_businessPhone"></param>
		///<param name="_mobilePhone"></param>
		///<param name="_otherPhone"></param>
		///<param name="_jobId"></param>
		///<param name="_notes"></param>
		///<param name="_motherStatusId"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_createUserId"></param>
		///<param name="_updateUserId"></param>
		///<param name="_active"></param>
		///<param name="_deleted"></param>
		public static ClientMother CreateClientMother(System.String _fullName, System.String _title, System.String _email, 
			System.String _fax, System.String _homePhone, System.String _businessPhone, System.String _mobilePhone, 
			System.String _otherPhone, System.Int32? _jobId, System.String _notes, System.Byte _motherStatusId, 
			System.DateTime _createDate, System.DateTime? _updateDate, System.Int32 _createUserId, 
			System.Int32? _updateUserId, System.Boolean _active, System.Boolean _deleted)
		{
			ClientMother newClientMother = new ClientMother();
			newClientMother.FullName = _fullName;
			newClientMother.Title = _title;
			newClientMother.Email = _email;
			newClientMother.Fax = _fax;
			newClientMother.HomePhone = _homePhone;
			newClientMother.BusinessPhone = _businessPhone;
			newClientMother.MobilePhone = _mobilePhone;
			newClientMother.OtherPhone = _otherPhone;
			newClientMother.JobId = _jobId;
			newClientMother.Notes = _notes;
			newClientMother.MotherStatusId = _motherStatusId;
			newClientMother.CreateDate = _createDate;
			newClientMother.UpdateDate = _updateDate;
			newClientMother.CreateUserId = _createUserId;
			newClientMother.UpdateUserId = _updateUserId;
			newClientMother.Active = _active;
			newClientMother.Deleted = _deleted;
			return newClientMother;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MotherId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MotherId
		{
			get
			{
				return this.entityData.MotherId; 
			}
			
			set
			{
				if (this.entityData.MotherId == value)
					return;
				
                OnPropertyChanging("MotherId");                    
				OnColumnChanging(ClientMotherColumn.MotherId, this.entityData.MotherId);
				this.entityData.MotherId = value;
				this.EntityId.MotherId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.MotherId, this.entityData.MotherId);
				OnPropertyChanged("MotherId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FullName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String FullName
		{
			get
			{
				return this.entityData.FullName; 
			}
			
			set
			{
				if (this.entityData.FullName == value)
					return;
				
                OnPropertyChanging("FullName");                    
				OnColumnChanging(ClientMotherColumn.FullName, this.entityData.FullName);
				this.entityData.FullName = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.FullName, this.entityData.FullName);
				OnPropertyChanged("FullName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Title property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Title
		{
			get
			{
				return this.entityData.Title; 
			}
			
			set
			{
				if (this.entityData.Title == value)
					return;
				
                OnPropertyChanging("Title");                    
				OnColumnChanging(ClientMotherColumn.Title, this.entityData.Title);
				this.entityData.Title = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.Title, this.entityData.Title);
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
				
                OnPropertyChanging("Email");                    
				OnColumnChanging(ClientMotherColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fax property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Fax
		{
			get
			{
				return this.entityData.Fax; 
			}
			
			set
			{
				if (this.entityData.Fax == value)
					return;
				
                OnPropertyChanging("Fax");                    
				OnColumnChanging(ClientMotherColumn.Fax, this.entityData.Fax);
				this.entityData.Fax = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.Fax, this.entityData.Fax);
				OnPropertyChanged("Fax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HomePhone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String HomePhone
		{
			get
			{
				return this.entityData.HomePhone; 
			}
			
			set
			{
				if (this.entityData.HomePhone == value)
					return;
				
                OnPropertyChanging("HomePhone");                    
				OnColumnChanging(ClientMotherColumn.HomePhone, this.entityData.HomePhone);
				this.entityData.HomePhone = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.HomePhone, this.entityData.HomePhone);
				OnPropertyChanged("HomePhone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BusinessPhone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String BusinessPhone
		{
			get
			{
				return this.entityData.BusinessPhone; 
			}
			
			set
			{
				if (this.entityData.BusinessPhone == value)
					return;
				
                OnPropertyChanging("BusinessPhone");                    
				OnColumnChanging(ClientMotherColumn.BusinessPhone, this.entityData.BusinessPhone);
				this.entityData.BusinessPhone = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.BusinessPhone, this.entityData.BusinessPhone);
				OnPropertyChanged("BusinessPhone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MobilePhone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MobilePhone
		{
			get
			{
				return this.entityData.MobilePhone; 
			}
			
			set
			{
				if (this.entityData.MobilePhone == value)
					return;
				
                OnPropertyChanging("MobilePhone");                    
				OnColumnChanging(ClientMotherColumn.MobilePhone, this.entityData.MobilePhone);
				this.entityData.MobilePhone = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.MobilePhone, this.entityData.MobilePhone);
				OnPropertyChanged("MobilePhone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OtherPhone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String OtherPhone
		{
			get
			{
				return this.entityData.OtherPhone; 
			}
			
			set
			{
				if (this.entityData.OtherPhone == value)
					return;
				
                OnPropertyChanging("OtherPhone");                    
				OnColumnChanging(ClientMotherColumn.OtherPhone, this.entityData.OtherPhone);
				this.entityData.OtherPhone = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.OtherPhone, this.entityData.OtherPhone);
				OnPropertyChanged("OtherPhone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? JobId
		{
			get
			{
				return this.entityData.JobId; 
			}
			
			set
			{
				if (this.entityData.JobId == value)
					return;
				
                OnPropertyChanging("JobId");                    
				OnColumnChanging(ClientMotherColumn.JobId, this.entityData.JobId);
				this.entityData.JobId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.JobId, this.entityData.JobId);
				OnPropertyChanged("JobId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
				
                OnPropertyChanging("Notes");                    
				OnColumnChanging(ClientMotherColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MotherStatusId property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte MotherStatusId
		{
			get
			{
				return this.entityData.MotherStatusId; 
			}
			
			set
			{
				if (this.entityData.MotherStatusId == value)
					return;
				
                OnPropertyChanging("MotherStatusId");                    
				OnColumnChanging(ClientMotherColumn.MotherStatusId, this.entityData.MotherStatusId);
				this.entityData.MotherStatusId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.MotherStatusId, this.entityData.MotherStatusId);
				OnPropertyChanged("MotherStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
				
                OnPropertyChanging("CreateDate");                    
				OnColumnChanging(ClientMotherColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
				
                OnPropertyChanging("UpdateDate");                    
				OnColumnChanging(ClientMotherColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CreateUserId
		{
			get
			{
				return this.entityData.CreateUserId; 
			}
			
			set
			{
				if (this.entityData.CreateUserId == value)
					return;
				
                OnPropertyChanging("CreateUserId");                    
				OnColumnChanging(ClientMotherColumn.CreateUserId, this.entityData.CreateUserId);
				this.entityData.CreateUserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.CreateUserId, this.entityData.CreateUserId);
				OnPropertyChanged("CreateUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UpdateUserId
		{
			get
			{
				return this.entityData.UpdateUserId; 
			}
			
			set
			{
				if (this.entityData.UpdateUserId == value)
					return;
				
                OnPropertyChanging("UpdateUserId");                    
				OnColumnChanging(ClientMotherColumn.UpdateUserId, this.entityData.UpdateUserId);
				this.entityData.UpdateUserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.UpdateUserId, this.entityData.UpdateUserId);
				OnPropertyChanged("UpdateUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Active property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Active
		{
			get
			{
				return this.entityData.Active; 
			}
			
			set
			{
				if (this.entityData.Active == value)
					return;
				
                OnPropertyChanging("Active");                    
				OnColumnChanging(ClientMotherColumn.Active, this.entityData.Active);
				this.entityData.Active = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.Active, this.entityData.Active);
				OnPropertyChanged("Active");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Deleted property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Deleted
		{
			get
			{
				return this.entityData.Deleted; 
			}
			
			set
			{
				if (this.entityData.Deleted == value)
					return;
				
                OnPropertyChanging("Deleted");                    
				OnColumnChanging(ClientMotherColumn.Deleted, this.entityData.Deleted);
				this.entityData.Deleted = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientMotherColumn.Deleted, this.entityData.Deleted);
				OnPropertyChanged("Deleted");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Client objects
		///	which are related to this object through the relation FK_Client_ClientMother
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Client> ClientCollection
		{
			get { return entityData.ClientCollection; }
			set { entityData.ClientCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FullName", "Full Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Title", "Title", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Fax", "Fax", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HomePhone", "Home Phone", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BusinessPhone", "Business Phone", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MobilePhone", "Mobile Phone", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("OtherPhone", "Other Phone", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 500));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ClientMother"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MotherId", "FullName", "Title", "Email", "Fax", "HomePhone", "BusinessPhone", "MobilePhone", "OtherPhone", "JobId", "Notes", "MotherStatusId", "CreateDate", "UpdateDate", "CreateUserId", "UpdateUserId", "Active", "Deleted"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ClientMotherEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ClientMother) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ClientMother>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ClientMother);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ClientMother Entity 
		///</summary>
		protected virtual ClientMother Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ClientMother copy = new ClientMother();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MotherId = this.MotherId;
				copy.FullName = this.FullName;
				copy.Title = this.Title;
				copy.Email = this.Email;
				copy.Fax = this.Fax;
				copy.HomePhone = this.HomePhone;
				copy.BusinessPhone = this.BusinessPhone;
				copy.MobilePhone = this.MobilePhone;
				copy.OtherPhone = this.OtherPhone;
				copy.JobId = this.JobId;
				copy.Notes = this.Notes;
				copy.MotherStatusId = this.MotherStatusId;
				copy.CreateDate = this.CreateDate;
				copy.UpdateDate = this.UpdateDate;
				copy.CreateUserId = this.CreateUserId;
				copy.UpdateUserId = this.UpdateUserId;
				copy.Active = this.Active;
				copy.Deleted = this.Deleted;
			
		
			//deep copy nested objects
			copy.ClientCollection = (TList<Client>) MakeCopyOf(this.ClientCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ClientMother Entity 
		///</summary>
		public virtual ClientMother Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ClientMother Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ClientMother DeepCopy()
		{
			return EntityHelper.Clone<ClientMother>(this as ClientMother);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ClientMotherEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ClientMotherEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ClientMotherEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ClientMotherColumn column)
		{
			switch(column)
			{
					case ClientMotherColumn.MotherId:
					return entityData.MotherId != _originalData.MotherId;
					case ClientMotherColumn.FullName:
					return entityData.FullName != _originalData.FullName;
					case ClientMotherColumn.Title:
					return entityData.Title != _originalData.Title;
					case ClientMotherColumn.Email:
					return entityData.Email != _originalData.Email;
					case ClientMotherColumn.Fax:
					return entityData.Fax != _originalData.Fax;
					case ClientMotherColumn.HomePhone:
					return entityData.HomePhone != _originalData.HomePhone;
					case ClientMotherColumn.BusinessPhone:
					return entityData.BusinessPhone != _originalData.BusinessPhone;
					case ClientMotherColumn.MobilePhone:
					return entityData.MobilePhone != _originalData.MobilePhone;
					case ClientMotherColumn.OtherPhone:
					return entityData.OtherPhone != _originalData.OtherPhone;
					case ClientMotherColumn.JobId:
					return entityData.JobId != _originalData.JobId;
					case ClientMotherColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case ClientMotherColumn.MotherStatusId:
					return entityData.MotherStatusId != _originalData.MotherStatusId;
					case ClientMotherColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case ClientMotherColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
					case ClientMotherColumn.CreateUserId:
					return entityData.CreateUserId != _originalData.CreateUserId;
					case ClientMotherColumn.UpdateUserId:
					return entityData.UpdateUserId != _originalData.UpdateUserId;
					case ClientMotherColumn.Active:
					return entityData.Active != _originalData.Active;
					case ClientMotherColumn.Deleted:
					return entityData.Deleted != _originalData.Deleted;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ClientMotherColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MotherId != _originalData.MotherId;
			result = result || entityData.FullName != _originalData.FullName;
			result = result || entityData.Title != _originalData.Title;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.Fax != _originalData.Fax;
			result = result || entityData.HomePhone != _originalData.HomePhone;
			result = result || entityData.BusinessPhone != _originalData.BusinessPhone;
			result = result || entityData.MobilePhone != _originalData.MobilePhone;
			result = result || entityData.OtherPhone != _originalData.OtherPhone;
			result = result || entityData.JobId != _originalData.JobId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.MotherStatusId != _originalData.MotherStatusId;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			result = result || entityData.CreateUserId != _originalData.CreateUserId;
			result = result || entityData.UpdateUserId != _originalData.UpdateUserId;
			result = result || entityData.Active != _originalData.Active;
			result = result || entityData.Deleted != _originalData.Deleted;
			return result;
		}	
		
		///<summary>
		///  Returns a ClientMother Entity with the original data.
		///</summary>
		public ClientMother GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateClientMother(
				_originalData.FullName,
				_originalData.Title,
				_originalData.Email,
				_originalData.Fax,
				_originalData.HomePhone,
				_originalData.BusinessPhone,
				_originalData.MobilePhone,
				_originalData.OtherPhone,
				_originalData.JobId,
				_originalData.Notes,
				_originalData.MotherStatusId,
				_originalData.CreateDate,
				_originalData.UpdateDate,
				_originalData.CreateUserId,
				_originalData.UpdateUserId,
				_originalData.Active,
				_originalData.Deleted
				);
				
			return (ClientMother)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ClientMotherBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ClientMotherBase)
				return ValueEquals(this, (ClientMotherBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ClientMotherBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MotherId.GetHashCode() ^ 
					((this.FullName == null) ? string.Empty : this.FullName.ToString()).GetHashCode() ^ 
					((this.Title == null) ? string.Empty : this.Title.ToString()).GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					((this.Fax == null) ? string.Empty : this.Fax.ToString()).GetHashCode() ^ 
					((this.HomePhone == null) ? string.Empty : this.HomePhone.ToString()).GetHashCode() ^ 
					((this.BusinessPhone == null) ? string.Empty : this.BusinessPhone.ToString()).GetHashCode() ^ 
					((this.MobilePhone == null) ? string.Empty : this.MobilePhone.ToString()).GetHashCode() ^ 
					((this.OtherPhone == null) ? string.Empty : this.OtherPhone.ToString()).GetHashCode() ^ 
					((this.JobId == null) ? string.Empty : this.JobId.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					this.MotherStatusId.GetHashCode() ^ 
					this.CreateDate.GetHashCode() ^ 
					((this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString()).GetHashCode() ^ 
					this.CreateUserId.GetHashCode() ^ 
					((this.UpdateUserId == null) ? string.Empty : this.UpdateUserId.ToString()).GetHashCode() ^ 
					this.Active.GetHashCode() ^ 
					this.Deleted.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ClientMotherBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ClientMotherBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ClientMotherBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ClientMotherBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ClientMotherBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ClientMotherBase Object1, ClientMotherBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MotherId != Object2.MotherId)
				equal = false;
			if ( Object1.FullName != null && Object2.FullName != null )
			{
				if (Object1.FullName != Object2.FullName)
					equal = false;
			}
			else if (Object1.FullName == null ^ Object2.FullName == null )
			{
				equal = false;
			}
			if ( Object1.Title != null && Object2.Title != null )
			{
				if (Object1.Title != Object2.Title)
					equal = false;
			}
			else if (Object1.Title == null ^ Object2.Title == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.Fax != null && Object2.Fax != null )
			{
				if (Object1.Fax != Object2.Fax)
					equal = false;
			}
			else if (Object1.Fax == null ^ Object2.Fax == null )
			{
				equal = false;
			}
			if ( Object1.HomePhone != null && Object2.HomePhone != null )
			{
				if (Object1.HomePhone != Object2.HomePhone)
					equal = false;
			}
			else if (Object1.HomePhone == null ^ Object2.HomePhone == null )
			{
				equal = false;
			}
			if ( Object1.BusinessPhone != null && Object2.BusinessPhone != null )
			{
				if (Object1.BusinessPhone != Object2.BusinessPhone)
					equal = false;
			}
			else if (Object1.BusinessPhone == null ^ Object2.BusinessPhone == null )
			{
				equal = false;
			}
			if ( Object1.MobilePhone != null && Object2.MobilePhone != null )
			{
				if (Object1.MobilePhone != Object2.MobilePhone)
					equal = false;
			}
			else if (Object1.MobilePhone == null ^ Object2.MobilePhone == null )
			{
				equal = false;
			}
			if ( Object1.OtherPhone != null && Object2.OtherPhone != null )
			{
				if (Object1.OtherPhone != Object2.OtherPhone)
					equal = false;
			}
			else if (Object1.OtherPhone == null ^ Object2.OtherPhone == null )
			{
				equal = false;
			}
			if ( Object1.JobId != null && Object2.JobId != null )
			{
				if (Object1.JobId != Object2.JobId)
					equal = false;
			}
			else if (Object1.JobId == null ^ Object2.JobId == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if (Object1.MotherStatusId != Object2.MotherStatusId)
				equal = false;
			if (Object1.CreateDate != Object2.CreateDate)
				equal = false;
			if ( Object1.UpdateDate != null && Object2.UpdateDate != null )
			{
				if (Object1.UpdateDate != Object2.UpdateDate)
					equal = false;
			}
			else if (Object1.UpdateDate == null ^ Object2.UpdateDate == null )
			{
				equal = false;
			}
			if (Object1.CreateUserId != Object2.CreateUserId)
				equal = false;
			if ( Object1.UpdateUserId != null && Object2.UpdateUserId != null )
			{
				if (Object1.UpdateUserId != Object2.UpdateUserId)
					equal = false;
			}
			else if (Object1.UpdateUserId == null ^ Object2.UpdateUserId == null )
			{
				equal = false;
			}
			if (Object1.Active != Object2.Active)
				equal = false;
			if (Object1.Deleted != Object2.Deleted)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ClientMotherBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ClientMotherComparer GetComparer()
        {
            return new ClientMotherComparer();
        }
        */

        // Comparer delegates back to ClientMother
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ClientMother rhs, ClientMotherColumn which)
        {
            switch (which)
            {
            	
            	
            	case ClientMotherColumn.MotherId:
            		return this.MotherId.CompareTo(rhs.MotherId);
            		
            		                 
            	
            	
            	case ClientMotherColumn.FullName:
            		return this.FullName.CompareTo(rhs.FullName);
            		
            		                 
            	
            	
            	case ClientMotherColumn.Title:
            		return this.Title.CompareTo(rhs.Title);
            		
            		                 
            	
            	
            	case ClientMotherColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case ClientMotherColumn.Fax:
            		return this.Fax.CompareTo(rhs.Fax);
            		
            		                 
            	
            	
            	case ClientMotherColumn.HomePhone:
            		return this.HomePhone.CompareTo(rhs.HomePhone);
            		
            		                 
            	
            	
            	case ClientMotherColumn.BusinessPhone:
            		return this.BusinessPhone.CompareTo(rhs.BusinessPhone);
            		
            		                 
            	
            	
            	case ClientMotherColumn.MobilePhone:
            		return this.MobilePhone.CompareTo(rhs.MobilePhone);
            		
            		                 
            	
            	
            	case ClientMotherColumn.OtherPhone:
            		return this.OtherPhone.CompareTo(rhs.OtherPhone);
            		
            		                 
            	
            	
            	case ClientMotherColumn.JobId:
            		return this.JobId.Value.CompareTo(rhs.JobId.Value);
            		
            		                 
            	
            	
            	case ClientMotherColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case ClientMotherColumn.MotherStatusId:
            		return this.MotherStatusId.CompareTo(rhs.MotherStatusId);
            		
            		                 
            	
            	
            	case ClientMotherColumn.CreateDate:
            		return this.CreateDate.CompareTo(rhs.CreateDate);
            		
            		                 
            	
            	
            	case ClientMotherColumn.UpdateDate:
            		return this.UpdateDate.Value.CompareTo(rhs.UpdateDate.Value);
            		
            		                 
            	
            	
            	case ClientMotherColumn.CreateUserId:
            		return this.CreateUserId.CompareTo(rhs.CreateUserId);
            		
            		                 
            	
            	
            	case ClientMotherColumn.UpdateUserId:
            		return this.UpdateUserId.Value.CompareTo(rhs.UpdateUserId.Value);
            		
            		                 
            	
            	
            	case ClientMotherColumn.Active:
            		return this.Active.CompareTo(rhs.Active);
            		
            		                 
            	
            	
            	case ClientMotherColumn.Deleted:
            		return this.Deleted.CompareTo(rhs.Deleted);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ClientMotherKey> Members
		
		// member variable for the EntityId property
		private ClientMotherKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ClientMotherKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ClientMotherKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ClientMother")
					.Append("|").Append( this.MotherId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- MotherId: {0}{18}- FullName: {1}{18}- Title: {2}{18}- Email: {3}{18}- Fax: {4}{18}- HomePhone: {5}{18}- BusinessPhone: {6}{18}- MobilePhone: {7}{18}- OtherPhone: {8}{18}- JobId: {9}{18}- Notes: {10}{18}- MotherStatusId: {11}{18}- CreateDate: {12}{18}- UpdateDate: {13}{18}- CreateUserId: {14}{18}- UpdateUserId: {15}{18}- Active: {16}{18}- Deleted: {17}{18}{20}", 
				this.MotherId,
				(this.FullName == null) ? string.Empty : this.FullName.ToString(),
				(this.Title == null) ? string.Empty : this.Title.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.Fax == null) ? string.Empty : this.Fax.ToString(),
				(this.HomePhone == null) ? string.Empty : this.HomePhone.ToString(),
				(this.BusinessPhone == null) ? string.Empty : this.BusinessPhone.ToString(),
				(this.MobilePhone == null) ? string.Empty : this.MobilePhone.ToString(),
				(this.OtherPhone == null) ? string.Empty : this.OtherPhone.ToString(),
				(this.JobId == null) ? string.Empty : this.JobId.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				this.MotherStatusId,
				this.CreateDate,
				(this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString(),
				this.CreateUserId,
				(this.UpdateUserId == null) ? string.Empty : this.UpdateUserId.ToString(),
				this.Active,
				this.Deleted,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ClientMother' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	internal protected class ClientMotherEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MotherId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ClientMother"</remarks>
		[DataMember]
		public System.Int32 MotherId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// FullName : 
		/// </summary>
		[DataMember]
		public System.String FullName = null;
		
		/// <summary>
		/// Title : 
		/// </summary>
		[DataMember]
		public System.String Title = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		[DataMember]
		public System.String Email = null;
		
		/// <summary>
		/// Fax : 
		/// </summary>
		[DataMember]
		public System.String Fax = null;
		
		/// <summary>
		/// HomePhone : 
		/// </summary>
		[DataMember]
		public System.String HomePhone = null;
		
		/// <summary>
		/// BusinessPhone : 
		/// </summary>
		[DataMember]
		public System.String BusinessPhone = null;
		
		/// <summary>
		/// MobilePhone : 
		/// </summary>
		[DataMember]
		public System.String MobilePhone = null;
		
		/// <summary>
		/// OtherPhone : 
		/// </summary>
		[DataMember]
		public System.String OtherPhone = null;
		
		/// <summary>
		/// JobId : 
		/// </summary>
		[DataMember]
		public System.Int32? JobId = null;
		
		/// <summary>
		/// Notes : 
		/// </summary>
		[DataMember]
		public System.String Notes = null;
		
		/// <summary>
		/// MotherStatusId : 
		/// </summary>
		[DataMember]
		public System.Byte MotherStatusId = (byte)0;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime CreateDate = DateTime.Now;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime? UpdateDate = null;
		
		/// <summary>
		/// CreateUserId : 
		/// </summary>
		[DataMember]
		public System.Int32 CreateUserId = (int)0;
		
		/// <summary>
		/// UpdateUserId : 
		/// </summary>
		[DataMember]
		public System.Int32? UpdateUserId = null;
		
		/// <summary>
		/// Active : 
		/// </summary>
		[DataMember]
		public System.Boolean Active = true;
		
		/// <summary>
		/// Deleted : 
		/// </summary>
		[DataMember]
		public System.Boolean Deleted = false;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region ClientCollection
		
		private TList<Client> _clientMotherId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _clientMotherId
		/// </summary>
		[DataMember]
		public TList<Client> ClientCollection
		{
			get
			{
				if (_clientMotherId == null)
				{
				_clientMotherId = new TList<Client>();
				}
	
				return _clientMotherId;
			}
			set { _clientMotherId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ClientMotherEntityData _tmp = new ClientMotherEntityData();
						
			_tmp.MotherId = this.MotherId;
			
			_tmp.FullName = this.FullName;
			_tmp.Title = this.Title;
			_tmp.Email = this.Email;
			_tmp.Fax = this.Fax;
			_tmp.HomePhone = this.HomePhone;
			_tmp.BusinessPhone = this.BusinessPhone;
			_tmp.MobilePhone = this.MobilePhone;
			_tmp.OtherPhone = this.OtherPhone;
			_tmp.JobId = this.JobId;
			_tmp.Notes = this.Notes;
			_tmp.MotherStatusId = this.MotherStatusId;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.CreateUserId = this.CreateUserId;
			_tmp.UpdateUserId = this.UpdateUserId;
			_tmp.Active = this.Active;
			_tmp.Deleted = this.Deleted;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._clientMotherId != null)
				_tmp.ClientCollection = (TList<Client>) MakeCopyOf(this.ClientCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ClientMotherEntityData _tmp = new ClientMotherEntityData();
						
			_tmp.MotherId = this.MotherId;
			
			_tmp.FullName = this.FullName;
			_tmp.Title = this.Title;
			_tmp.Email = this.Email;
			_tmp.Fax = this.Fax;
			_tmp.HomePhone = this.HomePhone;
			_tmp.BusinessPhone = this.BusinessPhone;
			_tmp.MobilePhone = this.MobilePhone;
			_tmp.OtherPhone = this.OtherPhone;
			_tmp.JobId = this.JobId;
			_tmp.Notes = this.Notes;
			_tmp.MotherStatusId = this.MotherStatusId;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.CreateUserId = this.CreateUserId;
			_tmp.UpdateUserId = this.UpdateUserId;
			_tmp.Active = this.Active;
			_tmp.Deleted = this.Deleted;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ClientCollection = (TList<Client>) MakeCopyOf(this.ClientCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		[DataMember]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new ClientMotherEntityData();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientMotherColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ClientMotherColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientMotherColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ClientMotherColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientMotherColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ClientMotherColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ClientMotherEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ClientMotherEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientMotherColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ClientMotherColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ClientMotherEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ClientMotherEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ClientMotherEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ClientMother"/> object.
	/// </remarks>
	public class ClientMotherEventArgs : System.EventArgs
	{
		private ClientMotherColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ClientMotherEventArgs class.
		///</summary>
		public ClientMotherEventArgs(ClientMotherColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ClientMotherEventArgs class.
		///</summary>
		public ClientMotherEventArgs(ClientMotherColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ClientMotherColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ClientMotherColumn" />
		public ClientMotherColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ClientMother related events.
	///</summary>
	public delegate void ClientMotherEventHandler(object sender, ClientMotherEventArgs e);
	
	#region ClientMotherComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ClientMotherComparer : System.Collections.Generic.IComparer<ClientMother>
	{
		ClientMotherColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ClientMotherComparer"/> class.
        /// </summary>
		public ClientMotherComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ClientMotherComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ClientMotherComparer(ClientMotherColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ClientMother"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ClientMother"/> to compare.</param>
        /// <param name="b">The second <c>ClientMother</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ClientMother a, ClientMother b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ClientMother entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ClientMother a, ClientMother b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ClientMotherColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ClientMotherKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ClientMother"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ClientMotherKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ClientMotherKey class.
		/// </summary>
		public ClientMotherKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ClientMotherKey class.
		/// </summary>
		public ClientMotherKey(ClientMotherBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MotherId = entity.MotherId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ClientMotherKey class.
		/// </summary>
		public ClientMotherKey(System.Int32 _motherId)
		{
			#region Init Properties

			this.MotherId = _motherId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ClientMotherBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ClientMotherBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MotherId property
		private System.Int32 _motherId;
		
		/// <summary>
		/// Gets or sets the MotherId property.
		/// </summary>
		public System.Int32 MotherId
		{
			get { return _motherId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MotherId = value;
				
				_motherId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MotherId = ( values["MotherId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MotherId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MotherId", MotherId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MotherId: {0}{1}",
								MotherId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ClientMotherColumn Enum
	
	/// <summary>
	/// Enumerate the ClientMother columns.
	/// </summary>
	[Serializable]
	public enum ClientMotherColumn : int
	{
		/// <summary>
		/// MotherId : 
		/// </summary>
		[EnumTextValue("Mother Id")]
		[ColumnEnum("MotherId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MotherId = 1,
		/// <summary>
		/// FullName : 
		/// </summary>
		[EnumTextValue("Full Name")]
		[ColumnEnum("FullName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		FullName = 2,
		/// <summary>
		/// Title : 
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Title = 3,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Email = 4,
		/// <summary>
		/// Fax : 
		/// </summary>
		[EnumTextValue("Fax")]
		[ColumnEnum("Fax", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Fax = 5,
		/// <summary>
		/// HomePhone : 
		/// </summary>
		[EnumTextValue("Home Phone")]
		[ColumnEnum("HomePhone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		HomePhone = 6,
		/// <summary>
		/// BusinessPhone : 
		/// </summary>
		[EnumTextValue("Business Phone")]
		[ColumnEnum("BusinessPhone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		BusinessPhone = 7,
		/// <summary>
		/// MobilePhone : 
		/// </summary>
		[EnumTextValue("Mobile Phone")]
		[ColumnEnum("MobilePhone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MobilePhone = 8,
		/// <summary>
		/// OtherPhone : 
		/// </summary>
		[EnumTextValue("Other Phone")]
		[ColumnEnum("OtherPhone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		OtherPhone = 9,
		/// <summary>
		/// JobId : 
		/// </summary>
		[EnumTextValue("Job Id")]
		[ColumnEnum("JobId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		JobId = 10,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("Notes")]
		[ColumnEnum("Notes", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		Notes = 11,
		/// <summary>
		/// MotherStatusId : 
		/// </summary>
		[EnumTextValue("Mother Status Id")]
		[ColumnEnum("MotherStatusId", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		MotherStatusId = 12,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("Create Date")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDate = 13,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("Update Date")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateDate = 14,
		/// <summary>
		/// CreateUserId : 
		/// </summary>
		[EnumTextValue("Create User Id")]
		[ColumnEnum("CreateUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CreateUserId = 15,
		/// <summary>
		/// UpdateUserId : 
		/// </summary>
		[EnumTextValue("Update User Id")]
		[ColumnEnum("UpdateUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UpdateUserId = 16,
		/// <summary>
		/// Active : 
		/// </summary>
		[EnumTextValue("Active")]
		[ColumnEnum("Active", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Active = 17,
		/// <summary>
		/// Deleted : 
		/// </summary>
		[EnumTextValue("Deleted")]
		[ColumnEnum("Deleted", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Deleted = 18
	}//End enum

	#endregion ClientMotherColumn Enum

} // end namespace
