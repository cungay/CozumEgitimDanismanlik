
/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 5 Şubat 2019 Salı
	Important: Do not modify this file. Edit the file Seance.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Ekip.Framework.Entities.Validation;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'Seance' table. [No description found the database]	
	///</summary>
	[DataContract]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SeanceBase : EntityBase, ISeance, IEntityId<SeanceKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		[DataMember]
		private SeanceEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		[DataMember]
		private SeanceEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SeanceEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		private TList<Seance> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		public event SeanceEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		public event SeanceEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SeanceBase"/> instance.
		///</summary>
		public SeanceBase()
		{
			this.entityData = new SeanceEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SeanceBase"/> instance.
		///</summary>
		///<param name="_clientId"></param>
		///<param name="_advisorId"></param>
		///<param name="_seanceDate"></param>
		///<param name="_seanceTime"></param>
		///<param name="_notes"></param>
		///<param name="_seanceStatusId"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_createdUserId"></param>
		///<param name="_updatedUserId"></param>
		///<param name="_active"></param>
		///<param name="_deleted"></param>
		public SeanceBase(System.Int32 _clientId, System.Int32 _advisorId, System.DateTime? _seanceDate, 
			System.TimeSpan? _seanceTime, System.String _notes, System.Byte _seanceStatusId, System.DateTime _createDate, 
			System.DateTime? _updateDate, System.Int32? _createdUserId, System.Int32? _updatedUserId, System.Boolean _active, 
			System.Boolean _deleted)
		{
			this.entityData = new SeanceEntityData();
			this.backupData = null;

			this.ClientId = _clientId;
			this.AdvisorId = _advisorId;
			this.SeanceDate = _seanceDate;
			this.SeanceTime = _seanceTime;
			this.Notes = _notes;
			this.SeanceStatusId = _seanceStatusId;
			this.CreateDate = _createDate;
			this.UpdateDate = _updateDate;
			this.CreatedUserId = _createdUserId;
			this.UpdatedUserId = _updatedUserId;
			this.Active = _active;
			this.Deleted = _deleted;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Seance"/> instance.
		///</summary>
		///<param name="_clientId"></param>
		///<param name="_advisorId"></param>
		///<param name="_seanceDate"></param>
		///<param name="_seanceTime"></param>
		///<param name="_notes"></param>
		///<param name="_seanceStatusId"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_createdUserId"></param>
		///<param name="_updatedUserId"></param>
		///<param name="_active"></param>
		///<param name="_deleted"></param>
		public static Seance CreateSeance(System.Int32 _clientId, System.Int32 _advisorId, System.DateTime? _seanceDate, 
			System.TimeSpan? _seanceTime, System.String _notes, System.Byte _seanceStatusId, System.DateTime _createDate, 
			System.DateTime? _updateDate, System.Int32? _createdUserId, System.Int32? _updatedUserId, System.Boolean _active, 
			System.Boolean _deleted)
		{
			Seance newSeance = new Seance();
			newSeance.ClientId = _clientId;
			newSeance.AdvisorId = _advisorId;
			newSeance.SeanceDate = _seanceDate;
			newSeance.SeanceTime = _seanceTime;
			newSeance.Notes = _notes;
			newSeance.SeanceStatusId = _seanceStatusId;
			newSeance.CreateDate = _createDate;
			newSeance.UpdateDate = _updateDate;
			newSeance.CreatedUserId = _createdUserId;
			newSeance.UpdatedUserId = _updatedUserId;
			newSeance.Active = _active;
			newSeance.Deleted = _deleted;
			return newSeance;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SeanceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 SeanceId
		{
			get
			{
				return this.entityData.SeanceId; 
			}
			
			set
			{
				if (this.entityData.SeanceId == value)
					return;
				
                OnPropertyChanging("SeanceId");                    
				OnColumnChanging(SeanceColumn.SeanceId, this.entityData.SeanceId);
				this.entityData.SeanceId = value;
				this.EntityId.SeanceId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeanceColumn.SeanceId, this.entityData.SeanceId);
				OnPropertyChanged("SeanceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClientId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ClientId
		{
			get
			{
				return this.entityData.ClientId; 
			}
			
			set
			{
				if (this.entityData.ClientId == value)
					return;
				
                OnPropertyChanging("ClientId");                    
				OnColumnChanging(SeanceColumn.ClientId, this.entityData.ClientId);
				this.entityData.ClientId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeanceColumn.ClientId, this.entityData.ClientId);
				OnPropertyChanged("ClientId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdvisorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 AdvisorId
		{
			get
			{
				return this.entityData.AdvisorId; 
			}
			
			set
			{
				if (this.entityData.AdvisorId == value)
					return;
				
                OnPropertyChanging("AdvisorId");                    
				OnColumnChanging(SeanceColumn.AdvisorId, this.entityData.AdvisorId);
				this.entityData.AdvisorId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeanceColumn.AdvisorId, this.entityData.AdvisorId);
				OnPropertyChanged("AdvisorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeanceDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? SeanceDate
		{
			get
			{
				return this.entityData.SeanceDate; 
			}
			
			set
			{
				if (this.entityData.SeanceDate == value)
					return;
				
                OnPropertyChanging("SeanceDate");                    
				OnColumnChanging(SeanceColumn.SeanceDate, this.entityData.SeanceDate);
				this.entityData.SeanceDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeanceColumn.SeanceDate, this.entityData.SeanceDate);
				OnPropertyChanged("SeanceDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeanceTime property. 
		///		
		/// </summary>
		/// <value>This type is time.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.TimeSpan? SeanceTime
		{
			get
			{
				return this.entityData.SeanceTime; 
			}
			
			set
			{
				if (this.entityData.SeanceTime == value)
					return;
				
                OnPropertyChanging("SeanceTime");                    
				OnColumnChanging(SeanceColumn.SeanceTime, this.entityData.SeanceTime);
				this.entityData.SeanceTime = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeanceColumn.SeanceTime, this.entityData.SeanceTime);
				OnPropertyChanged("SeanceTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
				
                OnPropertyChanging("Notes");                    
				OnColumnChanging(SeanceColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeanceColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeanceStatusId property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte SeanceStatusId
		{
			get
			{
				return this.entityData.SeanceStatusId; 
			}
			
			set
			{
				if (this.entityData.SeanceStatusId == value)
					return;
				
                OnPropertyChanging("SeanceStatusId");                    
				OnColumnChanging(SeanceColumn.SeanceStatusId, this.entityData.SeanceStatusId);
				this.entityData.SeanceStatusId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeanceColumn.SeanceStatusId, this.entityData.SeanceStatusId);
				OnPropertyChanged("SeanceStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
				
                OnPropertyChanging("CreateDate");                    
				OnColumnChanging(SeanceColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeanceColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
				
                OnPropertyChanging("UpdateDate");                    
				OnColumnChanging(SeanceColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeanceColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreatedUserId
		{
			get
			{
				return this.entityData.CreatedUserId; 
			}
			
			set
			{
				if (this.entityData.CreatedUserId == value)
					return;
				
                OnPropertyChanging("CreatedUserId");                    
				OnColumnChanging(SeanceColumn.CreatedUserId, this.entityData.CreatedUserId);
				this.entityData.CreatedUserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeanceColumn.CreatedUserId, this.entityData.CreatedUserId);
				OnPropertyChanged("CreatedUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UpdatedUserId
		{
			get
			{
				return this.entityData.UpdatedUserId; 
			}
			
			set
			{
				if (this.entityData.UpdatedUserId == value)
					return;
				
                OnPropertyChanging("UpdatedUserId");                    
				OnColumnChanging(SeanceColumn.UpdatedUserId, this.entityData.UpdatedUserId);
				this.entityData.UpdatedUserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeanceColumn.UpdatedUserId, this.entityData.UpdatedUserId);
				OnPropertyChanged("UpdatedUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Active property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Active
		{
			get
			{
				return this.entityData.Active; 
			}
			
			set
			{
				if (this.entityData.Active == value)
					return;
				
                OnPropertyChanging("Active");                    
				OnColumnChanging(SeanceColumn.Active, this.entityData.Active);
				this.entityData.Active = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeanceColumn.Active, this.entityData.Active);
				OnPropertyChanged("Active");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Deleted property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Deleted
		{
			get
			{
				return this.entityData.Deleted; 
			}
			
			set
			{
				if (this.entityData.Deleted == value)
					return;
				
                OnPropertyChanging("Deleted");                    
				OnColumnChanging(SeanceColumn.Deleted, this.entityData.Deleted);
				this.entityData.Deleted = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeanceColumn.Deleted, this.entityData.Deleted);
				OnPropertyChanged("Deleted");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Client"/>.
		/// </summary>
		/// <value>The source Client for ClientId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Client ClientIdSource
      	{
            get { return entityData.ClientIdSource; }
            set { entityData.ClientIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SeanceReason objects
		///	which are related to this object through the relation FK_Seance_Reason_Seance
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeanceReason> SeanceReasonCollection
		{
			get { return entityData.SeanceReasonCollection; }
			set { entityData.SeanceReasonCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Seance"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SeanceId", "ClientId", "AdvisorId", "SeanceDate", "SeanceTime", "Notes", "SeanceStatusId", "CreateDate", "UpdateDate", "CreatedUserId", "UpdatedUserId", "Active", "Deleted"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SeanceEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Seance) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Seance>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Seance);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Seance Entity 
		///</summary>
		protected virtual Seance Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Seance copy = new Seance();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SeanceId = this.SeanceId;
				copy.ClientId = this.ClientId;
				copy.AdvisorId = this.AdvisorId;
				copy.SeanceDate = this.SeanceDate;
				copy.SeanceTime = this.SeanceTime;
				copy.Notes = this.Notes;
				copy.SeanceStatusId = this.SeanceStatusId;
				copy.CreateDate = this.CreateDate;
				copy.UpdateDate = this.UpdateDate;
				copy.CreatedUserId = this.CreatedUserId;
				copy.UpdatedUserId = this.UpdatedUserId;
				copy.Active = this.Active;
				copy.Deleted = this.Deleted;
			
			if (this.ClientIdSource != null && existingCopies.Contains(this.ClientIdSource))
				copy.ClientIdSource = existingCopies[this.ClientIdSource] as Client;
			else
				copy.ClientIdSource = MakeCopyOf(this.ClientIdSource, existingCopies) as Client;
		
			//deep copy nested objects
			copy.SeanceReasonCollection = (TList<SeanceReason>) MakeCopyOf(this.SeanceReasonCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Seance Entity 
		///</summary>
		public virtual Seance Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Seance Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Seance DeepCopy()
		{
			return EntityHelper.Clone<Seance>(this as Seance);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SeanceEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SeanceEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SeanceEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SeanceColumn column)
		{
			switch(column)
			{
					case SeanceColumn.SeanceId:
					return entityData.SeanceId != _originalData.SeanceId;
					case SeanceColumn.ClientId:
					return entityData.ClientId != _originalData.ClientId;
					case SeanceColumn.AdvisorId:
					return entityData.AdvisorId != _originalData.AdvisorId;
					case SeanceColumn.SeanceDate:
					return entityData.SeanceDate != _originalData.SeanceDate;
					case SeanceColumn.SeanceTime:
					return entityData.SeanceTime != _originalData.SeanceTime;
					case SeanceColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case SeanceColumn.SeanceStatusId:
					return entityData.SeanceStatusId != _originalData.SeanceStatusId;
					case SeanceColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case SeanceColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
					case SeanceColumn.CreatedUserId:
					return entityData.CreatedUserId != _originalData.CreatedUserId;
					case SeanceColumn.UpdatedUserId:
					return entityData.UpdatedUserId != _originalData.UpdatedUserId;
					case SeanceColumn.Active:
					return entityData.Active != _originalData.Active;
					case SeanceColumn.Deleted:
					return entityData.Deleted != _originalData.Deleted;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SeanceColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SeanceId != _originalData.SeanceId;
			result = result || entityData.ClientId != _originalData.ClientId;
			result = result || entityData.AdvisorId != _originalData.AdvisorId;
			result = result || entityData.SeanceDate != _originalData.SeanceDate;
			result = result || entityData.SeanceTime != _originalData.SeanceTime;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SeanceStatusId != _originalData.SeanceStatusId;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			result = result || entityData.CreatedUserId != _originalData.CreatedUserId;
			result = result || entityData.UpdatedUserId != _originalData.UpdatedUserId;
			result = result || entityData.Active != _originalData.Active;
			result = result || entityData.Deleted != _originalData.Deleted;
			return result;
		}	
		
		///<summary>
		///  Returns a Seance Entity with the original data.
		///</summary>
		public Seance GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSeance(
				_originalData.ClientId,
				_originalData.AdvisorId,
				_originalData.SeanceDate,
				_originalData.SeanceTime,
				_originalData.Notes,
				_originalData.SeanceStatusId,
				_originalData.CreateDate,
				_originalData.UpdateDate,
				_originalData.CreatedUserId,
				_originalData.UpdatedUserId,
				_originalData.Active,
				_originalData.Deleted
				);
				
			return (Seance)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SeanceBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SeanceBase)
				return ValueEquals(this, (SeanceBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SeanceBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SeanceId.GetHashCode() ^ 
					this.ClientId.GetHashCode() ^ 
					this.AdvisorId.GetHashCode() ^ 
					((this.SeanceDate == null) ? string.Empty : this.SeanceDate.ToString()).GetHashCode() ^ 
					((this.SeanceTime == null) ? string.Empty : this.SeanceTime.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					this.SeanceStatusId.GetHashCode() ^ 
					this.CreateDate.GetHashCode() ^ 
					((this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString()).GetHashCode() ^ 
					((this.CreatedUserId == null) ? string.Empty : this.CreatedUserId.ToString()).GetHashCode() ^ 
					((this.UpdatedUserId == null) ? string.Empty : this.UpdatedUserId.ToString()).GetHashCode() ^ 
					this.Active.GetHashCode() ^ 
					this.Deleted.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SeanceBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SeanceBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SeanceBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SeanceBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SeanceBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SeanceBase Object1, SeanceBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SeanceId != Object2.SeanceId)
				equal = false;
			if (Object1.ClientId != Object2.ClientId)
				equal = false;
			if (Object1.AdvisorId != Object2.AdvisorId)
				equal = false;
			if ( Object1.SeanceDate != null && Object2.SeanceDate != null )
			{
				if (Object1.SeanceDate != Object2.SeanceDate)
					equal = false;
			}
			else if (Object1.SeanceDate == null ^ Object2.SeanceDate == null )
			{
				equal = false;
			}
			if ( Object1.SeanceTime != null && Object2.SeanceTime != null )
			{
				if (Object1.SeanceTime != Object2.SeanceTime)
					equal = false;
			}
			else if (Object1.SeanceTime == null ^ Object2.SeanceTime == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if (Object1.SeanceStatusId != Object2.SeanceStatusId)
				equal = false;
			if (Object1.CreateDate != Object2.CreateDate)
				equal = false;
			if ( Object1.UpdateDate != null && Object2.UpdateDate != null )
			{
				if (Object1.UpdateDate != Object2.UpdateDate)
					equal = false;
			}
			else if (Object1.UpdateDate == null ^ Object2.UpdateDate == null )
			{
				equal = false;
			}
			if ( Object1.CreatedUserId != null && Object2.CreatedUserId != null )
			{
				if (Object1.CreatedUserId != Object2.CreatedUserId)
					equal = false;
			}
			else if (Object1.CreatedUserId == null ^ Object2.CreatedUserId == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedUserId != null && Object2.UpdatedUserId != null )
			{
				if (Object1.UpdatedUserId != Object2.UpdatedUserId)
					equal = false;
			}
			else if (Object1.UpdatedUserId == null ^ Object2.UpdatedUserId == null )
			{
				equal = false;
			}
			if (Object1.Active != Object2.Active)
				equal = false;
			if (Object1.Deleted != Object2.Deleted)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SeanceBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SeanceComparer GetComparer()
        {
            return new SeanceComparer();
        }
        */

        // Comparer delegates back to Seance
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Seance rhs, SeanceColumn which)
        {
            switch (which)
            {
            	
            	
            	case SeanceColumn.SeanceId:
            		return this.SeanceId.CompareTo(rhs.SeanceId);
            		
            		                 
            	
            	
            	case SeanceColumn.ClientId:
            		return this.ClientId.CompareTo(rhs.ClientId);
            		
            		                 
            	
            	
            	case SeanceColumn.AdvisorId:
            		return this.AdvisorId.CompareTo(rhs.AdvisorId);
            		
            		                 
            	
            	
            	case SeanceColumn.SeanceDate:
            		return this.SeanceDate.Value.CompareTo(rhs.SeanceDate.Value);
            		
            		                 
            	
            	
            	case SeanceColumn.SeanceTime:
            		return this.SeanceTime.Value.CompareTo(rhs.SeanceTime.Value);
            		
            		                 
            	
            	
            	case SeanceColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case SeanceColumn.SeanceStatusId:
            		return this.SeanceStatusId.CompareTo(rhs.SeanceStatusId);
            		
            		                 
            	
            	
            	case SeanceColumn.CreateDate:
            		return this.CreateDate.CompareTo(rhs.CreateDate);
            		
            		                 
            	
            	
            	case SeanceColumn.UpdateDate:
            		return this.UpdateDate.Value.CompareTo(rhs.UpdateDate.Value);
            		
            		                 
            	
            	
            	case SeanceColumn.CreatedUserId:
            		return this.CreatedUserId.Value.CompareTo(rhs.CreatedUserId.Value);
            		
            		                 
            	
            	
            	case SeanceColumn.UpdatedUserId:
            		return this.UpdatedUserId.Value.CompareTo(rhs.UpdatedUserId.Value);
            		
            		                 
            	
            	
            	case SeanceColumn.Active:
            		return this.Active.CompareTo(rhs.Active);
            		
            		                 
            	
            	
            	case SeanceColumn.Deleted:
            		return this.Deleted.CompareTo(rhs.Deleted);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SeanceKey> Members
		
		// member variable for the EntityId property
		private SeanceKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SeanceKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SeanceKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Seance")
					.Append("|").Append( this.SeanceId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- SeanceId: {0}{13}- ClientId: {1}{13}- AdvisorId: {2}{13}- SeanceDate: {3}{13}- SeanceTime: {4}{13}- Notes: {5}{13}- SeanceStatusId: {6}{13}- CreateDate: {7}{13}- UpdateDate: {8}{13}- CreatedUserId: {9}{13}- UpdatedUserId: {10}{13}- Active: {11}{13}- Deleted: {12}{13}{15}", 
				this.SeanceId,
				this.ClientId,
				this.AdvisorId,
				(this.SeanceDate == null) ? string.Empty : this.SeanceDate.ToString(),
				(this.SeanceTime == null) ? string.Empty : this.SeanceTime.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				this.SeanceStatusId,
				this.CreateDate,
				(this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString(),
				(this.CreatedUserId == null) ? string.Empty : this.CreatedUserId.ToString(),
				(this.UpdatedUserId == null) ? string.Empty : this.UpdatedUserId.ToString(),
				this.Active,
				this.Deleted,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Seance' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	internal protected class SeanceEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SeanceId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Seance"</remarks>
		[DataMember]
		public System.Int32 SeanceId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// ClientId : 
		/// </summary>
		[DataMember]
		public System.Int32 ClientId = (int)0;
		
		/// <summary>
		/// AdvisorId : 
		/// </summary>
		[DataMember]
		public System.Int32 AdvisorId = (int)0;
		
		/// <summary>
		/// SeanceDate : 
		/// </summary>
		[DataMember]
		public System.DateTime? SeanceDate = null;
		
		/// <summary>
		/// SeanceTime : 
		/// </summary>
		[DataMember]
		public System.TimeSpan? SeanceTime = null;
		
		/// <summary>
		/// Notes : 
		/// </summary>
		[DataMember]
		public System.String Notes = null;
		
		/// <summary>
		/// SeanceStatusId : 
		/// </summary>
		[DataMember]
		public System.Byte SeanceStatusId = (byte)0;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime CreateDate = DateTime.Now;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime? UpdateDate = null;
		
		/// <summary>
		/// CreatedUserId : 
		/// </summary>
		[DataMember]
		public System.Int32? CreatedUserId = null;
		
		/// <summary>
		/// UpdatedUserId : 
		/// </summary>
		[DataMember]
		public System.Int32? UpdatedUserId = null;
		
		/// <summary>
		/// Active : 
		/// </summary>
		[DataMember]
		public System.Boolean Active = true;
		
		/// <summary>
		/// Deleted : 
		/// </summary>
		[DataMember]
		public System.Boolean Deleted = false;
		#endregion
			
		#region Source Foreign Key Property
				
		private Client _clientIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Client"/>.
		/// </summary>
		/// <value>The source Client for ClientId.</value>
		[DataMember]
		[Browsable(false)]
		public virtual Client ClientIdSource
      	{
            get { return this._clientIdSource; }
            set { this._clientIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region SeanceReasonCollection
		
		private TList<SeanceReason> _seanceReasonSeanceId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seanceReasonSeanceId
		/// </summary>
		[DataMember]
		public TList<SeanceReason> SeanceReasonCollection
		{
			get
			{
				if (_seanceReasonSeanceId == null)
				{
				_seanceReasonSeanceId = new TList<SeanceReason>();
				}
	
				return _seanceReasonSeanceId;
			}
			set { _seanceReasonSeanceId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SeanceEntityData _tmp = new SeanceEntityData();
						
			_tmp.SeanceId = this.SeanceId;
			
			_tmp.ClientId = this.ClientId;
			_tmp.AdvisorId = this.AdvisorId;
			_tmp.SeanceDate = this.SeanceDate;
			_tmp.SeanceTime = this.SeanceTime;
			_tmp.Notes = this.Notes;
			_tmp.SeanceStatusId = this.SeanceStatusId;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.CreatedUserId = this.CreatedUserId;
			_tmp.UpdatedUserId = this.UpdatedUserId;
			_tmp.Active = this.Active;
			_tmp.Deleted = this.Deleted;
			
			#region Source Parent Composite Entities
			if (this.ClientIdSource != null)
				_tmp.ClientIdSource = MakeCopyOf(this.ClientIdSource) as Client;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._seanceReasonSeanceId != null)
				_tmp.SeanceReasonCollection = (TList<SeanceReason>) MakeCopyOf(this.SeanceReasonCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SeanceEntityData _tmp = new SeanceEntityData();
						
			_tmp.SeanceId = this.SeanceId;
			
			_tmp.ClientId = this.ClientId;
			_tmp.AdvisorId = this.AdvisorId;
			_tmp.SeanceDate = this.SeanceDate;
			_tmp.SeanceTime = this.SeanceTime;
			_tmp.Notes = this.Notes;
			_tmp.SeanceStatusId = this.SeanceStatusId;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.CreatedUserId = this.CreatedUserId;
			_tmp.UpdatedUserId = this.UpdatedUserId;
			_tmp.Active = this.Active;
			_tmp.Deleted = this.Deleted;
			
			#region Source Parent Composite Entities
			if (this.ClientIdSource != null && existingCopies.Contains(this.ClientIdSource))
				_tmp.ClientIdSource = existingCopies[this.ClientIdSource] as Client;
			else
				_tmp.ClientIdSource = MakeCopyOf(this.ClientIdSource, existingCopies) as Client;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SeanceReasonCollection = (TList<SeanceReason>) MakeCopyOf(this.SeanceReasonCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		[DataMember]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new SeanceEntityData();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeanceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SeanceColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeanceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SeanceColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeanceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SeanceColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				SeanceEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SeanceEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeanceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SeanceColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SeanceEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SeanceEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SeanceEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Seance"/> object.
	/// </remarks>
	public class SeanceEventArgs : System.EventArgs
	{
		private SeanceColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SeanceEventArgs class.
		///</summary>
		public SeanceEventArgs(SeanceColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SeanceEventArgs class.
		///</summary>
		public SeanceEventArgs(SeanceColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SeanceColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SeanceColumn" />
		public SeanceColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Seance related events.
	///</summary>
	public delegate void SeanceEventHandler(object sender, SeanceEventArgs e);
	
	#region SeanceComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SeanceComparer : System.Collections.Generic.IComparer<Seance>
	{
		SeanceColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SeanceComparer"/> class.
        /// </summary>
		public SeanceComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SeanceComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SeanceComparer(SeanceColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Seance"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Seance"/> to compare.</param>
        /// <param name="b">The second <c>Seance</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Seance a, Seance b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Seance entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Seance a, Seance b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SeanceColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SeanceKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Seance"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SeanceKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SeanceKey class.
		/// </summary>
		public SeanceKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SeanceKey class.
		/// </summary>
		public SeanceKey(SeanceBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SeanceId = entity.SeanceId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SeanceKey class.
		/// </summary>
		public SeanceKey(System.Int32 _seanceId)
		{
			#region Init Properties

			this.SeanceId = _seanceId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SeanceBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SeanceBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SeanceId property
		private System.Int32 _seanceId;
		
		/// <summary>
		/// Gets or sets the SeanceId property.
		/// </summary>
		public System.Int32 SeanceId
		{
			get { return _seanceId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SeanceId = value;
				
				_seanceId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SeanceId = ( values["SeanceId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["SeanceId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SeanceId", SeanceId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SeanceId: {0}{1}",
								SeanceId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SeanceColumn Enum
	
	/// <summary>
	/// Enumerate the Seance columns.
	/// </summary>
	[Serializable]
	public enum SeanceColumn : int
	{
		/// <summary>
		/// SeanceId : 
		/// </summary>
		[EnumTextValue("Seance Id")]
		[ColumnEnum("SeanceId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		SeanceId = 1,
		/// <summary>
		/// ClientId : 
		/// </summary>
		[EnumTextValue("Client Id")]
		[ColumnEnum("ClientId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ClientId = 2,
		/// <summary>
		/// AdvisorId : 
		/// </summary>
		[EnumTextValue("Advisor Id")]
		[ColumnEnum("AdvisorId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AdvisorId = 3,
		/// <summary>
		/// SeanceDate : 
		/// </summary>
		[EnumTextValue("Seance Date")]
		[ColumnEnum("SeanceDate", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		SeanceDate = 4,
		/// <summary>
		/// SeanceTime : 
		/// </summary>
		[EnumTextValue("Seance Time")]
		[ColumnEnum("SeanceTime", typeof(System.TimeSpan), System.Data.DbType.Time, false, false, true)]
		SeanceTime = 5,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("Notes")]
		[ColumnEnum("Notes", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Notes = 6,
		/// <summary>
		/// SeanceStatusId : 
		/// </summary>
		[EnumTextValue("Seance Status Id")]
		[ColumnEnum("SeanceStatusId", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		SeanceStatusId = 7,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("Create Date")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDate = 8,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("Update Date")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateDate = 9,
		/// <summary>
		/// CreatedUserId : 
		/// </summary>
		[EnumTextValue("Created User Id")]
		[ColumnEnum("CreatedUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreatedUserId = 10,
		/// <summary>
		/// UpdatedUserId : 
		/// </summary>
		[EnumTextValue("Updated User Id")]
		[ColumnEnum("UpdatedUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UpdatedUserId = 11,
		/// <summary>
		/// Active : 
		/// </summary>
		[EnumTextValue("Active")]
		[ColumnEnum("Active", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Active = 12,
		/// <summary>
		/// Deleted : 
		/// </summary>
		[EnumTextValue("Deleted")]
		[ColumnEnum("Deleted", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Deleted = 13
	}//End enum

	#endregion SeanceColumn Enum

} // end namespace
