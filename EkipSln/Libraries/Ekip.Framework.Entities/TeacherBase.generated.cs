
/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 5 Şubat 2019 Salı
	Important: Do not modify this file. Edit the file Teacher.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Ekip.Framework.Entities.Validation;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'Teacher' table. [No description found the database]	
	///</summary>
	[DataContract]
	[DataObject, CLSCompliant(true)]
	public abstract partial class TeacherBase : EntityBase, ITeacher, IEntityId<TeacherKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		[DataMember]
		private TeacherEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		[DataMember]
		private TeacherEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private TeacherEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		private TList<Teacher> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		public event TeacherEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		public event TeacherEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TeacherBase"/> instance.
		///</summary>
		public TeacherBase()
		{
			this.entityData = new TeacherEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TeacherBase"/> instance.
		///</summary>
		///<param name="_schoolId"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_phone"></param>
		///<param name="_gsm"></param>
		///<param name="_email"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_createUserId"></param>
		///<param name="_updateUserId"></param>
		///<param name="_active"></param>
		///<param name="_deleted"></param>
		public TeacherBase(System.Int32 _schoolId, System.String _firstName, System.String _lastName, 
			System.String _phone, System.String _gsm, System.String _email, System.DateTime _createDate, System.DateTime? _updateDate, 
			System.Int32 _createUserId, System.Int32? _updateUserId, System.Boolean _active, System.Boolean _deleted)
		{
			this.entityData = new TeacherEntityData();
			this.backupData = null;

			this.SchoolId = _schoolId;
			this.FirstName = _firstName;
			this.LastName = _lastName;
			this.Phone = _phone;
			this.Gsm = _gsm;
			this.Email = _email;
			this.CreateDate = _createDate;
			this.UpdateDate = _updateDate;
			this.CreateUserId = _createUserId;
			this.UpdateUserId = _updateUserId;
			this.Active = _active;
			this.Deleted = _deleted;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Teacher"/> instance.
		///</summary>
		///<param name="_schoolId"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_phone"></param>
		///<param name="_gsm"></param>
		///<param name="_email"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_createUserId"></param>
		///<param name="_updateUserId"></param>
		///<param name="_active"></param>
		///<param name="_deleted"></param>
		public static Teacher CreateTeacher(System.Int32 _schoolId, System.String _firstName, System.String _lastName, 
			System.String _phone, System.String _gsm, System.String _email, System.DateTime _createDate, System.DateTime? _updateDate, 
			System.Int32 _createUserId, System.Int32? _updateUserId, System.Boolean _active, System.Boolean _deleted)
		{
			Teacher newTeacher = new Teacher();
			newTeacher.SchoolId = _schoolId;
			newTeacher.FirstName = _firstName;
			newTeacher.LastName = _lastName;
			newTeacher.Phone = _phone;
			newTeacher.Gsm = _gsm;
			newTeacher.Email = _email;
			newTeacher.CreateDate = _createDate;
			newTeacher.UpdateDate = _updateDate;
			newTeacher.CreateUserId = _createUserId;
			newTeacher.UpdateUserId = _updateUserId;
			newTeacher.Active = _active;
			newTeacher.Deleted = _deleted;
			return newTeacher;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the TeacherId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 TeacherId
		{
			get
			{
				return this.entityData.TeacherId; 
			}
			
			set
			{
				if (this.entityData.TeacherId == value)
					return;
				
                OnPropertyChanging("TeacherId");                    
				OnColumnChanging(TeacherColumn.TeacherId, this.entityData.TeacherId);
				this.entityData.TeacherId = value;
				this.EntityId.TeacherId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TeacherColumn.TeacherId, this.entityData.TeacherId);
				OnPropertyChanged("TeacherId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SchoolId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SchoolId
		{
			get
			{
				return this.entityData.SchoolId; 
			}
			
			set
			{
				if (this.entityData.SchoolId == value)
					return;
				
                OnPropertyChanging("SchoolId");                    
				OnColumnChanging(TeacherColumn.SchoolId, this.entityData.SchoolId);
				this.entityData.SchoolId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TeacherColumn.SchoolId, this.entityData.SchoolId);
				OnPropertyChanged("SchoolId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
				
                OnPropertyChanging("FirstName");                    
				OnColumnChanging(TeacherColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TeacherColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String LastName
		{
			get
			{
				return this.entityData.LastName; 
			}
			
			set
			{
				if (this.entityData.LastName == value)
					return;
				
                OnPropertyChanging("LastName");                    
				OnColumnChanging(TeacherColumn.LastName, this.entityData.LastName);
				this.entityData.LastName = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TeacherColumn.LastName, this.entityData.LastName);
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
				
                OnPropertyChanging("Phone");                    
				OnColumnChanging(TeacherColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TeacherColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Gsm property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Gsm
		{
			get
			{
				return this.entityData.Gsm; 
			}
			
			set
			{
				if (this.entityData.Gsm == value)
					return;
				
                OnPropertyChanging("Gsm");                    
				OnColumnChanging(TeacherColumn.Gsm, this.entityData.Gsm);
				this.entityData.Gsm = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TeacherColumn.Gsm, this.entityData.Gsm);
				OnPropertyChanged("Gsm");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
				
                OnPropertyChanging("Email");                    
				OnColumnChanging(TeacherColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TeacherColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
				
                OnPropertyChanging("CreateDate");                    
				OnColumnChanging(TeacherColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TeacherColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
				
                OnPropertyChanging("UpdateDate");                    
				OnColumnChanging(TeacherColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TeacherColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CreateUserId
		{
			get
			{
				return this.entityData.CreateUserId; 
			}
			
			set
			{
				if (this.entityData.CreateUserId == value)
					return;
				
                OnPropertyChanging("CreateUserId");                    
				OnColumnChanging(TeacherColumn.CreateUserId, this.entityData.CreateUserId);
				this.entityData.CreateUserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TeacherColumn.CreateUserId, this.entityData.CreateUserId);
				OnPropertyChanged("CreateUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UpdateUserId
		{
			get
			{
				return this.entityData.UpdateUserId; 
			}
			
			set
			{
				if (this.entityData.UpdateUserId == value)
					return;
				
                OnPropertyChanging("UpdateUserId");                    
				OnColumnChanging(TeacherColumn.UpdateUserId, this.entityData.UpdateUserId);
				this.entityData.UpdateUserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TeacherColumn.UpdateUserId, this.entityData.UpdateUserId);
				OnPropertyChanged("UpdateUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Active property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Active
		{
			get
			{
				return this.entityData.Active; 
			}
			
			set
			{
				if (this.entityData.Active == value)
					return;
				
                OnPropertyChanging("Active");                    
				OnColumnChanging(TeacherColumn.Active, this.entityData.Active);
				this.entityData.Active = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TeacherColumn.Active, this.entityData.Active);
				OnPropertyChanged("Active");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Deleted property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Deleted
		{
			get
			{
				return this.entityData.Deleted; 
			}
			
			set
			{
				if (this.entityData.Deleted == value)
					return;
				
                OnPropertyChanging("Deleted");                    
				OnColumnChanging(TeacherColumn.Deleted, this.entityData.Deleted);
				this.entityData.Deleted = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TeacherColumn.Deleted, this.entityData.Deleted);
				OnPropertyChanged("Deleted");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="School"/>.
		/// </summary>
		/// <value>The source School for SchoolId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual School SchoolIdSource
      	{
            get { return entityData.SchoolIdSource; }
            set { entityData.SchoolIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FirstName", "First Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LastName", "Last Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phone", "Phone", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Gsm", "Gsm", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Teacher"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"TeacherId", "SchoolId", "FirstName", "LastName", "Phone", "Gsm", "Email", "CreateDate", "UpdateDate", "CreateUserId", "UpdateUserId", "Active", "Deleted"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TeacherEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Teacher) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Teacher>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Teacher);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Teacher Entity 
		///</summary>
		protected virtual Teacher Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Teacher copy = new Teacher();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.TeacherId = this.TeacherId;
				copy.SchoolId = this.SchoolId;
				copy.FirstName = this.FirstName;
				copy.LastName = this.LastName;
				copy.Phone = this.Phone;
				copy.Gsm = this.Gsm;
				copy.Email = this.Email;
				copy.CreateDate = this.CreateDate;
				copy.UpdateDate = this.UpdateDate;
				copy.CreateUserId = this.CreateUserId;
				copy.UpdateUserId = this.UpdateUserId;
				copy.Active = this.Active;
				copy.Deleted = this.Deleted;
			
			if (this.SchoolIdSource != null && existingCopies.Contains(this.SchoolIdSource))
				copy.SchoolIdSource = existingCopies[this.SchoolIdSource] as School;
			else
				copy.SchoolIdSource = MakeCopyOf(this.SchoolIdSource, existingCopies) as School;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Teacher Entity 
		///</summary>
		public virtual Teacher Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Teacher Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Teacher DeepCopy()
		{
			return EntityHelper.Clone<Teacher>(this as Teacher);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as TeacherEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new TeacherEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as TeacherEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(TeacherColumn column)
		{
			switch(column)
			{
					case TeacherColumn.TeacherId:
					return entityData.TeacherId != _originalData.TeacherId;
					case TeacherColumn.SchoolId:
					return entityData.SchoolId != _originalData.SchoolId;
					case TeacherColumn.FirstName:
					return entityData.FirstName != _originalData.FirstName;
					case TeacherColumn.LastName:
					return entityData.LastName != _originalData.LastName;
					case TeacherColumn.Phone:
					return entityData.Phone != _originalData.Phone;
					case TeacherColumn.Gsm:
					return entityData.Gsm != _originalData.Gsm;
					case TeacherColumn.Email:
					return entityData.Email != _originalData.Email;
					case TeacherColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case TeacherColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
					case TeacherColumn.CreateUserId:
					return entityData.CreateUserId != _originalData.CreateUserId;
					case TeacherColumn.UpdateUserId:
					return entityData.UpdateUserId != _originalData.UpdateUserId;
					case TeacherColumn.Active:
					return entityData.Active != _originalData.Active;
					case TeacherColumn.Deleted:
					return entityData.Deleted != _originalData.Deleted;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< TeacherColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.TeacherId != _originalData.TeacherId;
			result = result || entityData.SchoolId != _originalData.SchoolId;
			result = result || entityData.FirstName != _originalData.FirstName;
			result = result || entityData.LastName != _originalData.LastName;
			result = result || entityData.Phone != _originalData.Phone;
			result = result || entityData.Gsm != _originalData.Gsm;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			result = result || entityData.CreateUserId != _originalData.CreateUserId;
			result = result || entityData.UpdateUserId != _originalData.UpdateUserId;
			result = result || entityData.Active != _originalData.Active;
			result = result || entityData.Deleted != _originalData.Deleted;
			return result;
		}	
		
		///<summary>
		///  Returns a Teacher Entity with the original data.
		///</summary>
		public Teacher GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateTeacher(
				_originalData.SchoolId,
				_originalData.FirstName,
				_originalData.LastName,
				_originalData.Phone,
				_originalData.Gsm,
				_originalData.Email,
				_originalData.CreateDate,
				_originalData.UpdateDate,
				_originalData.CreateUserId,
				_originalData.UpdateUserId,
				_originalData.Active,
				_originalData.Deleted
				);
				
			return (Teacher)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="TeacherBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is TeacherBase)
				return ValueEquals(this, (TeacherBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="TeacherBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.TeacherId.GetHashCode() ^ 
					this.SchoolId.GetHashCode() ^ 
					((this.FirstName == null) ? string.Empty : this.FirstName.ToString()).GetHashCode() ^ 
					((this.LastName == null) ? string.Empty : this.LastName.ToString()).GetHashCode() ^ 
					((this.Phone == null) ? string.Empty : this.Phone.ToString()).GetHashCode() ^ 
					((this.Gsm == null) ? string.Empty : this.Gsm.ToString()).GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					this.CreateDate.GetHashCode() ^ 
					((this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString()).GetHashCode() ^ 
					this.CreateUserId.GetHashCode() ^ 
					((this.UpdateUserId == null) ? string.Empty : this.UpdateUserId.ToString()).GetHashCode() ^ 
					this.Active.GetHashCode() ^ 
					this.Deleted.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TeacherBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TeacherBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="TeacherBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="TeacherBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TeacherBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(TeacherBase Object1, TeacherBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.TeacherId != Object2.TeacherId)
				equal = false;
			if (Object1.SchoolId != Object2.SchoolId)
				equal = false;
			if ( Object1.FirstName != null && Object2.FirstName != null )
			{
				if (Object1.FirstName != Object2.FirstName)
					equal = false;
			}
			else if (Object1.FirstName == null ^ Object2.FirstName == null )
			{
				equal = false;
			}
			if ( Object1.LastName != null && Object2.LastName != null )
			{
				if (Object1.LastName != Object2.LastName)
					equal = false;
			}
			else if (Object1.LastName == null ^ Object2.LastName == null )
			{
				equal = false;
			}
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
			if ( Object1.Gsm != null && Object2.Gsm != null )
			{
				if (Object1.Gsm != Object2.Gsm)
					equal = false;
			}
			else if (Object1.Gsm == null ^ Object2.Gsm == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if (Object1.CreateDate != Object2.CreateDate)
				equal = false;
			if ( Object1.UpdateDate != null && Object2.UpdateDate != null )
			{
				if (Object1.UpdateDate != Object2.UpdateDate)
					equal = false;
			}
			else if (Object1.UpdateDate == null ^ Object2.UpdateDate == null )
			{
				equal = false;
			}
			if (Object1.CreateUserId != Object2.CreateUserId)
				equal = false;
			if ( Object1.UpdateUserId != null && Object2.UpdateUserId != null )
			{
				if (Object1.UpdateUserId != Object2.UpdateUserId)
					equal = false;
			}
			else if (Object1.UpdateUserId == null ^ Object2.UpdateUserId == null )
			{
				equal = false;
			}
			if (Object1.Active != Object2.Active)
				equal = false;
			if (Object1.Deleted != Object2.Deleted)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((TeacherBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static TeacherComparer GetComparer()
        {
            return new TeacherComparer();
        }
        */

        // Comparer delegates back to Teacher
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Teacher rhs, TeacherColumn which)
        {
            switch (which)
            {
            	
            	
            	case TeacherColumn.TeacherId:
            		return this.TeacherId.CompareTo(rhs.TeacherId);
            		
            		                 
            	
            	
            	case TeacherColumn.SchoolId:
            		return this.SchoolId.CompareTo(rhs.SchoolId);
            		
            		                 
            	
            	
            	case TeacherColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case TeacherColumn.LastName:
            		return this.LastName.CompareTo(rhs.LastName);
            		
            		                 
            	
            	
            	case TeacherColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            	
            	
            	case TeacherColumn.Gsm:
            		return this.Gsm.CompareTo(rhs.Gsm);
            		
            		                 
            	
            	
            	case TeacherColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case TeacherColumn.CreateDate:
            		return this.CreateDate.CompareTo(rhs.CreateDate);
            		
            		                 
            	
            	
            	case TeacherColumn.UpdateDate:
            		return this.UpdateDate.Value.CompareTo(rhs.UpdateDate.Value);
            		
            		                 
            	
            	
            	case TeacherColumn.CreateUserId:
            		return this.CreateUserId.CompareTo(rhs.CreateUserId);
            		
            		                 
            	
            	
            	case TeacherColumn.UpdateUserId:
            		return this.UpdateUserId.Value.CompareTo(rhs.UpdateUserId.Value);
            		
            		                 
            	
            	
            	case TeacherColumn.Active:
            		return this.Active.CompareTo(rhs.Active);
            		
            		                 
            	
            	
            	case TeacherColumn.Deleted:
            		return this.Deleted.CompareTo(rhs.Deleted);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TeacherKey> Members
		
		// member variable for the EntityId property
		private TeacherKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual TeacherKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TeacherKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Teacher")
					.Append("|").Append( this.TeacherId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- TeacherId: {0}{13}- SchoolId: {1}{13}- FirstName: {2}{13}- LastName: {3}{13}- Phone: {4}{13}- Gsm: {5}{13}- Email: {6}{13}- CreateDate: {7}{13}- UpdateDate: {8}{13}- CreateUserId: {9}{13}- UpdateUserId: {10}{13}- Active: {11}{13}- Deleted: {12}{13}{15}", 
				this.TeacherId,
				this.SchoolId,
				(this.FirstName == null) ? string.Empty : this.FirstName.ToString(),
				(this.LastName == null) ? string.Empty : this.LastName.ToString(),
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				(this.Gsm == null) ? string.Empty : this.Gsm.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				this.CreateDate,
				(this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString(),
				this.CreateUserId,
				(this.UpdateUserId == null) ? string.Empty : this.UpdateUserId.ToString(),
				this.Active,
				this.Deleted,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Teacher' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	internal protected class TeacherEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// TeacherId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Teacher"</remarks>
		[DataMember]
		public System.Int32 TeacherId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// SchoolId : 
		/// </summary>
		[DataMember]
		public System.Int32 SchoolId = (int)0;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		[DataMember]
		public System.String FirstName = null;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		[DataMember]
		public System.String LastName = null;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		[DataMember]
		public System.String Phone = null;
		
		/// <summary>
		/// Gsm : 
		/// </summary>
		[DataMember]
		public System.String Gsm = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		[DataMember]
		public System.String Email = null;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime CreateDate = DateTime.Now;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime? UpdateDate = null;
		
		/// <summary>
		/// CreateUserId : 
		/// </summary>
		[DataMember]
		public System.Int32 CreateUserId = (int)0;
		
		/// <summary>
		/// UpdateUserId : 
		/// </summary>
		[DataMember]
		public System.Int32? UpdateUserId = null;
		
		/// <summary>
		/// Active : 
		/// </summary>
		[DataMember]
		public System.Boolean Active = true;
		
		/// <summary>
		/// Deleted : 
		/// </summary>
		[DataMember]
		public System.Boolean Deleted = false;
		#endregion
			
		#region Source Foreign Key Property
				
		private School _schoolIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="School"/>.
		/// </summary>
		/// <value>The source School for SchoolId.</value>
		[DataMember]
		[Browsable(false)]
		public virtual School SchoolIdSource
      	{
            get { return this._schoolIdSource; }
            set { this._schoolIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			TeacherEntityData _tmp = new TeacherEntityData();
						
			_tmp.TeacherId = this.TeacherId;
			
			_tmp.SchoolId = this.SchoolId;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.Phone = this.Phone;
			_tmp.Gsm = this.Gsm;
			_tmp.Email = this.Email;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.CreateUserId = this.CreateUserId;
			_tmp.UpdateUserId = this.UpdateUserId;
			_tmp.Active = this.Active;
			_tmp.Deleted = this.Deleted;
			
			#region Source Parent Composite Entities
			if (this.SchoolIdSource != null)
				_tmp.SchoolIdSource = MakeCopyOf(this.SchoolIdSource) as School;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			TeacherEntityData _tmp = new TeacherEntityData();
						
			_tmp.TeacherId = this.TeacherId;
			
			_tmp.SchoolId = this.SchoolId;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.Phone = this.Phone;
			_tmp.Gsm = this.Gsm;
			_tmp.Email = this.Email;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.CreateUserId = this.CreateUserId;
			_tmp.UpdateUserId = this.UpdateUserId;
			_tmp.Active = this.Active;
			_tmp.Deleted = this.Deleted;
			
			#region Source Parent Composite Entities
			if (this.SchoolIdSource != null && existingCopies.Contains(this.SchoolIdSource))
				_tmp.SchoolIdSource = existingCopies[this.SchoolIdSource] as School;
			else
				_tmp.SchoolIdSource = MakeCopyOf(this.SchoolIdSource, existingCopies) as School;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		[DataMember]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new TeacherEntityData();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TeacherColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(TeacherColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TeacherColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(TeacherColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TeacherColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(TeacherColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				TeacherEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TeacherEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TeacherColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(TeacherColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TeacherEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TeacherEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region TeacherEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Teacher"/> object.
	/// </remarks>
	public class TeacherEventArgs : System.EventArgs
	{
		private TeacherColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the TeacherEventArgs class.
		///</summary>
		public TeacherEventArgs(TeacherColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TeacherEventArgs class.
		///</summary>
		public TeacherEventArgs(TeacherColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The TeacherColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TeacherColumn" />
		public TeacherColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Teacher related events.
	///</summary>
	public delegate void TeacherEventHandler(object sender, TeacherEventArgs e);
	
	#region TeacherComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TeacherComparer : System.Collections.Generic.IComparer<Teacher>
	{
		TeacherColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TeacherComparer"/> class.
        /// </summary>
		public TeacherComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:TeacherComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TeacherComparer(TeacherColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Teacher"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Teacher"/> to compare.</param>
        /// <param name="b">The second <c>Teacher</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Teacher a, Teacher b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Teacher entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Teacher a, Teacher b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TeacherColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TeacherKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Teacher"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TeacherKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TeacherKey class.
		/// </summary>
		public TeacherKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TeacherKey class.
		/// </summary>
		public TeacherKey(TeacherBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.TeacherId = entity.TeacherId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TeacherKey class.
		/// </summary>
		public TeacherKey(System.Int32 _teacherId)
		{
			#region Init Properties

			this.TeacherId = _teacherId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TeacherBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TeacherBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the TeacherId property
		private System.Int32 _teacherId;
		
		/// <summary>
		/// Gets or sets the TeacherId property.
		/// </summary>
		public System.Int32 TeacherId
		{
			get { return _teacherId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.TeacherId = value;
				
				_teacherId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				TeacherId = ( values["TeacherId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["TeacherId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("TeacherId", TeacherId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("TeacherId: {0}{1}",
								TeacherId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TeacherColumn Enum
	
	/// <summary>
	/// Enumerate the Teacher columns.
	/// </summary>
	[Serializable]
	public enum TeacherColumn : int
	{
		/// <summary>
		/// TeacherId : 
		/// </summary>
		[EnumTextValue("Teacher Id")]
		[ColumnEnum("TeacherId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		TeacherId = 1,
		/// <summary>
		/// SchoolId : 
		/// </summary>
		[EnumTextValue("School Id")]
		[ColumnEnum("SchoolId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SchoolId = 2,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("First Name")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		FirstName = 3,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("Last Name")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		LastName = 4,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 15)]
		Phone = 5,
		/// <summary>
		/// Gsm : 
		/// </summary>
		[EnumTextValue("Gsm")]
		[ColumnEnum("Gsm", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 15)]
		Gsm = 6,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Email = 7,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("Create Date")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDate = 8,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("Update Date")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateDate = 9,
		/// <summary>
		/// CreateUserId : 
		/// </summary>
		[EnumTextValue("Create User Id")]
		[ColumnEnum("CreateUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CreateUserId = 10,
		/// <summary>
		/// UpdateUserId : 
		/// </summary>
		[EnumTextValue("Update User Id")]
		[ColumnEnum("UpdateUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UpdateUserId = 11,
		/// <summary>
		/// Active : 
		/// </summary>
		[EnumTextValue("Active")]
		[ColumnEnum("Active", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Active = 12,
		/// <summary>
		/// Deleted : 
		/// </summary>
		[EnumTextValue("Deleted")]
		[ColumnEnum("Deleted", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Deleted = 13
	}//End enum

	#endregion TeacherColumn Enum

} // end namespace
