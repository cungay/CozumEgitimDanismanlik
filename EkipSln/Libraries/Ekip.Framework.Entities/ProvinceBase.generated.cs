
/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 15 Ocak 2019 Salı
	Important: Do not modify this file. Edit the file Province.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Ekip.Framework.Entities.Validation;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'Province' table. [No description found the database]	
	///</summary>
	[DataContract]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ProvinceBase : EntityBase, IProvince, IEntityId<ProvinceKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		[DataMember]
		private ProvinceEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		[DataMember]
		private ProvinceEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ProvinceEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		private TList<Province> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		public event ProvinceEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		public event ProvinceEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ProvinceBase"/> instance.
		///</summary>
		public ProvinceBase()
		{
			this.entityData = new ProvinceEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ProvinceBase"/> instance.
		///</summary>
		///<param name="_rowNumber"></param>
		///<param name="_adminId"></param>
		///<param name="_objectId"></param>
		///<param name="_parentId"></param>
		///<param name="_plateCode"></param>
		///<param name="_areaId"></param>
		///<param name="_phoneCode"></param>
		///<param name="_provinceName"></param>
		///<param name="_longitude"></param>
		///<param name="_latitude"></param>
		///<param name="_type"></param>
		///<param name="_createDate"></param>
		///<param name="_createTime"></param>
		///<param name="_updateDate"></param>
		///<param name="_updateTime"></param>
		///<param name="_createUserId"></param>
		///<param name="_updateUserId"></param>
		///<param name="_active"></param>
		///<param name="_deleted"></param>
		public ProvinceBase(System.Int32 _rowNumber, System.Int64 _adminId, System.Int64 _objectId, 
			System.Int64 _parentId, System.String _plateCode, System.Int32 _areaId, System.String _phoneCode, 
			System.String _provinceName, System.String _longitude, System.String _latitude, System.Int32 _type, 
			System.DateTime _createDate, System.TimeSpan _createTime, System.DateTime? _updateDate, System.TimeSpan? _updateTime, 
			System.Int32 _createUserId, System.Int32? _updateUserId, System.Boolean _active, System.Boolean _deleted)
		{
			this.entityData = new ProvinceEntityData();
			this.backupData = null;

			this.RowNumber = _rowNumber;
			this.AdminId = _adminId;
			this.ObjectId = _objectId;
			this.ParentId = _parentId;
			this.PlateCode = _plateCode;
			this.AreaId = _areaId;
			this.PhoneCode = _phoneCode;
			this.ProvinceName = _provinceName;
			this.Longitude = _longitude;
			this.Latitude = _latitude;
			this.Type = _type;
			this.CreateDate = _createDate;
			this.CreateTime = _createTime;
			this.UpdateDate = _updateDate;
			this.UpdateTime = _updateTime;
			this.CreateUserId = _createUserId;
			this.UpdateUserId = _updateUserId;
			this.Active = _active;
			this.Deleted = _deleted;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Province"/> instance.
		///</summary>
		///<param name="_rowNumber"></param>
		///<param name="_adminId"></param>
		///<param name="_objectId"></param>
		///<param name="_parentId"></param>
		///<param name="_plateCode"></param>
		///<param name="_areaId"></param>
		///<param name="_phoneCode"></param>
		///<param name="_provinceName"></param>
		///<param name="_longitude"></param>
		///<param name="_latitude"></param>
		///<param name="_type"></param>
		///<param name="_createDate"></param>
		///<param name="_createTime"></param>
		///<param name="_updateDate"></param>
		///<param name="_updateTime"></param>
		///<param name="_createUserId"></param>
		///<param name="_updateUserId"></param>
		///<param name="_active"></param>
		///<param name="_deleted"></param>
		public static Province CreateProvince(System.Int32 _rowNumber, System.Int64 _adminId, System.Int64 _objectId, 
			System.Int64 _parentId, System.String _plateCode, System.Int32 _areaId, System.String _phoneCode, 
			System.String _provinceName, System.String _longitude, System.String _latitude, System.Int32 _type, 
			System.DateTime _createDate, System.TimeSpan _createTime, System.DateTime? _updateDate, System.TimeSpan? _updateTime, 
			System.Int32 _createUserId, System.Int32? _updateUserId, System.Boolean _active, System.Boolean _deleted)
		{
			Province newProvince = new Province();
			newProvince.RowNumber = _rowNumber;
			newProvince.AdminId = _adminId;
			newProvince.ObjectId = _objectId;
			newProvince.ParentId = _parentId;
			newProvince.PlateCode = _plateCode;
			newProvince.AreaId = _areaId;
			newProvince.PhoneCode = _phoneCode;
			newProvince.ProvinceName = _provinceName;
			newProvince.Longitude = _longitude;
			newProvince.Latitude = _latitude;
			newProvince.Type = _type;
			newProvince.CreateDate = _createDate;
			newProvince.CreateTime = _createTime;
			newProvince.UpdateDate = _updateDate;
			newProvince.UpdateTime = _updateTime;
			newProvince.CreateUserId = _createUserId;
			newProvince.UpdateUserId = _updateUserId;
			newProvince.Active = _active;
			newProvince.Deleted = _deleted;
			return newProvince;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ProvinceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ProvinceId
		{
			get
			{
				return this.entityData.ProvinceId; 
			}
			
			set
			{
				if (this.entityData.ProvinceId == value)
					return;
				
                OnPropertyChanging("ProvinceId");                    
				OnColumnChanging(ProvinceColumn.ProvinceId, this.entityData.ProvinceId);
				this.entityData.ProvinceId = value;
				this.EntityId.ProvinceId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.ProvinceId, this.entityData.ProvinceId);
				OnPropertyChanged("ProvinceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RowNumber property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 RowNumber
		{
			get
			{
				return this.entityData.RowNumber; 
			}
			
			set
			{
				if (this.entityData.RowNumber == value)
					return;
				
                OnPropertyChanging("RowNumber");                    
				OnColumnChanging(ProvinceColumn.RowNumber, this.entityData.RowNumber);
				this.entityData.RowNumber = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.RowNumber, this.entityData.RowNumber);
				OnPropertyChanged("RowNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdminId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 AdminId
		{
			get
			{
				return this.entityData.AdminId; 
			}
			
			set
			{
				if (this.entityData.AdminId == value)
					return;
				
                OnPropertyChanging("AdminId");                    
				OnColumnChanging(ProvinceColumn.AdminId, this.entityData.AdminId);
				this.entityData.AdminId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.AdminId, this.entityData.AdminId);
				OnPropertyChanged("AdminId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ObjectId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 ObjectId
		{
			get
			{
				return this.entityData.ObjectId; 
			}
			
			set
			{
				if (this.entityData.ObjectId == value)
					return;
				
                OnPropertyChanging("ObjectId");                    
				OnColumnChanging(ProvinceColumn.ObjectId, this.entityData.ObjectId);
				this.entityData.ObjectId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.ObjectId, this.entityData.ObjectId);
				OnPropertyChanged("ObjectId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParentId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 ParentId
		{
			get
			{
				return this.entityData.ParentId; 
			}
			
			set
			{
				if (this.entityData.ParentId == value)
					return;
				
                OnPropertyChanging("ParentId");                    
				OnColumnChanging(ProvinceColumn.ParentId, this.entityData.ParentId);
				this.entityData.ParentId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.ParentId, this.entityData.ParentId);
				OnPropertyChanged("ParentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PlateCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 2)]
		public virtual System.String PlateCode
		{
			get
			{
				return this.entityData.PlateCode; 
			}
			
			set
			{
				if (this.entityData.PlateCode == value)
					return;
				
                OnPropertyChanging("PlateCode");                    
				OnColumnChanging(ProvinceColumn.PlateCode, this.entityData.PlateCode);
				this.entityData.PlateCode = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.PlateCode, this.entityData.PlateCode);
				OnPropertyChanged("PlateCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AreaId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 AreaId
		{
			get
			{
				return this.entityData.AreaId; 
			}
			
			set
			{
				if (this.entityData.AreaId == value)
					return;
				
                OnPropertyChanging("AreaId");                    
				OnColumnChanging(ProvinceColumn.AreaId, this.entityData.AreaId);
				this.entityData.AreaId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.AreaId, this.entityData.AreaId);
				OnPropertyChanged("AreaId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhoneCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 3)]
		public virtual System.String PhoneCode
		{
			get
			{
				return this.entityData.PhoneCode; 
			}
			
			set
			{
				if (this.entityData.PhoneCode == value)
					return;
				
                OnPropertyChanging("PhoneCode");                    
				OnColumnChanging(ProvinceColumn.PhoneCode, this.entityData.PhoneCode);
				this.entityData.PhoneCode = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.PhoneCode, this.entityData.PhoneCode);
				OnPropertyChanged("PhoneCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProvinceName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 250)]
		public virtual System.String ProvinceName
		{
			get
			{
				return this.entityData.ProvinceName; 
			}
			
			set
			{
				if (this.entityData.ProvinceName == value)
					return;
				
                OnPropertyChanging("ProvinceName");                    
				OnColumnChanging(ProvinceColumn.ProvinceName, this.entityData.ProvinceName);
				this.entityData.ProvinceName = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.ProvinceName, this.entityData.ProvinceName);
				OnPropertyChanged("ProvinceName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Longitude property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String Longitude
		{
			get
			{
				return this.entityData.Longitude; 
			}
			
			set
			{
				if (this.entityData.Longitude == value)
					return;
				
                OnPropertyChanging("Longitude");                    
				OnColumnChanging(ProvinceColumn.Longitude, this.entityData.Longitude);
				this.entityData.Longitude = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.Longitude, this.entityData.Longitude);
				OnPropertyChanged("Longitude");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Latitude property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String Latitude
		{
			get
			{
				return this.entityData.Latitude; 
			}
			
			set
			{
				if (this.entityData.Latitude == value)
					return;
				
                OnPropertyChanging("Latitude");                    
				OnColumnChanging(ProvinceColumn.Latitude, this.entityData.Latitude);
				this.entityData.Latitude = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.Latitude, this.entityData.Latitude);
				OnPropertyChanged("Latitude");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Type property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Type
		{
			get
			{
				return this.entityData.Type; 
			}
			
			set
			{
				if (this.entityData.Type == value)
					return;
				
                OnPropertyChanging("Type");                    
				OnColumnChanging(ProvinceColumn.Type, this.entityData.Type);
				this.entityData.Type = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.Type, this.entityData.Type);
				OnPropertyChanged("Type");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
				
                OnPropertyChanging("CreateDate");                    
				OnColumnChanging(ProvinceColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateTime property. 
		///		
		/// </summary>
		/// <value>This type is time.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.TimeSpan CreateTime
		{
			get
			{
				return this.entityData.CreateTime; 
			}
			
			set
			{
				if (this.entityData.CreateTime == value)
					return;
				
                OnPropertyChanging("CreateTime");                    
				OnColumnChanging(ProvinceColumn.CreateTime, this.entityData.CreateTime);
				this.entityData.CreateTime = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.CreateTime, this.entityData.CreateTime);
				OnPropertyChanged("CreateTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
				
                OnPropertyChanging("UpdateDate");                    
				OnColumnChanging(ProvinceColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateTime property. 
		///		
		/// </summary>
		/// <value>This type is time.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.TimeSpan? UpdateTime
		{
			get
			{
				return this.entityData.UpdateTime; 
			}
			
			set
			{
				if (this.entityData.UpdateTime == value)
					return;
				
                OnPropertyChanging("UpdateTime");                    
				OnColumnChanging(ProvinceColumn.UpdateTime, this.entityData.UpdateTime);
				this.entityData.UpdateTime = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.UpdateTime, this.entityData.UpdateTime);
				OnPropertyChanged("UpdateTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CreateUserId
		{
			get
			{
				return this.entityData.CreateUserId; 
			}
			
			set
			{
				if (this.entityData.CreateUserId == value)
					return;
				
                OnPropertyChanging("CreateUserId");                    
				OnColumnChanging(ProvinceColumn.CreateUserId, this.entityData.CreateUserId);
				this.entityData.CreateUserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.CreateUserId, this.entityData.CreateUserId);
				OnPropertyChanged("CreateUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UpdateUserId
		{
			get
			{
				return this.entityData.UpdateUserId; 
			}
			
			set
			{
				if (this.entityData.UpdateUserId == value)
					return;
				
                OnPropertyChanging("UpdateUserId");                    
				OnColumnChanging(ProvinceColumn.UpdateUserId, this.entityData.UpdateUserId);
				this.entityData.UpdateUserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.UpdateUserId, this.entityData.UpdateUserId);
				OnPropertyChanged("UpdateUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Active property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Active
		{
			get
			{
				return this.entityData.Active; 
			}
			
			set
			{
				if (this.entityData.Active == value)
					return;
				
                OnPropertyChanging("Active");                    
				OnColumnChanging(ProvinceColumn.Active, this.entityData.Active);
				this.entityData.Active = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.Active, this.entityData.Active);
				OnPropertyChanged("Active");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Deleted property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Deleted
		{
			get
			{
				return this.entityData.Deleted; 
			}
			
			set
			{
				if (this.entityData.Deleted == value)
					return;
				
                OnPropertyChanging("Deleted");                    
				OnColumnChanging(ProvinceColumn.Deleted, this.entityData.Deleted);
				this.entityData.Deleted = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProvinceColumn.Deleted, this.entityData.Deleted);
				OnPropertyChanged("Deleted");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Town objects
		///	which are related to this object through the relation FK_Town_Province
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Town> TownCollection
		{
			get { return entityData.TownCollection; }
			set { entityData.TownCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PlateCode", "Plate Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PlateCode", "Plate Code", 2));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PhoneCode", "Phone Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PhoneCode", "Phone Code", 3));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ProvinceName", "Province Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ProvinceName", "Province Name", 250));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Longitude", "Longitude"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Longitude", "Longitude", 10));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Latitude", "Latitude"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Latitude", "Latitude", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Province"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ProvinceId", "RowNumber", "AdminId", "ObjectId", "ParentId", "PlateCode", "AreaId", "PhoneCode", "ProvinceName", "Longitude", "Latitude", "Type", "CreateDate", "CreateTime", "UpdateDate", "UpdateTime", "CreateUserId", "UpdateUserId", "Active", "Deleted"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ProvinceEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Province) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Province>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Province);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Province Entity 
		///</summary>
		protected virtual Province Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Province copy = new Province();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ProvinceId = this.ProvinceId;
				copy.RowNumber = this.RowNumber;
				copy.AdminId = this.AdminId;
				copy.ObjectId = this.ObjectId;
				copy.ParentId = this.ParentId;
				copy.PlateCode = this.PlateCode;
				copy.AreaId = this.AreaId;
				copy.PhoneCode = this.PhoneCode;
				copy.ProvinceName = this.ProvinceName;
				copy.Longitude = this.Longitude;
				copy.Latitude = this.Latitude;
				copy.Type = this.Type;
				copy.CreateDate = this.CreateDate;
				copy.CreateTime = this.CreateTime;
				copy.UpdateDate = this.UpdateDate;
				copy.UpdateTime = this.UpdateTime;
				copy.CreateUserId = this.CreateUserId;
				copy.UpdateUserId = this.UpdateUserId;
				copy.Active = this.Active;
				copy.Deleted = this.Deleted;
			
		
			//deep copy nested objects
			copy.TownCollection = (TList<Town>) MakeCopyOf(this.TownCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Province Entity 
		///</summary>
		public virtual Province Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Province Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Province DeepCopy()
		{
			return EntityHelper.Clone<Province>(this as Province);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ProvinceEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ProvinceEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ProvinceEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ProvinceColumn column)
		{
			switch(column)
			{
					case ProvinceColumn.ProvinceId:
					return entityData.ProvinceId != _originalData.ProvinceId;
					case ProvinceColumn.RowNumber:
					return entityData.RowNumber != _originalData.RowNumber;
					case ProvinceColumn.AdminId:
					return entityData.AdminId != _originalData.AdminId;
					case ProvinceColumn.ObjectId:
					return entityData.ObjectId != _originalData.ObjectId;
					case ProvinceColumn.ParentId:
					return entityData.ParentId != _originalData.ParentId;
					case ProvinceColumn.PlateCode:
					return entityData.PlateCode != _originalData.PlateCode;
					case ProvinceColumn.AreaId:
					return entityData.AreaId != _originalData.AreaId;
					case ProvinceColumn.PhoneCode:
					return entityData.PhoneCode != _originalData.PhoneCode;
					case ProvinceColumn.ProvinceName:
					return entityData.ProvinceName != _originalData.ProvinceName;
					case ProvinceColumn.Longitude:
					return entityData.Longitude != _originalData.Longitude;
					case ProvinceColumn.Latitude:
					return entityData.Latitude != _originalData.Latitude;
					case ProvinceColumn.Type:
					return entityData.Type != _originalData.Type;
					case ProvinceColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case ProvinceColumn.CreateTime:
					return entityData.CreateTime != _originalData.CreateTime;
					case ProvinceColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
					case ProvinceColumn.UpdateTime:
					return entityData.UpdateTime != _originalData.UpdateTime;
					case ProvinceColumn.CreateUserId:
					return entityData.CreateUserId != _originalData.CreateUserId;
					case ProvinceColumn.UpdateUserId:
					return entityData.UpdateUserId != _originalData.UpdateUserId;
					case ProvinceColumn.Active:
					return entityData.Active != _originalData.Active;
					case ProvinceColumn.Deleted:
					return entityData.Deleted != _originalData.Deleted;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ProvinceColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ProvinceId != _originalData.ProvinceId;
			result = result || entityData.RowNumber != _originalData.RowNumber;
			result = result || entityData.AdminId != _originalData.AdminId;
			result = result || entityData.ObjectId != _originalData.ObjectId;
			result = result || entityData.ParentId != _originalData.ParentId;
			result = result || entityData.PlateCode != _originalData.PlateCode;
			result = result || entityData.AreaId != _originalData.AreaId;
			result = result || entityData.PhoneCode != _originalData.PhoneCode;
			result = result || entityData.ProvinceName != _originalData.ProvinceName;
			result = result || entityData.Longitude != _originalData.Longitude;
			result = result || entityData.Latitude != _originalData.Latitude;
			result = result || entityData.Type != _originalData.Type;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.CreateTime != _originalData.CreateTime;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			result = result || entityData.UpdateTime != _originalData.UpdateTime;
			result = result || entityData.CreateUserId != _originalData.CreateUserId;
			result = result || entityData.UpdateUserId != _originalData.UpdateUserId;
			result = result || entityData.Active != _originalData.Active;
			result = result || entityData.Deleted != _originalData.Deleted;
			return result;
		}	
		
		///<summary>
		///  Returns a Province Entity with the original data.
		///</summary>
		public Province GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateProvince(
				_originalData.RowNumber,
				_originalData.AdminId,
				_originalData.ObjectId,
				_originalData.ParentId,
				_originalData.PlateCode,
				_originalData.AreaId,
				_originalData.PhoneCode,
				_originalData.ProvinceName,
				_originalData.Longitude,
				_originalData.Latitude,
				_originalData.Type,
				_originalData.CreateDate,
				_originalData.CreateTime,
				_originalData.UpdateDate,
				_originalData.UpdateTime,
				_originalData.CreateUserId,
				_originalData.UpdateUserId,
				_originalData.Active,
				_originalData.Deleted
				);
				
			return (Province)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ProvinceBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ProvinceBase)
				return ValueEquals(this, (ProvinceBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ProvinceBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ProvinceId.GetHashCode() ^ 
					this.RowNumber.GetHashCode() ^ 
					this.AdminId.GetHashCode() ^ 
					this.ObjectId.GetHashCode() ^ 
					this.ParentId.GetHashCode() ^ 
					this.PlateCode.GetHashCode() ^ 
					this.AreaId.GetHashCode() ^ 
					this.PhoneCode.GetHashCode() ^ 
					this.ProvinceName.GetHashCode() ^ 
					this.Longitude.GetHashCode() ^ 
					this.Latitude.GetHashCode() ^ 
					this.Type.GetHashCode() ^ 
					this.CreateDate.GetHashCode() ^ 
					this.CreateTime.GetHashCode() ^ 
					((this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString()).GetHashCode() ^ 
					((this.UpdateTime == null) ? string.Empty : this.UpdateTime.ToString()).GetHashCode() ^ 
					this.CreateUserId.GetHashCode() ^ 
					((this.UpdateUserId == null) ? string.Empty : this.UpdateUserId.ToString()).GetHashCode() ^ 
					this.Active.GetHashCode() ^ 
					this.Deleted.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ProvinceBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ProvinceBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ProvinceBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ProvinceBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ProvinceBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ProvinceBase Object1, ProvinceBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ProvinceId != Object2.ProvinceId)
				equal = false;
			if (Object1.RowNumber != Object2.RowNumber)
				equal = false;
			if (Object1.AdminId != Object2.AdminId)
				equal = false;
			if (Object1.ObjectId != Object2.ObjectId)
				equal = false;
			if (Object1.ParentId != Object2.ParentId)
				equal = false;
			if (Object1.PlateCode != Object2.PlateCode)
				equal = false;
			if (Object1.AreaId != Object2.AreaId)
				equal = false;
			if (Object1.PhoneCode != Object2.PhoneCode)
				equal = false;
			if (Object1.ProvinceName != Object2.ProvinceName)
				equal = false;
			if (Object1.Longitude != Object2.Longitude)
				equal = false;
			if (Object1.Latitude != Object2.Latitude)
				equal = false;
			if (Object1.Type != Object2.Type)
				equal = false;
			if (Object1.CreateDate != Object2.CreateDate)
				equal = false;
			if (Object1.CreateTime != Object2.CreateTime)
				equal = false;
			if ( Object1.UpdateDate != null && Object2.UpdateDate != null )
			{
				if (Object1.UpdateDate != Object2.UpdateDate)
					equal = false;
			}
			else if (Object1.UpdateDate == null ^ Object2.UpdateDate == null )
			{
				equal = false;
			}
			if ( Object1.UpdateTime != null && Object2.UpdateTime != null )
			{
				if (Object1.UpdateTime != Object2.UpdateTime)
					equal = false;
			}
			else if (Object1.UpdateTime == null ^ Object2.UpdateTime == null )
			{
				equal = false;
			}
			if (Object1.CreateUserId != Object2.CreateUserId)
				equal = false;
			if ( Object1.UpdateUserId != null && Object2.UpdateUserId != null )
			{
				if (Object1.UpdateUserId != Object2.UpdateUserId)
					equal = false;
			}
			else if (Object1.UpdateUserId == null ^ Object2.UpdateUserId == null )
			{
				equal = false;
			}
			if (Object1.Active != Object2.Active)
				equal = false;
			if (Object1.Deleted != Object2.Deleted)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ProvinceBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ProvinceComparer GetComparer()
        {
            return new ProvinceComparer();
        }
        */

        // Comparer delegates back to Province
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Province rhs, ProvinceColumn which)
        {
            switch (which)
            {
            	
            	
            	case ProvinceColumn.ProvinceId:
            		return this.ProvinceId.CompareTo(rhs.ProvinceId);
            		
            		                 
            	
            	
            	case ProvinceColumn.RowNumber:
            		return this.RowNumber.CompareTo(rhs.RowNumber);
            		
            		                 
            	
            	
            	case ProvinceColumn.AdminId:
            		return this.AdminId.CompareTo(rhs.AdminId);
            		
            		                 
            	
            	
            	case ProvinceColumn.ObjectId:
            		return this.ObjectId.CompareTo(rhs.ObjectId);
            		
            		                 
            	
            	
            	case ProvinceColumn.ParentId:
            		return this.ParentId.CompareTo(rhs.ParentId);
            		
            		                 
            	
            	
            	case ProvinceColumn.PlateCode:
            		return this.PlateCode.CompareTo(rhs.PlateCode);
            		
            		                 
            	
            	
            	case ProvinceColumn.AreaId:
            		return this.AreaId.CompareTo(rhs.AreaId);
            		
            		                 
            	
            	
            	case ProvinceColumn.PhoneCode:
            		return this.PhoneCode.CompareTo(rhs.PhoneCode);
            		
            		                 
            	
            	
            	case ProvinceColumn.ProvinceName:
            		return this.ProvinceName.CompareTo(rhs.ProvinceName);
            		
            		                 
            	
            	
            	case ProvinceColumn.Longitude:
            		return this.Longitude.CompareTo(rhs.Longitude);
            		
            		                 
            	
            	
            	case ProvinceColumn.Latitude:
            		return this.Latitude.CompareTo(rhs.Latitude);
            		
            		                 
            	
            	
            	case ProvinceColumn.Type:
            		return this.Type.CompareTo(rhs.Type);
            		
            		                 
            	
            	
            	case ProvinceColumn.CreateDate:
            		return this.CreateDate.CompareTo(rhs.CreateDate);
            		
            		                 
            	
            	
            	case ProvinceColumn.CreateTime:
            		return this.CreateTime.CompareTo(rhs.CreateTime);
            		
            		                 
            	
            	
            	case ProvinceColumn.UpdateDate:
            		return this.UpdateDate.Value.CompareTo(rhs.UpdateDate.Value);
            		
            		                 
            	
            	
            	case ProvinceColumn.UpdateTime:
            		return this.UpdateTime.Value.CompareTo(rhs.UpdateTime.Value);
            		
            		                 
            	
            	
            	case ProvinceColumn.CreateUserId:
            		return this.CreateUserId.CompareTo(rhs.CreateUserId);
            		
            		                 
            	
            	
            	case ProvinceColumn.UpdateUserId:
            		return this.UpdateUserId.Value.CompareTo(rhs.UpdateUserId.Value);
            		
            		                 
            	
            	
            	case ProvinceColumn.Active:
            		return this.Active.CompareTo(rhs.Active);
            		
            		                 
            	
            	
            	case ProvinceColumn.Deleted:
            		return this.Deleted.CompareTo(rhs.Deleted);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ProvinceKey> Members
		
		// member variable for the EntityId property
		private ProvinceKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ProvinceKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ProvinceKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Province")
					.Append("|").Append( this.ProvinceId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- ProvinceId: {0}{20}- RowNumber: {1}{20}- AdminId: {2}{20}- ObjectId: {3}{20}- ParentId: {4}{20}- PlateCode: {5}{20}- AreaId: {6}{20}- PhoneCode: {7}{20}- ProvinceName: {8}{20}- Longitude: {9}{20}- Latitude: {10}{20}- Type: {11}{20}- CreateDate: {12}{20}- CreateTime: {13}{20}- UpdateDate: {14}{20}- UpdateTime: {15}{20}- CreateUserId: {16}{20}- UpdateUserId: {17}{20}- Active: {18}{20}- Deleted: {19}{20}{22}", 
				this.ProvinceId,
				this.RowNumber,
				this.AdminId,
				this.ObjectId,
				this.ParentId,
				this.PlateCode,
				this.AreaId,
				this.PhoneCode,
				this.ProvinceName,
				this.Longitude,
				this.Latitude,
				this.Type,
				this.CreateDate,
				this.CreateTime,
				(this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString(),
				(this.UpdateTime == null) ? string.Empty : this.UpdateTime.ToString(),
				this.CreateUserId,
				(this.UpdateUserId == null) ? string.Empty : this.UpdateUserId.ToString(),
				this.Active,
				this.Deleted,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Province' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	internal protected class ProvinceEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ProvinceId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Province"</remarks>
		[DataMember]
		public System.Int32 ProvinceId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// RowNumber : 
		/// </summary>
		[DataMember]
		public System.Int32 RowNumber = (int)0;
		
		/// <summary>
		/// AdminId : 
		/// </summary>
		[DataMember]
		public System.Int64 AdminId = (long)0;
		
		/// <summary>
		/// ObjectId : 
		/// </summary>
		[DataMember]
		public System.Int64 ObjectId = (long)0;
		
		/// <summary>
		/// ParentId : 
		/// </summary>
		[DataMember]
		public System.Int64 ParentId = (long)0;
		
		/// <summary>
		/// PlateCode : 
		/// </summary>
		[DataMember]
		public System.String PlateCode = string.Empty;
		
		/// <summary>
		/// AreaId : 
		/// </summary>
		[DataMember]
		public System.Int32 AreaId = (int)0;
		
		/// <summary>
		/// PhoneCode : 
		/// </summary>
		[DataMember]
		public System.String PhoneCode = string.Empty;
		
		/// <summary>
		/// ProvinceName : 
		/// </summary>
		[DataMember]
		public System.String ProvinceName = string.Empty;
		
		/// <summary>
		/// Longitude : 
		/// </summary>
		[DataMember]
		public System.String Longitude = string.Empty;
		
		/// <summary>
		/// Latitude : 
		/// </summary>
		[DataMember]
		public System.String Latitude = string.Empty;
		
		/// <summary>
		/// Type : 
		/// </summary>
		[DataMember]
		public System.Int32 Type = (int)1;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime CreateDate = DateTime.Now;
		
		/// <summary>
		/// CreateTime : 
		/// </summary>
		[DataMember]
		public System.TimeSpan CreateTime = new TimeSpan(1,0,0,0,0);
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime? UpdateDate = null;
		
		/// <summary>
		/// UpdateTime : 
		/// </summary>
		[DataMember]
		public System.TimeSpan? UpdateTime = null;
		
		/// <summary>
		/// CreateUserId : 
		/// </summary>
		[DataMember]
		public System.Int32 CreateUserId = (int)0;
		
		/// <summary>
		/// UpdateUserId : 
		/// </summary>
		[DataMember]
		public System.Int32? UpdateUserId = null;
		
		/// <summary>
		/// Active : 
		/// </summary>
		[DataMember]
		public System.Boolean Active = true;
		
		/// <summary>
		/// Deleted : 
		/// </summary>
		[DataMember]
		public System.Boolean Deleted = false;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region TownCollection
		
		private TList<Town> _townProvinceId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _townProvinceId
		/// </summary>
		[DataMember]
		public TList<Town> TownCollection
		{
			get
			{
				if (_townProvinceId == null)
				{
				_townProvinceId = new TList<Town>();
				}
	
				return _townProvinceId;
			}
			set { _townProvinceId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ProvinceEntityData _tmp = new ProvinceEntityData();
						
			_tmp.ProvinceId = this.ProvinceId;
			
			_tmp.RowNumber = this.RowNumber;
			_tmp.AdminId = this.AdminId;
			_tmp.ObjectId = this.ObjectId;
			_tmp.ParentId = this.ParentId;
			_tmp.PlateCode = this.PlateCode;
			_tmp.AreaId = this.AreaId;
			_tmp.PhoneCode = this.PhoneCode;
			_tmp.ProvinceName = this.ProvinceName;
			_tmp.Longitude = this.Longitude;
			_tmp.Latitude = this.Latitude;
			_tmp.Type = this.Type;
			_tmp.CreateDate = this.CreateDate;
			_tmp.CreateTime = this.CreateTime;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UpdateTime = this.UpdateTime;
			_tmp.CreateUserId = this.CreateUserId;
			_tmp.UpdateUserId = this.UpdateUserId;
			_tmp.Active = this.Active;
			_tmp.Deleted = this.Deleted;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._townProvinceId != null)
				_tmp.TownCollection = (TList<Town>) MakeCopyOf(this.TownCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ProvinceEntityData _tmp = new ProvinceEntityData();
						
			_tmp.ProvinceId = this.ProvinceId;
			
			_tmp.RowNumber = this.RowNumber;
			_tmp.AdminId = this.AdminId;
			_tmp.ObjectId = this.ObjectId;
			_tmp.ParentId = this.ParentId;
			_tmp.PlateCode = this.PlateCode;
			_tmp.AreaId = this.AreaId;
			_tmp.PhoneCode = this.PhoneCode;
			_tmp.ProvinceName = this.ProvinceName;
			_tmp.Longitude = this.Longitude;
			_tmp.Latitude = this.Latitude;
			_tmp.Type = this.Type;
			_tmp.CreateDate = this.CreateDate;
			_tmp.CreateTime = this.CreateTime;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UpdateTime = this.UpdateTime;
			_tmp.CreateUserId = this.CreateUserId;
			_tmp.UpdateUserId = this.UpdateUserId;
			_tmp.Active = this.Active;
			_tmp.Deleted = this.Deleted;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.TownCollection = (TList<Town>) MakeCopyOf(this.TownCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		[DataMember]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new ProvinceEntityData();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProvinceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ProvinceColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProvinceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ProvinceColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProvinceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ProvinceColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ProvinceEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ProvinceEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProvinceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ProvinceColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ProvinceEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ProvinceEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ProvinceEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Province"/> object.
	/// </remarks>
	public class ProvinceEventArgs : System.EventArgs
	{
		private ProvinceColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ProvinceEventArgs class.
		///</summary>
		public ProvinceEventArgs(ProvinceColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ProvinceEventArgs class.
		///</summary>
		public ProvinceEventArgs(ProvinceColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ProvinceColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ProvinceColumn" />
		public ProvinceColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Province related events.
	///</summary>
	public delegate void ProvinceEventHandler(object sender, ProvinceEventArgs e);
	
	#region ProvinceComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ProvinceComparer : System.Collections.Generic.IComparer<Province>
	{
		ProvinceColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ProvinceComparer"/> class.
        /// </summary>
		public ProvinceComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ProvinceComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ProvinceComparer(ProvinceColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Province"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Province"/> to compare.</param>
        /// <param name="b">The second <c>Province</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Province a, Province b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Province entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Province a, Province b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ProvinceColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ProvinceKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Province"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ProvinceKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ProvinceKey class.
		/// </summary>
		public ProvinceKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ProvinceKey class.
		/// </summary>
		public ProvinceKey(ProvinceBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ProvinceId = entity.ProvinceId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ProvinceKey class.
		/// </summary>
		public ProvinceKey(System.Int32 _provinceId)
		{
			#region Init Properties

			this.ProvinceId = _provinceId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ProvinceBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ProvinceBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ProvinceId property
		private System.Int32 _provinceId;
		
		/// <summary>
		/// Gets or sets the ProvinceId property.
		/// </summary>
		public System.Int32 ProvinceId
		{
			get { return _provinceId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ProvinceId = value;
				
				_provinceId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ProvinceId = ( values["ProvinceId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ProvinceId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ProvinceId", ProvinceId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ProvinceId: {0}{1}",
								ProvinceId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ProvinceColumn Enum
	
	/// <summary>
	/// Enumerate the Province columns.
	/// </summary>
	[Serializable]
	public enum ProvinceColumn : int
	{
		/// <summary>
		/// ProvinceId : 
		/// </summary>
		[EnumTextValue("Province Id")]
		[ColumnEnum("ProvinceId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ProvinceId = 1,
		/// <summary>
		/// RowNumber : 
		/// </summary>
		[EnumTextValue("Row Number")]
		[ColumnEnum("RowNumber", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		RowNumber = 2,
		/// <summary>
		/// AdminId : 
		/// </summary>
		[EnumTextValue("Admin Id")]
		[ColumnEnum("AdminId", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		AdminId = 3,
		/// <summary>
		/// ObjectId : 
		/// </summary>
		[EnumTextValue("Object Id")]
		[ColumnEnum("ObjectId", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		ObjectId = 4,
		/// <summary>
		/// ParentId : 
		/// </summary>
		[EnumTextValue("Parent Id")]
		[ColumnEnum("ParentId", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		ParentId = 5,
		/// <summary>
		/// PlateCode : 
		/// </summary>
		[EnumTextValue("Plate Code")]
		[ColumnEnum("PlateCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 2)]
		PlateCode = 6,
		/// <summary>
		/// AreaId : 
		/// </summary>
		[EnumTextValue("Area Id")]
		[ColumnEnum("AreaId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AreaId = 7,
		/// <summary>
		/// PhoneCode : 
		/// </summary>
		[EnumTextValue("Phone Code")]
		[ColumnEnum("PhoneCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 3)]
		PhoneCode = 8,
		/// <summary>
		/// ProvinceName : 
		/// </summary>
		[EnumTextValue("Province Name")]
		[ColumnEnum("ProvinceName", typeof(System.String), System.Data.DbType.String, false, false, false, 250)]
		ProvinceName = 9,
		/// <summary>
		/// Longitude : 
		/// </summary>
		[EnumTextValue("Longitude")]
		[ColumnEnum("Longitude", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		Longitude = 10,
		/// <summary>
		/// Latitude : 
		/// </summary>
		[EnumTextValue("Latitude")]
		[ColumnEnum("Latitude", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		Latitude = 11,
		/// <summary>
		/// Type : 
		/// </summary>
		[EnumTextValue("Type")]
		[ColumnEnum("Type", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Type = 12,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("Create Date")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		CreateDate = 13,
		/// <summary>
		/// CreateTime : 
		/// </summary>
		[EnumTextValue("Create Time")]
		[ColumnEnum("CreateTime", typeof(System.TimeSpan), System.Data.DbType.Time, false, false, false)]
		CreateTime = 14,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("Update Date")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		UpdateDate = 15,
		/// <summary>
		/// UpdateTime : 
		/// </summary>
		[EnumTextValue("Update Time")]
		[ColumnEnum("UpdateTime", typeof(System.TimeSpan), System.Data.DbType.Time, false, false, true)]
		UpdateTime = 16,
		/// <summary>
		/// CreateUserId : 
		/// </summary>
		[EnumTextValue("Create User Id")]
		[ColumnEnum("CreateUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CreateUserId = 17,
		/// <summary>
		/// UpdateUserId : 
		/// </summary>
		[EnumTextValue("Update User Id")]
		[ColumnEnum("UpdateUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UpdateUserId = 18,
		/// <summary>
		/// Active : 
		/// </summary>
		[EnumTextValue("Active")]
		[ColumnEnum("Active", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Active = 19,
		/// <summary>
		/// Deleted : 
		/// </summary>
		[EnumTextValue("Deleted")]
		[ColumnEnum("Deleted", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Deleted = 20
	}//End enum

	#endregion ProvinceColumn Enum

} // end namespace
