
/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 14 Ocak 2019 Pazartesi
	Important: Do not modify this file. Edit the file ClientView.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using Ekip.Framework.Entities;
using Ekip.Framework.Entities.Validation;
using Entities = Ekip.Framework.Entities;
using Ekip.Framework.Data;
using Ekip.Framework.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace Ekip.Framework.Services
{		
	
	///<summary>
	/// An object representation of the 'ClientView' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the ClientView.cs file instead.
	/// All custom implementations should be done in the <see cref="ClientView"/> class.
	/// </remarks>
	[DataObject]
	public partial class ClientViewServiceBase : ServiceViewBase<ClientView>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="ClientView"/> instance .
		///</summary>
		public ClientViewServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ClientView"/> instance.
		///</summary>
		///<param name="_clientId"></param>
		///<param name="_fileNumber"></param>
		///<param name="_fullName"></param>
		///<param name="_middleName"></param>
		///<param name="_reference"></param>
		///<param name="_pediatrician"></param>
		///<param name="_blood"></param>
		///<param name="_birthDate"></param>
		///<param name="_firstContactDate"></param>
		///<param name="_gender"></param>
		///<param name="_ıdCard"></param>
		///<param name="_firstContactAge"></param>
		///<param name="_mother"></param>
		///<param name="_motherBusiness"></param>
		///<param name="_motherEmail"></param>
		///<param name="_motherMobile"></param>
		///<param name="_father"></param>
		///<param name="_fatherBusiness"></param>
		///<param name="_fatherEmail"></param>
		///<param name="_fatherMobile"></param>
		///<param name="_addressLine"></param>
		///<param name="_titleId"></param>
		///<param name="_cityName"></param>
		///<param name="_districtName"></param>
		///<param name="_region"></param>
		///<param name="_cityId"></param>
		///<param name="_regionId"></param>
		///<param name="_districtId"></param>
		///<param name="_advisorId"></param>
		///<param name="_advisorName"></param>
		public static ClientView CreateClientView(System.Int32 _clientId, System.Int32 _fileNumber, System.String _fullName, System.String _middleName, System.String _reference, System.String _pediatrician, System.Byte _blood, System.DateTime? _birthDate, System.DateTime? _firstContactDate, System.Byte _gender, System.String _ıdCard, System.Int32? _firstContactAge, System.String _mother, System.String _motherBusiness, System.String _motherEmail, System.String _motherMobile, System.String _father, System.String _fatherBusiness, System.String _fatherEmail, System.String _fatherMobile, System.String _addressLine, System.Byte? _titleId, System.String _cityName, System.String _districtName, System.String _region, System.Int32? _cityId, System.Int32? _regionId, System.Int32? _districtId, System.Int32? _advisorId, System.String _advisorName)
		{
			ClientView newEntityClientView = new ClientView();
			newEntityClientView.ClientId  = _clientId;
			newEntityClientView.FileNumber  = _fileNumber;
			newEntityClientView.FullName  = _fullName;
			newEntityClientView.MiddleName  = _middleName;
			newEntityClientView.Reference  = _reference;
			newEntityClientView.Pediatrician  = _pediatrician;
			newEntityClientView.Blood  = _blood;
			newEntityClientView.BirthDate  = _birthDate;
			newEntityClientView.FirstContactDate  = _firstContactDate;
			newEntityClientView.Gender  = _gender;
			newEntityClientView.IdCard  = _ıdCard;
			newEntityClientView.FirstContactAge  = _firstContactAge;
			newEntityClientView.Mother  = _mother;
			newEntityClientView.MotherBusiness  = _motherBusiness;
			newEntityClientView.MotherEmail  = _motherEmail;
			newEntityClientView.MotherMobile  = _motherMobile;
			newEntityClientView.Father  = _father;
			newEntityClientView.FatherBusiness  = _fatherBusiness;
			newEntityClientView.FatherEmail  = _fatherEmail;
			newEntityClientView.FatherMobile  = _fatherMobile;
			newEntityClientView.AddressLine  = _addressLine;
			newEntityClientView.TitleId  = _titleId;
			newEntityClientView.CityName  = _cityName;
			newEntityClientView.DistrictName  = _districtName;
			newEntityClientView.Region  = _region;
			newEntityClientView.CityId  = _cityId;
			newEntityClientView.RegionId  = _regionId;
			newEntityClientView.DistrictId  = _districtId;
			newEntityClientView.AdvisorId  = _advisorId;
			newEntityClientView.AdvisorName  = _advisorName;
			return newEntityClientView;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<ClientView> securityContext = new SecurityContext<ClientView>();
		private static readonly string layerExceptionPolicy = "ServiceLayerExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 10000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<ClientView> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{ClientView} of <c>ClientView</c> objects.</returns>
		public override VList<ClientView> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<ClientView> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ClientViewProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="ClientView" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<ClientView> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="ClientView" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{ClientView}"/> </returns>
		public override VList<ClientView> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<ClientView> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.ClientViewProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{ClientView}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ClientView</c> objects.</returns>
		public virtual VList<ClientView> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{ClientView}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ClientView</c> objects.</returns>
		public virtual VList<ClientView> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{ClientView}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ClientView</c> objects.</returns>
		public override VList<ClientView> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<ClientView> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ClientViewProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>ClientView</c> objects.</returns>
		public virtual VList<ClientView> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>ClientView</c> objects.</returns>
		public virtual VList<ClientView> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>ClientView</c> objects.</returns>
		public override VList<ClientView> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<ClientView> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ClientViewProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		
		#region ClientView_Find
		/// <summary>
		///	This method wrap the 'ClientView_Find' stored procedure. 
		/// </summary>
		/// <param name="fileNumber"> A <c>System.Int32?</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="lastName"> A <c>System.String</c> instance.</param>
		/// <param name="middleName"> A <c>System.String</c> instance.</param>
		/// <param name="referance"> A <c>System.String</c> instance.</param>
		/// <param name="pediatrician"> A <c>System.String</c> instance.</param>
		/// <param name="blood"> A <c>System.Byte?</c> instance.</param>
		/// <param name="birthDate1"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="birthDate2"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="firstDate1"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="firstDate2"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="gender"> A <c>System.Byte?</c> instance.</param>
		/// <param name="ıdCard"> A <c>System.String</c> instance.</param>
		/// <param name="age1"> A <c>System.Int32?</c> instance.</param>
		/// <param name="age2"> A <c>System.Int32?</c> instance.</param>
		/// <param name="mother"> A <c>System.String</c> instance.</param>
		/// <param name="motherPhone"> A <c>System.String</c> instance.</param>
		/// <param name="motherMobile"> A <c>System.String</c> instance.</param>
		/// <param name="motherEmail"> A <c>System.String</c> instance.</param>
		/// <param name="father"> A <c>System.String</c> instance.</param>
		/// <param name="fatherPhone"> A <c>System.String</c> instance.</param>
		/// <param name="fatherMobile"> A <c>System.String</c> instance.</param>
		/// <param name="fatherEmail"> A <c>System.String</c> instance.</param>
		/// <param name="addressLine"> A <c>System.String</c> instance.</param>
		/// <param name="cityId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="districtId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="regionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advisorIdList"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void Find(System.Int32? fileNumber, System.String firstName, System.String lastName, System.String middleName, System.String referance, System.String pediatrician, System.Byte? blood, System.DateTime? birthDate1, System.DateTime? birthDate2, System.DateTime? firstDate1, System.DateTime? firstDate2, System.Byte? gender, System.String ıdCard, System.Int32? age1, System.Int32? age2, System.String mother, System.String motherPhone, System.String motherMobile, System.String motherEmail, System.String father, System.String fatherPhone, System.String fatherMobile, System.String fatherEmail, System.String addressLine, System.Int32? cityId, System.Int32? districtId, System.Int32? regionId, System.String advisorIdList)
		{
			 Find( fileNumber, firstName, lastName, middleName, referance, pediatrician, blood, birthDate1, birthDate2, firstDate1, firstDate2, gender, ıdCard, age1, age2, mother, motherPhone, motherMobile, motherEmail, father, fatherPhone, fatherMobile, fatherEmail, addressLine, cityId, districtId, regionId, advisorIdList, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'ClientView_Find' stored procedure. 
		/// </summary>
		/// <param name="fileNumber"> A <c>System.Int32?</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="lastName"> A <c>System.String</c> instance.</param>
		/// <param name="middleName"> A <c>System.String</c> instance.</param>
		/// <param name="referance"> A <c>System.String</c> instance.</param>
		/// <param name="pediatrician"> A <c>System.String</c> instance.</param>
		/// <param name="blood"> A <c>System.Byte?</c> instance.</param>
		/// <param name="birthDate1"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="birthDate2"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="firstDate1"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="firstDate2"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="gender"> A <c>System.Byte?</c> instance.</param>
		/// <param name="ıdCard"> A <c>System.String</c> instance.</param>
		/// <param name="age1"> A <c>System.Int32?</c> instance.</param>
		/// <param name="age2"> A <c>System.Int32?</c> instance.</param>
		/// <param name="mother"> A <c>System.String</c> instance.</param>
		/// <param name="motherPhone"> A <c>System.String</c> instance.</param>
		/// <param name="motherMobile"> A <c>System.String</c> instance.</param>
		/// <param name="motherEmail"> A <c>System.String</c> instance.</param>
		/// <param name="father"> A <c>System.String</c> instance.</param>
		/// <param name="fatherPhone"> A <c>System.String</c> instance.</param>
		/// <param name="fatherMobile"> A <c>System.String</c> instance.</param>
		/// <param name="fatherEmail"> A <c>System.String</c> instance.</param>
		/// <param name="addressLine"> A <c>System.String</c> instance.</param>
		/// <param name="cityId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="districtId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="regionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advisorIdList"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void Find(System.Int32? fileNumber, System.String firstName, System.String lastName, System.String middleName, System.String referance, System.String pediatrician, System.Byte? blood, System.DateTime? birthDate1, System.DateTime? birthDate2, System.DateTime? firstDate1, System.DateTime? firstDate2, System.Byte? gender, System.String ıdCard, System.Int32? age1, System.Int32? age2, System.String mother, System.String motherPhone, System.String motherMobile, System.String motherEmail, System.String father, System.String fatherPhone, System.String fatherMobile, System.String fatherEmail, System.String addressLine, System.Int32? cityId, System.Int32? districtId, System.Int32? regionId, System.String advisorIdList, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ClientViewProvider.Find(transactionManager, start, pageLength , fileNumber, firstName, lastName, middleName, referance, pediatrician, blood, birthDate1, birthDate2, firstDate1, firstDate2, gender, ıdCard, age1, age2, mother, motherPhone, motherMobile, motherEmail, father, fatherPhone, fatherMobile, fatherEmail, addressLine, cityId, districtId, regionId, advisorIdList);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace



