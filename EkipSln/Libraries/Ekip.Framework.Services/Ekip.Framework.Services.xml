<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ekip.Framework.Services</name>
    </assembly>
    <members>
        <member name="T:Ekip.Framework.Services.AdvisorService">
            <summary>
            An component type implementation of the 'Advisor' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorService.#ctor">
            <summary>
            Initializes a new instance of the AdvisorService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.AdvisorServiceBase">
            <summary>
             An object representation of the 'Advisor' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Advisor.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Advisor"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Advisor"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.CreateAdvisor(System.Nullable{System.Byte},System.String,System.String,System.String,System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Advisor"/> instance.
            </summary>
            <param name="_titleId"></param>
            <param name="_fullName"></param>
            <param name="_email"></param>
            <param name="_phone"></param>
            <param name="_gsm"></param>
            <param name="_notes"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.AdvisorServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Get(Ekip.Framework.Entities.AdvisorKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.GetByAdvisorId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Advisor index.
            </summary>
            <param name="_advisorId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Advisor"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.GetByAdvisorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Advisor index.
            </summary>
            <param name="_advisorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Advisor"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Advisor" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Advisor" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Advisor</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Advisor</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Advisor</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Advisor} of <c>Advisor</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Advisor</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Advisor</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Advisor</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Advisor</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Advisor</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Insert(Ekip.Framework.Entities.Advisor)">
            <summary>
            public virtual method that Inserts a Advisor object into the datasource using a transaction.
            </summary>
            <param name="entity">Advisor object to Insert.</param>
            <remarks>After Inserting into the datasource, the Advisor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Advisor entity = new Advisor();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AdvisorService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Advisor})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Advisor</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Advisor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Advisor.
             <code><![CDATA[
             TList<Advisor> list = new TList<Advisor>();
             Advisor entity = new Advisor();
             entity.StringProperty = "foo";
             Advisor entity2 = new Advisor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdvisorService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Update(Ekip.Framework.Entities.Advisor)">
            <summary>
            public virtual method that Updates a Advisor object into the datasource using a transaction.
            </summary>
            <param name="entity">Advisor object to Update.</param>
            <remarks>After Updateing into the datasource, the Advisor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Advisor entity = AdvisorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AdvisorService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Advisor})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Advisor</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Advisor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Advisor.
             <code><![CDATA[
             TList<Advisor> list = new TList<Advisor>();
             Advisor entity = new Advisor();
             entity.StringProperty = "foo";
             Advisor entity2 = new Advisor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdvisorService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Save(Ekip.Framework.Entities.Advisor)">
            <summary>
            public virtual method that Saves a Advisor object into the datasource using a transaction.
            </summary>
            <param name="entity">Advisor object to Save.</param>
            <remarks>After Saveing into the datasource, the Advisor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Advisor entity = AdvisorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AdvisorService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Advisor})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Advisor</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Advisor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Advisor.
             <code><![CDATA[
             TList<Advisor> list = new TList<Advisor>();
             Advisor entity = new Advisor();
             entity.StringProperty = "foo";
             Advisor entity2 = new Advisor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdvisorService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Delete(Ekip.Framework.Entities.Advisor)">
            <summary>
            public virtual method that Deletes a Advisor object into the datasource using a transaction.
            </summary>
            <param name="entity">Advisor object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Advisor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Advisor entity = AdvisorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AdvisorService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Advisor})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Advisor</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Advisor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Advisor.
             <code><![CDATA[
             TList<Advisor> list = new TList<Advisor>();
             Advisor entity = new Advisor();
             entity.StringProperty = "foo";
             Advisor entity2 = new Advisor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdvisorService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Delete(Ekip.Framework.Entities.AdvisorKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _advisorId
            </summary>
            <param name="_advisorId">Advisor pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.DeepLoadByAdvisorId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Advisor"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_advisorId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Advisor Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Advisor"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.DeepLoad(Ekip.Framework.Entities.Advisor)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Advisor Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.AdvisorServiceBase.DeepLoad(Ekip.Framework.Entities.Advisor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.DeepLoad(Ekip.Framework.Entities.Advisor,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.AdvisorServiceBase.DeepLoad(Ekip.Framework.Entities.Advisor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Advisor Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.DeepLoad(Ekip.Framework.Entities.Advisor,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Advisor"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Advisor Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Advisor})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.AdvisorServiceBase.DeepLoad(Ekip.Framework.Entities.Advisor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Advisor},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.AdvisorServiceBase.DeepLoad(Ekip.Framework.Entities.Advisor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Advisor},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Advisor"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.DeepSave(Ekip.Framework.Entities.Advisor)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Advisor"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Advisor Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.DeepSave(Ekip.Framework.Entities.Advisor,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Advisor object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Advisor Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Advisor</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Advisor})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Advisor} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.AdvisorServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Advisor},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Advisor Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.SeanceQuestionService">
            <summary>
            An component type implementation of the 'SeanceQuestion' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionService.#ctor">
            <summary>
            Initializes a new instance of the SeanceQuestionService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.SeanceQuestionServiceBase">
            <summary>
             An object representation of the 'SeanceQuestion' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SeanceQuestion.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.CreateSeanceQuestion(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> instance.
            </summary>
            <param name="_questionRef"></param>
            <param name="_questionName"></param>
            <param name="_lineNumber"></param>
            <param name="_status"></param>
        </member>
        <member name="P:Ekip.Framework.Services.SeanceQuestionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Get(Ekip.Framework.Entities.SeanceQuestionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.GetByQuestionId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_SeanceQuestion index.
            </summary>
            <param name="_questionId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.GetByQuestionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_SeanceQuestion index.
            </summary>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.SeanceQuestion" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.SeanceQuestion" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SeanceQuestion</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SeanceQuestion</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SeanceQuestion</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SeanceQuestion} of <c>SeanceQuestion</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SeanceQuestion</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SeanceQuestion</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SeanceQuestion</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SeanceQuestion</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SeanceQuestion</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Insert(Ekip.Framework.Entities.SeanceQuestion)">
            <summary>
            public virtual method that Inserts a SeanceQuestion object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceQuestion object to Insert.</param>
            <remarks>After Inserting into the datasource, the SeanceQuestion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SeanceQuestion entity = new SeanceQuestion();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SeanceQuestionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestion})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceQuestion</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SeanceQuestion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SeanceQuestion.
             <code><![CDATA[
             TList<SeanceQuestion> list = new TList<SeanceQuestion>();
             SeanceQuestion entity = new SeanceQuestion();
             entity.StringProperty = "foo";
             SeanceQuestion entity2 = new SeanceQuestion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceQuestionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Update(Ekip.Framework.Entities.SeanceQuestion)">
            <summary>
            public virtual method that Updates a SeanceQuestion object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceQuestion object to Update.</param>
            <remarks>After Updateing into the datasource, the SeanceQuestion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SeanceQuestion entity = SeanceQuestionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SeanceQuestionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestion})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceQuestion</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SeanceQuestion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SeanceQuestion.
             <code><![CDATA[
             TList<SeanceQuestion> list = new TList<SeanceQuestion>();
             SeanceQuestion entity = new SeanceQuestion();
             entity.StringProperty = "foo";
             SeanceQuestion entity2 = new SeanceQuestion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceQuestionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Save(Ekip.Framework.Entities.SeanceQuestion)">
            <summary>
            public virtual method that Saves a SeanceQuestion object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceQuestion object to Save.</param>
            <remarks>After Saveing into the datasource, the SeanceQuestion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SeanceQuestion entity = SeanceQuestionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SeanceQuestionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestion})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceQuestion</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SeanceQuestion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SeanceQuestion.
             <code><![CDATA[
             TList<SeanceQuestion> list = new TList<SeanceQuestion>();
             SeanceQuestion entity = new SeanceQuestion();
             entity.StringProperty = "foo";
             SeanceQuestion entity2 = new SeanceQuestion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceQuestionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Delete(Ekip.Framework.Entities.SeanceQuestion)">
            <summary>
            public virtual method that Deletes a SeanceQuestion object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceQuestion object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SeanceQuestion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SeanceQuestion entity = SeanceQuestionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SeanceQuestionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestion})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceQuestion</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SeanceQuestion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SeanceQuestion.
             <code><![CDATA[
             TList<SeanceQuestion> list = new TList<SeanceQuestion>();
             SeanceQuestion entity = new SeanceQuestion();
             entity.StringProperty = "foo";
             SeanceQuestion entity2 = new SeanceQuestion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceQuestionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Delete(Ekip.Framework.Entities.SeanceQuestionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _questionId
            </summary>
            <param name="_questionId">SeanceQuestion pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepLoadByQuestionId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_questionId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SeanceQuestion Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestion)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SeanceQuestion Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestion,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SeanceQuestion Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestion,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SeanceQuestion Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestion})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestion},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestion},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepSave(Ekip.Framework.Entities.SeanceQuestion)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.SeanceQuestion"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SeanceQuestion Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepSave(Ekip.Framework.Entities.SeanceQuestion,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SeanceQuestion object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SeanceQuestion Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SeanceQuestion</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestion})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SeanceQuestion} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestion},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SeanceQuestion Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.SeanceService">
            <summary>
            An component type implementation of the 'Seance' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceService.#ctor">
            <summary>
            Initializes a new instance of the SeanceService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.SeanceServiceBase">
            <summary>
             An object representation of the 'Seance' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Seance.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Seance"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Seance"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.CreateSeance(System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.String,System.Byte,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Seance"/> instance.
            </summary>
            <param name="_clientId"></param>
            <param name="_advisorId"></param>
            <param name="_seanceDate"></param>
            <param name="_seanceTime"></param>
            <param name="_notes"></param>
            <param name="_seanceStatusId"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createdUserId"></param>
            <param name="_updatedUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.SeanceServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.GetByClientId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Seance_Client key.
            	FK_Seance_Client Description: 
            </summary>
            <param name="_clientId"></param>
            <returns>Returns a generic collection of Seance objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.GetByClientId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Seance_Client key.
            	FK_Seance_Client Description: 
            </summary>
            <param name="_clientId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>Seance</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Get(Ekip.Framework.Entities.SeanceKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.GetBySeanceId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Seance index.
            </summary>
            <param name="_seanceId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Seance"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.GetBySeanceId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Seance index.
            </summary>
            <param name="_seanceId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Seance"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Seance" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Seance" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Seance</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Seance</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Seance</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Seance} of <c>Seance</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Seance</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Seance</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Seance</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Seance</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Seance</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Insert(Ekip.Framework.Entities.Seance)">
            <summary>
            public virtual method that Inserts a Seance object into the datasource using a transaction.
            </summary>
            <param name="entity">Seance object to Insert.</param>
            <remarks>After Inserting into the datasource, the Seance object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Seance entity = new Seance();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SeanceService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Seance})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Seance</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Seance</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Seance.
             <code><![CDATA[
             TList<Seance> list = new TList<Seance>();
             Seance entity = new Seance();
             entity.StringProperty = "foo";
             Seance entity2 = new Seance();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Update(Ekip.Framework.Entities.Seance)">
            <summary>
            public virtual method that Updates a Seance object into the datasource using a transaction.
            </summary>
            <param name="entity">Seance object to Update.</param>
            <remarks>After Updateing into the datasource, the Seance object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Seance entity = SeanceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SeanceService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Seance})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Seance</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Seance</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Seance.
             <code><![CDATA[
             TList<Seance> list = new TList<Seance>();
             Seance entity = new Seance();
             entity.StringProperty = "foo";
             Seance entity2 = new Seance();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Save(Ekip.Framework.Entities.Seance)">
            <summary>
            public virtual method that Saves a Seance object into the datasource using a transaction.
            </summary>
            <param name="entity">Seance object to Save.</param>
            <remarks>After Saveing into the datasource, the Seance object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Seance entity = SeanceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SeanceService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Seance})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Seance</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Seance</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Seance.
             <code><![CDATA[
             TList<Seance> list = new TList<Seance>();
             Seance entity = new Seance();
             entity.StringProperty = "foo";
             Seance entity2 = new Seance();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Delete(Ekip.Framework.Entities.Seance)">
            <summary>
            public virtual method that Deletes a Seance object into the datasource using a transaction.
            </summary>
            <param name="entity">Seance object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Seance object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Seance entity = SeanceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SeanceService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Seance})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Seance</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Seance</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Seance.
             <code><![CDATA[
             TList<Seance> list = new TList<Seance>();
             Seance entity = new Seance();
             entity.StringProperty = "foo";
             Seance entity2 = new Seance();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Delete(Ekip.Framework.Entities.SeanceKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _seanceId
            </summary>
            <param name="_seanceId">Seance pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeleteBySeanceID(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'Seance_DeleteBySeanceID' stored procedure. 
            </summary>
            <param name="seanceId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeleteBySeanceID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            This method wrap the 'Seance_DeleteBySeanceID' stored procedure. 
            </summary>
            <param name="seanceId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeleteByClientID(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'Seance_DeleteByClientID' stored procedure. 
            </summary>
            <param name="clientId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeleteByClientID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            This method wrap the 'Seance_DeleteByClientID' stored procedure. 
            </summary>
            <param name="clientId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeepLoadBySeanceId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Seance"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_seanceId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Seance Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Seance"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeepLoad(Ekip.Framework.Entities.Seance)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Seance Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceServiceBase.DeepLoad(Ekip.Framework.Entities.Seance)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeepLoad(Ekip.Framework.Entities.Seance,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceServiceBase.DeepLoad(Ekip.Framework.Entities.Seance)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Seance Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeepLoad(Ekip.Framework.Entities.Seance,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Seance"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Seance Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Seance})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceServiceBase.DeepLoad(Ekip.Framework.Entities.Seance)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Seance},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceServiceBase.DeepLoad(Ekip.Framework.Entities.Seance)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Seance},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Seance"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeepSave(Ekip.Framework.Entities.Seance)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Seance"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Seance Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeepSave(Ekip.Framework.Entities.Seance,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Seance object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Seance Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Seance</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Seance})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Seance} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Seance},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Seance Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.SchoolService">
            <summary>
            An component type implementation of the 'School' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolService.#ctor">
            <summary>
            Initializes a new instance of the SchoolService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.SchoolServiceBase">
            <summary>
             An object representation of the 'School' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the School.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.School"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.School"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.CreateSchool(System.String,System.Byte,System.Byte,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.School"/> instance.
            </summary>
            <param name="_schoolName"></param>
            <param name="_corparationTypeId"></param>
            <param name="_schoolTypeId"></param>
            <param name="_provinceId"></param>
            <param name="_townId"></param>
            <param name="_address"></param>
            <param name="_phone"></param>
            <param name="_fax"></param>
            <param name="_webAddress"></param>
            <param name="_notes"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.SchoolServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Get(Ekip.Framework.Entities.SchoolKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.GetBySchoolId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_School_SchoolName index.
            </summary>
            <param name="_schoolId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.School"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.GetBySchoolId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_School_SchoolName index.
            </summary>
            <param name="_schoolId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.School"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.School" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.School" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>School</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>School</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>School</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{School} of <c>School</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>School</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>School</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>School</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>School</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>School</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Insert(Ekip.Framework.Entities.School)">
            <summary>
            public virtual method that Inserts a School object into the datasource using a transaction.
            </summary>
            <param name="entity">School object to Insert.</param>
            <remarks>After Inserting into the datasource, the School object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            School entity = new School();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SchoolService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.School})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>School</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>School</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of School.
             <code><![CDATA[
             TList<School> list = new TList<School>();
             School entity = new School();
             entity.StringProperty = "foo";
             School entity2 = new School();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SchoolService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Update(Ekip.Framework.Entities.School)">
            <summary>
            public virtual method that Updates a School object into the datasource using a transaction.
            </summary>
            <param name="entity">School object to Update.</param>
            <remarks>After Updateing into the datasource, the School object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            School entity = SchoolService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SchoolService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.School})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>School</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>School</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of School.
             <code><![CDATA[
             TList<School> list = new TList<School>();
             School entity = new School();
             entity.StringProperty = "foo";
             School entity2 = new School();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SchoolService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Save(Ekip.Framework.Entities.School)">
            <summary>
            public virtual method that Saves a School object into the datasource using a transaction.
            </summary>
            <param name="entity">School object to Save.</param>
            <remarks>After Saveing into the datasource, the School object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            School entity = SchoolService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SchoolService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.School})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>School</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>School</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of School.
             <code><![CDATA[
             TList<School> list = new TList<School>();
             School entity = new School();
             entity.StringProperty = "foo";
             School entity2 = new School();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SchoolService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Delete(Ekip.Framework.Entities.School)">
            <summary>
            public virtual method that Deletes a School object into the datasource using a transaction.
            </summary>
            <param name="entity">School object to Delete.</param>
            <remarks>After Deleteing into the datasource, the School object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            School entity = SchoolService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SchoolService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.School})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>School</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>School</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of School.
             <code><![CDATA[
             TList<School> list = new TList<School>();
             School entity = new School();
             entity.StringProperty = "foo";
             School entity2 = new School();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SchoolService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Delete(Ekip.Framework.Entities.SchoolKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _schoolId
            </summary>
            <param name="_schoolId">School pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.DeepLoadBySchoolId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.School"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_schoolId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">School Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.School"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.DeepLoad(Ekip.Framework.Entities.School)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">School Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SchoolServiceBase.DeepLoad(Ekip.Framework.Entities.School)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.DeepLoad(Ekip.Framework.Entities.School,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SchoolServiceBase.DeepLoad(Ekip.Framework.Entities.School)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">School Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.DeepLoad(Ekip.Framework.Entities.School,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.School"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">School Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.School})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SchoolServiceBase.DeepLoad(Ekip.Framework.Entities.School)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.School},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SchoolServiceBase.DeepLoad(Ekip.Framework.Entities.School)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.School},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.School"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.DeepSave(Ekip.Framework.Entities.School)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.School"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">School Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.DeepSave(Ekip.Framework.Entities.School,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the School object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">School Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>School</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.School})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{School} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SchoolServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.School},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">School Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.ReasonService">
            <summary>
            An component type implementation of the 'Reason' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonService.#ctor">
            <summary>
            Initializes a new instance of the ReasonService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ReasonServiceBase">
            <summary>
             An object representation of the 'Reason' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Reason.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Reason"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Reason"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.CreateReason(System.Nullable{System.Int32},System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Reason"/> instance.
            </summary>
            <param name="_reasonKey"></param>
            <param name="_reasonValue"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.ReasonServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Get(Ekip.Framework.Entities.ReasonKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.GetByReasonKey(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Reason index.
            </summary>
            <param name="_reasonKey"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Reason"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.GetByReasonKey(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Reason index.
            </summary>
            <param name="_reasonKey"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Reason"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.GetByReasonId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Reason_1 index.
            </summary>
            <param name="_reasonId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Reason"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.GetByReasonId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Reason_1 index.
            </summary>
            <param name="_reasonId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Reason"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Reason" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Reason" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Reason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Reason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Reason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Reason} of <c>Reason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Reason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Reason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Reason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Reason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Reason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Insert(Ekip.Framework.Entities.Reason)">
            <summary>
            public virtual method that Inserts a Reason object into the datasource using a transaction.
            </summary>
            <param name="entity">Reason object to Insert.</param>
            <remarks>After Inserting into the datasource, the Reason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Reason entity = new Reason();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ReasonService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Reason})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Reason</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Reason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Reason.
             <code><![CDATA[
             TList<Reason> list = new TList<Reason>();
             Reason entity = new Reason();
             entity.StringProperty = "foo";
             Reason entity2 = new Reason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReasonService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Update(Ekip.Framework.Entities.Reason)">
            <summary>
            public virtual method that Updates a Reason object into the datasource using a transaction.
            </summary>
            <param name="entity">Reason object to Update.</param>
            <remarks>After Updateing into the datasource, the Reason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Reason entity = ReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ReasonService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Reason})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Reason</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Reason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Reason.
             <code><![CDATA[
             TList<Reason> list = new TList<Reason>();
             Reason entity = new Reason();
             entity.StringProperty = "foo";
             Reason entity2 = new Reason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReasonService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Save(Ekip.Framework.Entities.Reason)">
            <summary>
            public virtual method that Saves a Reason object into the datasource using a transaction.
            </summary>
            <param name="entity">Reason object to Save.</param>
            <remarks>After Saveing into the datasource, the Reason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Reason entity = ReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ReasonService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Reason})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Reason</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Reason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Reason.
             <code><![CDATA[
             TList<Reason> list = new TList<Reason>();
             Reason entity = new Reason();
             entity.StringProperty = "foo";
             Reason entity2 = new Reason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReasonService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Delete(Ekip.Framework.Entities.Reason)">
            <summary>
            public virtual method that Deletes a Reason object into the datasource using a transaction.
            </summary>
            <param name="entity">Reason object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Reason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Reason entity = ReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ReasonService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Reason})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Reason</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Reason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Reason.
             <code><![CDATA[
             TList<Reason> list = new TList<Reason>();
             Reason entity = new Reason();
             entity.StringProperty = "foo";
             Reason entity2 = new Reason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReasonService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Delete(Ekip.Framework.Entities.ReasonKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _reasonId
            </summary>
            <param name="_reasonId">Reason pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.DeepLoadByReasonKey(System.Nullable{System.Int32},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Reason"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_reasonKey"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Reason Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Reason"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.DeepLoadByReasonId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Reason"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_reasonId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Reason Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Reason"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.DeepLoad(Ekip.Framework.Entities.Reason)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Reason Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ReasonServiceBase.DeepLoad(Ekip.Framework.Entities.Reason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.DeepLoad(Ekip.Framework.Entities.Reason,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ReasonServiceBase.DeepLoad(Ekip.Framework.Entities.Reason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Reason Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.DeepLoad(Ekip.Framework.Entities.Reason,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Reason"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Reason Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Reason})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ReasonServiceBase.DeepLoad(Ekip.Framework.Entities.Reason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Reason},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ReasonServiceBase.DeepLoad(Ekip.Framework.Entities.Reason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Reason},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Reason"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.DeepSave(Ekip.Framework.Entities.Reason)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Reason"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Reason Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.DeepSave(Ekip.Framework.Entities.Reason,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Reason object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Reason Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Reason</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Reason})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Reason} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ReasonServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Reason},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Reason Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.QuestionFormGroupService">
            <summary>
            An component type implementation of the 'QuestionForm_Group' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupService.#ctor">
            <summary>
            Initializes a new instance of the QuestionFormGroupService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.QuestionFormGroupServiceBase">
            <summary>
             An object representation of the 'QuestionFormGroup' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the QuestionFormGroup.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.CreateQuestionFormGroup(System.String,System.Int32,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> instance.
            </summary>
            <param name="_groupName"></param>
            <param name="_lineNumber"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.QuestionFormGroupServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Get(Ekip.Framework.Entities.QuestionFormGroupKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.GetByGroupId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_QuestionForm_Group index.
            </summary>
            <param name="_groupId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.GetByGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_QuestionForm_Group index.
            </summary>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.QuestionFormGroup" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.QuestionFormGroup" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{QuestionFormGroup} of <c>QuestionFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>QuestionFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Insert(Ekip.Framework.Entities.QuestionFormGroup)">
            <summary>
            public virtual method that Inserts a QuestionFormGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionFormGroup object to Insert.</param>
            <remarks>After Inserting into the datasource, the QuestionFormGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            QuestionFormGroup entity = new QuestionFormGroup();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	QuestionFormGroupService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormGroup})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionFormGroup</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>QuestionFormGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of QuestionFormGroup.
             <code><![CDATA[
             TList<QuestionFormGroup> list = new TList<QuestionFormGroup>();
             QuestionFormGroup entity = new QuestionFormGroup();
             entity.StringProperty = "foo";
             QuestionFormGroup entity2 = new QuestionFormGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormGroupService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Update(Ekip.Framework.Entities.QuestionFormGroup)">
            <summary>
            public virtual method that Updates a QuestionFormGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionFormGroup object to Update.</param>
            <remarks>After Updateing into the datasource, the QuestionFormGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            QuestionFormGroup entity = QuestionFormGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	QuestionFormGroupService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormGroup})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionFormGroup</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>QuestionFormGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of QuestionFormGroup.
             <code><![CDATA[
             TList<QuestionFormGroup> list = new TList<QuestionFormGroup>();
             QuestionFormGroup entity = new QuestionFormGroup();
             entity.StringProperty = "foo";
             QuestionFormGroup entity2 = new QuestionFormGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormGroupService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Save(Ekip.Framework.Entities.QuestionFormGroup)">
            <summary>
            public virtual method that Saves a QuestionFormGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionFormGroup object to Save.</param>
            <remarks>After Saveing into the datasource, the QuestionFormGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            QuestionFormGroup entity = QuestionFormGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	QuestionFormGroupService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormGroup})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionFormGroup</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>QuestionFormGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of QuestionFormGroup.
             <code><![CDATA[
             TList<QuestionFormGroup> list = new TList<QuestionFormGroup>();
             QuestionFormGroup entity = new QuestionFormGroup();
             entity.StringProperty = "foo";
             QuestionFormGroup entity2 = new QuestionFormGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormGroupService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Delete(Ekip.Framework.Entities.QuestionFormGroup)">
            <summary>
            public virtual method that Deletes a QuestionFormGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionFormGroup object to Delete.</param>
            <remarks>After Deleteing into the datasource, the QuestionFormGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            QuestionFormGroup entity = QuestionFormGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	QuestionFormGroupService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormGroup})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionFormGroup</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>QuestionFormGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of QuestionFormGroup.
             <code><![CDATA[
             TList<QuestionFormGroup> list = new TList<QuestionFormGroup>();
             QuestionFormGroup entity = new QuestionFormGroup();
             entity.StringProperty = "foo";
             QuestionFormGroup entity2 = new QuestionFormGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormGroupService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Delete(Ekip.Framework.Entities.QuestionFormGroupKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _groupId
            </summary>
            <param name="_groupId">QuestionFormGroup pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepLoadByGroupId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_groupId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionFormGroup Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormGroup)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">QuestionFormGroup Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormGroup,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">QuestionFormGroup Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormGroup,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionFormGroup Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormGroup})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormGroup},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormGroup},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepSave(Ekip.Framework.Entities.QuestionFormGroup)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.QuestionFormGroup"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">QuestionFormGroup Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepSave(Ekip.Framework.Entities.QuestionFormGroup,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the QuestionFormGroup object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">QuestionFormGroup Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>QuestionFormGroup</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormGroup})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{QuestionFormGroup} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormGroupServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormGroup},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QuestionFormGroup Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.SeanceQuestionOptionService">
            <summary>
            An component type implementation of the 'SeanceQuestion_Option' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionService.#ctor">
            <summary>
            Initializes a new instance of the SeanceQuestionOptionService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.SeanceQuestionOptionServiceBase">
            <summary>
             An object representation of the 'SeanceQuestionOption' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SeanceQuestionOption.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.CreateSeanceQuestionOption(System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> instance.
            </summary>
            <param name="_questionId"></param>
            <param name="_optionName"></param>
        </member>
        <member name="P:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.GetByQuestionId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_SeanceQuestion_Option_SeanceQuestion key.
            	FK_SeanceQuestion_Option_SeanceQuestion Description: 
            </summary>
            <param name="_questionId"></param>
            <returns>Returns a generic collection of SeanceQuestionOption objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.GetByQuestionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_SeanceQuestion_Option_SeanceQuestion key.
            	FK_SeanceQuestion_Option_SeanceQuestion Description: 
            </summary>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>SeanceQuestionOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Get(Ekip.Framework.Entities.SeanceQuestionOptionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.GetByOptionId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_SeanceQuestion_Option index.
            </summary>
            <param name="_optionId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.GetByOptionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_SeanceQuestion_Option index.
            </summary>
            <param name="_optionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SeanceQuestionOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SeanceQuestionOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SeanceQuestionOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SeanceQuestionOption} of <c>SeanceQuestionOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SeanceQuestionOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SeanceQuestionOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SeanceQuestionOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SeanceQuestionOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SeanceQuestionOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Insert(Ekip.Framework.Entities.SeanceQuestionOption)">
            <summary>
            public virtual method that Inserts a SeanceQuestionOption object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceQuestionOption object to Insert.</param>
            <remarks>After Inserting into the datasource, the SeanceQuestionOption object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SeanceQuestionOption entity = new SeanceQuestionOption();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SeanceQuestionOptionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionOption})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceQuestionOption</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SeanceQuestionOption</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SeanceQuestionOption.
             <code><![CDATA[
             TList<SeanceQuestionOption> list = new TList<SeanceQuestionOption>();
             SeanceQuestionOption entity = new SeanceQuestionOption();
             entity.StringProperty = "foo";
             SeanceQuestionOption entity2 = new SeanceQuestionOption();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceQuestionOptionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Update(Ekip.Framework.Entities.SeanceQuestionOption)">
            <summary>
            public virtual method that Updates a SeanceQuestionOption object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceQuestionOption object to Update.</param>
            <remarks>After Updateing into the datasource, the SeanceQuestionOption object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SeanceQuestionOption entity = SeanceQuestionOptionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SeanceQuestionOptionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionOption})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceQuestionOption</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SeanceQuestionOption</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SeanceQuestionOption.
             <code><![CDATA[
             TList<SeanceQuestionOption> list = new TList<SeanceQuestionOption>();
             SeanceQuestionOption entity = new SeanceQuestionOption();
             entity.StringProperty = "foo";
             SeanceQuestionOption entity2 = new SeanceQuestionOption();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceQuestionOptionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Save(Ekip.Framework.Entities.SeanceQuestionOption)">
            <summary>
            public virtual method that Saves a SeanceQuestionOption object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceQuestionOption object to Save.</param>
            <remarks>After Saveing into the datasource, the SeanceQuestionOption object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SeanceQuestionOption entity = SeanceQuestionOptionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SeanceQuestionOptionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionOption})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceQuestionOption</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SeanceQuestionOption</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SeanceQuestionOption.
             <code><![CDATA[
             TList<SeanceQuestionOption> list = new TList<SeanceQuestionOption>();
             SeanceQuestionOption entity = new SeanceQuestionOption();
             entity.StringProperty = "foo";
             SeanceQuestionOption entity2 = new SeanceQuestionOption();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceQuestionOptionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Delete(Ekip.Framework.Entities.SeanceQuestionOption)">
            <summary>
            public virtual method that Deletes a SeanceQuestionOption object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceQuestionOption object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SeanceQuestionOption object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SeanceQuestionOption entity = SeanceQuestionOptionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SeanceQuestionOptionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionOption})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceQuestionOption</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SeanceQuestionOption</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SeanceQuestionOption.
             <code><![CDATA[
             TList<SeanceQuestionOption> list = new TList<SeanceQuestionOption>();
             SeanceQuestionOption entity = new SeanceQuestionOption();
             entity.StringProperty = "foo";
             SeanceQuestionOption entity2 = new SeanceQuestionOption();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceQuestionOptionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Delete(Ekip.Framework.Entities.SeanceQuestionOptionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _optionId
            </summary>
            <param name="_optionId">SeanceQuestionOption pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepLoadByOptionId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_optionId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SeanceQuestionOption Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionOption)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SeanceQuestionOption Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionOption)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionOption,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionOption)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SeanceQuestionOption Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionOption,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SeanceQuestionOption Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionOption})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionOption)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionOption},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionOption)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionOption},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepSave(Ekip.Framework.Entities.SeanceQuestionOption)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.SeanceQuestionOption"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SeanceQuestionOption Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepSave(Ekip.Framework.Entities.SeanceQuestionOption,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SeanceQuestionOption object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SeanceQuestionOption Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SeanceQuestionOption</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionOption})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SeanceQuestionOption} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionOptionServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionOption},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SeanceQuestionOption Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.TownService">
            <summary>
            An component type implementation of the 'Town' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.TownService.#ctor">
            <summary>
            Initializes a new instance of the TownService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.TownServiceBase">
            <summary>
             An object representation of the 'Town' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Town.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Town"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Town"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.CreateTown(System.Int32,System.Int64,System.Int64,System.Int64,System.Int32,System.String,System.String,System.String,System.Int32,System.DateTime,System.TimeSpan,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Town"/> instance.
            </summary>
            <param name="_rowNumber"></param>
            <param name="_adminId"></param>
            <param name="_objectId"></param>
            <param name="_parentId"></param>
            <param name="_provinceId"></param>
            <param name="_townName"></param>
            <param name="_longitude"></param>
            <param name="_latitude"></param>
            <param name="_type"></param>
            <param name="_createDate"></param>
            <param name="_createTime"></param>
            <param name="_updateDate"></param>
            <param name="_updateTime"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.TownServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Get(Ekip.Framework.Entities.TownKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.GetByProvinceId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Town_ProvinceId index.
            </summary>
            <param name="_provinceId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.GetByProvinceId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Town_ProvinceId index.
            </summary>
            <param name="_provinceId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.GetByTownId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Town index.
            </summary>
            <param name="_townId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Town"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.GetByTownId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Town index.
            </summary>
            <param name="_townId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Town"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Town" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Town" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Town</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Town</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Town</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Town} of <c>Town</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Town</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Town</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Town</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Town</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Town</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Insert(Ekip.Framework.Entities.Town)">
            <summary>
            public virtual method that Inserts a Town object into the datasource using a transaction.
            </summary>
            <param name="entity">Town object to Insert.</param>
            <remarks>After Inserting into the datasource, the Town object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Town entity = new Town();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TownService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Town})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Town</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Town</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Town.
             <code><![CDATA[
             TList<Town> list = new TList<Town>();
             Town entity = new Town();
             entity.StringProperty = "foo";
             Town entity2 = new Town();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TownService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Update(Ekip.Framework.Entities.Town)">
            <summary>
            public virtual method that Updates a Town object into the datasource using a transaction.
            </summary>
            <param name="entity">Town object to Update.</param>
            <remarks>After Updateing into the datasource, the Town object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Town entity = TownService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TownService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Town})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Town</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Town</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Town.
             <code><![CDATA[
             TList<Town> list = new TList<Town>();
             Town entity = new Town();
             entity.StringProperty = "foo";
             Town entity2 = new Town();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TownService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Save(Ekip.Framework.Entities.Town)">
            <summary>
            public virtual method that Saves a Town object into the datasource using a transaction.
            </summary>
            <param name="entity">Town object to Save.</param>
            <remarks>After Saveing into the datasource, the Town object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Town entity = TownService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TownService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Town})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Town</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Town</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Town.
             <code><![CDATA[
             TList<Town> list = new TList<Town>();
             Town entity = new Town();
             entity.StringProperty = "foo";
             Town entity2 = new Town();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TownService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Delete(Ekip.Framework.Entities.Town)">
            <summary>
            public virtual method that Deletes a Town object into the datasource using a transaction.
            </summary>
            <param name="entity">Town object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Town object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Town entity = TownService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TownService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Town})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Town</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Town</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Town.
             <code><![CDATA[
             TList<Town> list = new TList<Town>();
             Town entity = new Town();
             entity.StringProperty = "foo";
             Town entity2 = new Town();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TownService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Delete(Ekip.Framework.Entities.TownKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _townId
            </summary>
            <param name="_townId">Town pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.GetByProvinceId(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'Town_GetByProvinceId' stored procedure. 
            </summary>
            <param name="provinceId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.GetByProvinceId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            This method wrap the 'Town_GetByProvinceId' stored procedure. 
            </summary>
            <param name="provinceId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.DeepLoadByProvinceId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_provinceId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Town Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.DeepLoadByTownId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Town"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_townId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Town Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Town"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.DeepLoad(Ekip.Framework.Entities.Town)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Town Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.TownServiceBase.DeepLoad(Ekip.Framework.Entities.Town)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.DeepLoad(Ekip.Framework.Entities.Town,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.TownServiceBase.DeepLoad(Ekip.Framework.Entities.Town)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Town Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.DeepLoad(Ekip.Framework.Entities.Town,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Town"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Town Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Town})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.TownServiceBase.DeepLoad(Ekip.Framework.Entities.Town)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Town},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.TownServiceBase.DeepLoad(Ekip.Framework.Entities.Town)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Town},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Town"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.DeepSave(Ekip.Framework.Entities.Town)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Town"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Town Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.DeepSave(Ekip.Framework.Entities.Town,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Town object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Town Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Town</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Town})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Town} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.TownServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Town},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Town Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.SeanceReasonService">
            <summary>
            An component type implementation of the 'Seance_Reason' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonService.#ctor">
            <summary>
            Initializes a new instance of the SeanceReasonService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.SeanceReasonServiceBase">
            <summary>
             An object representation of the 'SeanceReason' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SeanceReason.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.SeanceReason"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.SeanceReason"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.CreateSeanceReason(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.SeanceReason"/> instance.
            </summary>
            <param name="_seanceId"></param>
            <param name="_reasonId"></param>
        </member>
        <member name="P:Ekip.Framework.Services.SeanceReasonServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.GetByReasonId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Seance_Reason_Reason key.
            	FK_Seance_Reason_Reason Description: 
            </summary>
            <param name="_reasonId"></param>
            <returns>Returns a generic collection of SeanceReason objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.GetByReasonId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Seance_Reason_Reason key.
            	FK_Seance_Reason_Reason Description: 
            </summary>
            <param name="_reasonId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>SeanceReason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.GetBySeanceId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Seance_Reason_Seance key.
            	FK_Seance_Reason_Seance Description: 
            </summary>
            <param name="_seanceId"></param>
            <returns>Returns a generic collection of SeanceReason objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.GetBySeanceId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Seance_Reason_Seance key.
            	FK_Seance_Reason_Seance Description: 
            </summary>
            <param name="_seanceId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>SeanceReason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Get(Ekip.Framework.Entities.SeanceReasonKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.GetByRowId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Seance_Reason index.
            </summary>
            <param name="_rowId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceReason"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.GetByRowId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Seance_Reason index.
            </summary>
            <param name="_rowId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceReason"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.SeanceReason" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.SeanceReason" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SeanceReason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SeanceReason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SeanceReason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SeanceReason} of <c>SeanceReason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SeanceReason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SeanceReason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SeanceReason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SeanceReason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SeanceReason</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Insert(Ekip.Framework.Entities.SeanceReason)">
            <summary>
            public virtual method that Inserts a SeanceReason object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceReason object to Insert.</param>
            <remarks>After Inserting into the datasource, the SeanceReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SeanceReason entity = new SeanceReason();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SeanceReasonService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceReason})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceReason</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SeanceReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SeanceReason.
             <code><![CDATA[
             TList<SeanceReason> list = new TList<SeanceReason>();
             SeanceReason entity = new SeanceReason();
             entity.StringProperty = "foo";
             SeanceReason entity2 = new SeanceReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceReasonService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Update(Ekip.Framework.Entities.SeanceReason)">
            <summary>
            public virtual method that Updates a SeanceReason object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceReason object to Update.</param>
            <remarks>After Updateing into the datasource, the SeanceReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SeanceReason entity = SeanceReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SeanceReasonService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceReason})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceReason</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SeanceReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SeanceReason.
             <code><![CDATA[
             TList<SeanceReason> list = new TList<SeanceReason>();
             SeanceReason entity = new SeanceReason();
             entity.StringProperty = "foo";
             SeanceReason entity2 = new SeanceReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceReasonService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Save(Ekip.Framework.Entities.SeanceReason)">
            <summary>
            public virtual method that Saves a SeanceReason object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceReason object to Save.</param>
            <remarks>After Saveing into the datasource, the SeanceReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SeanceReason entity = SeanceReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SeanceReasonService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceReason})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceReason</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SeanceReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SeanceReason.
             <code><![CDATA[
             TList<SeanceReason> list = new TList<SeanceReason>();
             SeanceReason entity = new SeanceReason();
             entity.StringProperty = "foo";
             SeanceReason entity2 = new SeanceReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceReasonService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Delete(Ekip.Framework.Entities.SeanceReason)">
            <summary>
            public virtual method that Deletes a SeanceReason object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceReason object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SeanceReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SeanceReason entity = SeanceReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SeanceReasonService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceReason})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceReason</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SeanceReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SeanceReason.
             <code><![CDATA[
             TList<SeanceReason> list = new TList<SeanceReason>();
             SeanceReason entity = new SeanceReason();
             entity.StringProperty = "foo";
             SeanceReason entity2 = new SeanceReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceReasonService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Delete(Ekip.Framework.Entities.SeanceReasonKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _rowId
            </summary>
            <param name="_rowId">SeanceReason pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepLoadByRowId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.SeanceReason"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SeanceReason Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceReason"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceReason)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SeanceReason Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceReason,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SeanceReason Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceReason,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.SeanceReason"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SeanceReason Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceReason})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceReason},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceReason},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.SeanceReason"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepSave(Ekip.Framework.Entities.SeanceReason)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.SeanceReason"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SeanceReason Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepSave(Ekip.Framework.Entities.SeanceReason,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SeanceReason object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SeanceReason Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SeanceReason</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceReason})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SeanceReason} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceReasonServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceReason},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SeanceReason Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.TeacherService">
            <summary>
            An component type implementation of the 'Teacher' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherService.#ctor">
            <summary>
            Initializes a new instance of the TeacherService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.TeacherServiceBase">
            <summary>
             An object representation of the 'Teacher' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Teacher.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Teacher"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Teacher"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.CreateTeacher(System.Int32,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Teacher"/> instance.
            </summary>
            <param name="_schoolId"></param>
            <param name="_firstName"></param>
            <param name="_lastName"></param>
            <param name="_phone"></param>
            <param name="_gsm"></param>
            <param name="_email"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.TeacherServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.GetBySchoolId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Teacher_School key.
            	FK_Teacher_School Description: 
            </summary>
            <param name="_schoolId"></param>
            <returns>Returns a generic collection of Teacher objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.GetBySchoolId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Teacher_School key.
            	FK_Teacher_School Description: 
            </summary>
            <param name="_schoolId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>Teacher</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Get(Ekip.Framework.Entities.TeacherKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.GetByTeacherId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Teacher_1 index.
            </summary>
            <param name="_teacherId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Teacher"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.GetByTeacherId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Teacher_1 index.
            </summary>
            <param name="_teacherId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Teacher"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Teacher" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Teacher" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Teacher</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Teacher</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Teacher</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Teacher} of <c>Teacher</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Teacher</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Teacher</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Teacher</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Teacher</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Teacher</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Insert(Ekip.Framework.Entities.Teacher)">
            <summary>
            public virtual method that Inserts a Teacher object into the datasource using a transaction.
            </summary>
            <param name="entity">Teacher object to Insert.</param>
            <remarks>After Inserting into the datasource, the Teacher object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Teacher entity = new Teacher();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TeacherService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Teacher})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Teacher</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Teacher</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Teacher.
             <code><![CDATA[
             TList<Teacher> list = new TList<Teacher>();
             Teacher entity = new Teacher();
             entity.StringProperty = "foo";
             Teacher entity2 = new Teacher();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TeacherService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Update(Ekip.Framework.Entities.Teacher)">
            <summary>
            public virtual method that Updates a Teacher object into the datasource using a transaction.
            </summary>
            <param name="entity">Teacher object to Update.</param>
            <remarks>After Updateing into the datasource, the Teacher object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Teacher entity = TeacherService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TeacherService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Teacher})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Teacher</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Teacher</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Teacher.
             <code><![CDATA[
             TList<Teacher> list = new TList<Teacher>();
             Teacher entity = new Teacher();
             entity.StringProperty = "foo";
             Teacher entity2 = new Teacher();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TeacherService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Save(Ekip.Framework.Entities.Teacher)">
            <summary>
            public virtual method that Saves a Teacher object into the datasource using a transaction.
            </summary>
            <param name="entity">Teacher object to Save.</param>
            <remarks>After Saveing into the datasource, the Teacher object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Teacher entity = TeacherService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TeacherService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Teacher})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Teacher</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Teacher</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Teacher.
             <code><![CDATA[
             TList<Teacher> list = new TList<Teacher>();
             Teacher entity = new Teacher();
             entity.StringProperty = "foo";
             Teacher entity2 = new Teacher();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TeacherService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Delete(Ekip.Framework.Entities.Teacher)">
            <summary>
            public virtual method that Deletes a Teacher object into the datasource using a transaction.
            </summary>
            <param name="entity">Teacher object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Teacher object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Teacher entity = TeacherService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TeacherService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Teacher})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Teacher</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Teacher</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Teacher.
             <code><![CDATA[
             TList<Teacher> list = new TList<Teacher>();
             Teacher entity = new Teacher();
             entity.StringProperty = "foo";
             Teacher entity2 = new Teacher();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TeacherService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Delete(Ekip.Framework.Entities.TeacherKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _teacherId
            </summary>
            <param name="_teacherId">Teacher pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.DeepLoadByTeacherId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Teacher"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_teacherId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Teacher Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Teacher"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.DeepLoad(Ekip.Framework.Entities.Teacher)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Teacher Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.TeacherServiceBase.DeepLoad(Ekip.Framework.Entities.Teacher)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.DeepLoad(Ekip.Framework.Entities.Teacher,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.TeacherServiceBase.DeepLoad(Ekip.Framework.Entities.Teacher)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Teacher Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.DeepLoad(Ekip.Framework.Entities.Teacher,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Teacher"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Teacher Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Teacher})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.TeacherServiceBase.DeepLoad(Ekip.Framework.Entities.Teacher)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Teacher},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.TeacherServiceBase.DeepLoad(Ekip.Framework.Entities.Teacher)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Teacher},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Teacher"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.DeepSave(Ekip.Framework.Entities.Teacher)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Teacher"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Teacher Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.DeepSave(Ekip.Framework.Entities.Teacher,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Teacher object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Teacher Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Teacher</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Teacher})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Teacher} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.TeacherServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Teacher},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Teacher Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.WippsiService">
            <summary>
            An component type implementation of the 'Wippsi' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiService.#ctor">
            <summary>
            Initializes a new instance of the WippsiService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.WippsiServiceBase">
            <summary>
             An object representation of the 'Wippsi' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Wippsi.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Wippsi"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Wippsi"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.CreateWippsi(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.DateTime,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Wippsi"/> instance.
            </summary>
            <param name="_seanceId"></param>
            <param name="_generalRawScore"></param>
            <param name="_generalStandartScore"></param>
            <param name="_similarityRawScore"></param>
            <param name="_similarityStandartScore"></param>
            <param name="_arithmeticRawScore"></param>
            <param name="_arithmeticStandartScore"></param>
            <param name="_wordRawScore"></param>
            <param name="_wordStandartScore"></param>
            <param name="_understandingRawScore"></param>
            <param name="_understandingStandartScore"></param>
            <param name="_sentencesRawScore"></param>
            <param name="_sentencesStandartScore"></param>
            <param name="_ımageDefineRawScore"></param>
            <param name="_ımageDefineStandartScore"></param>
            <param name="_animalHomesRawScore"></param>
            <param name="_animalHomesStandartScore"></param>
            <param name="_geometricShapeRawScore"></param>
            <param name="_geometricShapeStandartScore"></param>
            <param name="_blocksPatternRawScore"></param>
            <param name="_blocksPatternStandartScore"></param>
            <param name="_animalHomesAgainRawScore"></param>
            <param name="_animalHomesAgainStandartScore"></param>
            <param name="_mazesRawScore"></param>
            <param name="_mazesStandartScore"></param>
            <param name="_totalVerbalScore"></param>
            <param name="_totalPerformanceScore"></param>
            <param name="_totalScore"></param>
            <param name="_notes"></param>
            <param name="_testDate"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.WippsiServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Get(Ekip.Framework.Entities.WippsiKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.GetByWippsiId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Wippsi index.
            </summary>
            <param name="_wippsiId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Wippsi"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.GetByWippsiId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Wippsi index.
            </summary>
            <param name="_wippsiId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Wippsi"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Wippsi" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Wippsi" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Wippsi</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Wippsi</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Wippsi</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Wippsi} of <c>Wippsi</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Wippsi</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Wippsi</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Wippsi</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Wippsi</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Wippsi</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Insert(Ekip.Framework.Entities.Wippsi)">
            <summary>
            public virtual method that Inserts a Wippsi object into the datasource using a transaction.
            </summary>
            <param name="entity">Wippsi object to Insert.</param>
            <remarks>After Inserting into the datasource, the Wippsi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Wippsi entity = new Wippsi();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	WippsiService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wippsi})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Wippsi</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Wippsi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Wippsi.
             <code><![CDATA[
             TList<Wippsi> list = new TList<Wippsi>();
             Wippsi entity = new Wippsi();
             entity.StringProperty = "foo";
             Wippsi entity2 = new Wippsi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WippsiService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Update(Ekip.Framework.Entities.Wippsi)">
            <summary>
            public virtual method that Updates a Wippsi object into the datasource using a transaction.
            </summary>
            <param name="entity">Wippsi object to Update.</param>
            <remarks>After Updateing into the datasource, the Wippsi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Wippsi entity = WippsiService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	WippsiService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wippsi})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Wippsi</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Wippsi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Wippsi.
             <code><![CDATA[
             TList<Wippsi> list = new TList<Wippsi>();
             Wippsi entity = new Wippsi();
             entity.StringProperty = "foo";
             Wippsi entity2 = new Wippsi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WippsiService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Save(Ekip.Framework.Entities.Wippsi)">
            <summary>
            public virtual method that Saves a Wippsi object into the datasource using a transaction.
            </summary>
            <param name="entity">Wippsi object to Save.</param>
            <remarks>After Saveing into the datasource, the Wippsi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Wippsi entity = WippsiService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	WippsiService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wippsi})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Wippsi</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Wippsi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Wippsi.
             <code><![CDATA[
             TList<Wippsi> list = new TList<Wippsi>();
             Wippsi entity = new Wippsi();
             entity.StringProperty = "foo";
             Wippsi entity2 = new Wippsi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WippsiService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Delete(Ekip.Framework.Entities.Wippsi)">
            <summary>
            public virtual method that Deletes a Wippsi object into the datasource using a transaction.
            </summary>
            <param name="entity">Wippsi object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Wippsi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Wippsi entity = WippsiService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	WippsiService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wippsi})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Wippsi</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Wippsi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Wippsi.
             <code><![CDATA[
             TList<Wippsi> list = new TList<Wippsi>();
             Wippsi entity = new Wippsi();
             entity.StringProperty = "foo";
             Wippsi entity2 = new Wippsi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WippsiService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Delete(Ekip.Framework.Entities.WippsiKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _wippsiId
            </summary>
            <param name="_wippsiId">Wippsi pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.DeepLoadByWippsiId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Wippsi"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_wippsiId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Wippsi Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Wippsi"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.DeepLoad(Ekip.Framework.Entities.Wippsi)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Wippsi Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.WippsiServiceBase.DeepLoad(Ekip.Framework.Entities.Wippsi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.DeepLoad(Ekip.Framework.Entities.Wippsi,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.WippsiServiceBase.DeepLoad(Ekip.Framework.Entities.Wippsi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Wippsi Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.DeepLoad(Ekip.Framework.Entities.Wippsi,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Wippsi"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Wippsi Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wippsi})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.WippsiServiceBase.DeepLoad(Ekip.Framework.Entities.Wippsi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wippsi},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.WippsiServiceBase.DeepLoad(Ekip.Framework.Entities.Wippsi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wippsi},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Wippsi"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.DeepSave(Ekip.Framework.Entities.Wippsi)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Wippsi"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Wippsi Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.DeepSave(Ekip.Framework.Entities.Wippsi,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Wippsi object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Wippsi Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Wippsi</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wippsi})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Wippsi} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.WippsiServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wippsi},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Wippsi Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.SeanceQuestionAnswerService">
            <summary>
            An component type implementation of the 'SeanceQuestion_Answer' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerService.#ctor">
            <summary>
            Initializes a new instance of the SeanceQuestionAnswerService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase">
            <summary>
             An object representation of the 'SeanceQuestionAnswer' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SeanceQuestionAnswer.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.CreateSeanceQuestionAnswer(System.Nullable{System.Int32},System.Int32,System.Int32,System.DateTime,System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> instance.
            </summary>
            <param name="_clientId"></param>
            <param name="_questionId"></param>
            <param name="_optionId"></param>
            <param name="_createOn"></param>
            <param name="_updateOn"></param>
        </member>
        <member name="P:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetByClientId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_SeanceQuestion_Answer_Client key.
            	FK_SeanceQuestion_Answer_Client Description: 
            </summary>
            <param name="_clientId"></param>
            <returns>Returns a generic collection of SeanceQuestionAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetByClientId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_SeanceQuestion_Answer_Client key.
            	FK_SeanceQuestion_Answer_Client Description: 
            </summary>
            <param name="_clientId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>SeanceQuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetByQuestionId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_SeanceQuestion_Answer_SeanceQuestion key.
            	FK_SeanceQuestion_Answer_SeanceQuestion Description: 
            </summary>
            <param name="_questionId"></param>
            <returns>Returns a generic collection of SeanceQuestionAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetByQuestionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_SeanceQuestion_Answer_SeanceQuestion key.
            	FK_SeanceQuestion_Answer_SeanceQuestion Description: 
            </summary>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>SeanceQuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetByOptionId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_SeanceQuestion_Answer_SeanceQuestion_Option key.
            	FK_SeanceQuestion_Answer_SeanceQuestion_Option Description: 
            </summary>
            <param name="_optionId"></param>
            <returns>Returns a generic collection of SeanceQuestionAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetByOptionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_SeanceQuestion_Answer_SeanceQuestion_Option key.
            	FK_SeanceQuestion_Answer_SeanceQuestion_Option Description: 
            </summary>
            <param name="_optionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>SeanceQuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Get(Ekip.Framework.Entities.SeanceQuestionAnswerKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetByRowId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_SeanceQuestion_Answer index.
            </summary>
            <param name="_rowId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetByRowId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_SeanceQuestion_Answer index.
            </summary>
            <param name="_rowId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SeanceQuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SeanceQuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SeanceQuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SeanceQuestionAnswer} of <c>SeanceQuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SeanceQuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SeanceQuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SeanceQuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SeanceQuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SeanceQuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Insert(Ekip.Framework.Entities.SeanceQuestionAnswer)">
            <summary>
            public virtual method that Inserts a SeanceQuestionAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceQuestionAnswer object to Insert.</param>
            <remarks>After Inserting into the datasource, the SeanceQuestionAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SeanceQuestionAnswer entity = new SeanceQuestionAnswer();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SeanceQuestionAnswerService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionAnswer})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceQuestionAnswer</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SeanceQuestionAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SeanceQuestionAnswer.
             <code><![CDATA[
             TList<SeanceQuestionAnswer> list = new TList<SeanceQuestionAnswer>();
             SeanceQuestionAnswer entity = new SeanceQuestionAnswer();
             entity.StringProperty = "foo";
             SeanceQuestionAnswer entity2 = new SeanceQuestionAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceQuestionAnswerService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Update(Ekip.Framework.Entities.SeanceQuestionAnswer)">
            <summary>
            public virtual method that Updates a SeanceQuestionAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceQuestionAnswer object to Update.</param>
            <remarks>After Updateing into the datasource, the SeanceQuestionAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SeanceQuestionAnswer entity = SeanceQuestionAnswerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SeanceQuestionAnswerService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionAnswer})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceQuestionAnswer</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SeanceQuestionAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SeanceQuestionAnswer.
             <code><![CDATA[
             TList<SeanceQuestionAnswer> list = new TList<SeanceQuestionAnswer>();
             SeanceQuestionAnswer entity = new SeanceQuestionAnswer();
             entity.StringProperty = "foo";
             SeanceQuestionAnswer entity2 = new SeanceQuestionAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceQuestionAnswerService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Save(Ekip.Framework.Entities.SeanceQuestionAnswer)">
            <summary>
            public virtual method that Saves a SeanceQuestionAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceQuestionAnswer object to Save.</param>
            <remarks>After Saveing into the datasource, the SeanceQuestionAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SeanceQuestionAnswer entity = SeanceQuestionAnswerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SeanceQuestionAnswerService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionAnswer})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceQuestionAnswer</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SeanceQuestionAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SeanceQuestionAnswer.
             <code><![CDATA[
             TList<SeanceQuestionAnswer> list = new TList<SeanceQuestionAnswer>();
             SeanceQuestionAnswer entity = new SeanceQuestionAnswer();
             entity.StringProperty = "foo";
             SeanceQuestionAnswer entity2 = new SeanceQuestionAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceQuestionAnswerService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Delete(Ekip.Framework.Entities.SeanceQuestionAnswer)">
            <summary>
            public virtual method that Deletes a SeanceQuestionAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">SeanceQuestionAnswer object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SeanceQuestionAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SeanceQuestionAnswer entity = SeanceQuestionAnswerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SeanceQuestionAnswerService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionAnswer})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SeanceQuestionAnswer</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SeanceQuestionAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SeanceQuestionAnswer.
             <code><![CDATA[
             TList<SeanceQuestionAnswer> list = new TList<SeanceQuestionAnswer>();
             SeanceQuestionAnswer entity = new SeanceQuestionAnswer();
             entity.StringProperty = "foo";
             SeanceQuestionAnswer entity2 = new SeanceQuestionAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SeanceQuestionAnswerService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Delete(Ekip.Framework.Entities.SeanceQuestionAnswerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _rowId
            </summary>
            <param name="_rowId">SeanceQuestionAnswer pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepLoadByRowId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SeanceQuestionAnswer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionAnswer)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SeanceQuestionAnswer Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionAnswer,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SeanceQuestionAnswer Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionAnswer,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SeanceQuestionAnswer Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionAnswer})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionAnswer},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.SeanceQuestionAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionAnswer},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepSave(Ekip.Framework.Entities.SeanceQuestionAnswer)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.SeanceQuestionAnswer"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SeanceQuestionAnswer Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepSave(Ekip.Framework.Entities.SeanceQuestionAnswer,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SeanceQuestionAnswer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SeanceQuestionAnswer Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SeanceQuestionAnswer</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionAnswer})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SeanceQuestionAnswer} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SeanceQuestionAnswerServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.SeanceQuestionAnswer},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SeanceQuestionAnswer Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.StreetService">
            <summary>
            An component type implementation of the 'Street' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.StreetService.#ctor">
            <summary>
            Initializes a new instance of the StreetService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.StreetServiceBase">
            <summary>
             An object representation of the 'Street' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Street.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Street"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Street"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.CreateStreet(System.Int64,System.Int64,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.DateTime,System.TimeSpan,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Street"/> instance.
            </summary>
            <param name="_adminId"></param>
            <param name="_objectId"></param>
            <param name="_rowNumber"></param>
            <param name="_neighborhoodId"></param>
            <param name="_streetName"></param>
            <param name="_longitude"></param>
            <param name="_latitude"></param>
            <param name="_zipCode"></param>
            <param name="_createDate"></param>
            <param name="_createTime"></param>
            <param name="_updateDate"></param>
            <param name="_updateTime"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.StreetServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Get(Ekip.Framework.Entities.StreetKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.GetByNeighborhoodId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Street index.
            </summary>
            <param name="_neighborhoodId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.GetByNeighborhoodId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Street index.
            </summary>
            <param name="_neighborhoodId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.GetByStreetId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Street index.
            </summary>
            <param name="_streetId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Street"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.GetByStreetId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Street index.
            </summary>
            <param name="_streetId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Street"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Street" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Street" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Street</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Street</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Street</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Street} of <c>Street</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Street</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Street</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Street</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Street</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Street</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Insert(Ekip.Framework.Entities.Street)">
            <summary>
            public virtual method that Inserts a Street object into the datasource using a transaction.
            </summary>
            <param name="entity">Street object to Insert.</param>
            <remarks>After Inserting into the datasource, the Street object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Street entity = new Street();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StreetService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Street})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Street</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Street</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Street.
             <code><![CDATA[
             TList<Street> list = new TList<Street>();
             Street entity = new Street();
             entity.StringProperty = "foo";
             Street entity2 = new Street();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StreetService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Update(Ekip.Framework.Entities.Street)">
            <summary>
            public virtual method that Updates a Street object into the datasource using a transaction.
            </summary>
            <param name="entity">Street object to Update.</param>
            <remarks>After Updateing into the datasource, the Street object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Street entity = StreetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StreetService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Street})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Street</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Street</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Street.
             <code><![CDATA[
             TList<Street> list = new TList<Street>();
             Street entity = new Street();
             entity.StringProperty = "foo";
             Street entity2 = new Street();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StreetService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Save(Ekip.Framework.Entities.Street)">
            <summary>
            public virtual method that Saves a Street object into the datasource using a transaction.
            </summary>
            <param name="entity">Street object to Save.</param>
            <remarks>After Saveing into the datasource, the Street object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Street entity = StreetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StreetService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Street})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Street</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Street</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Street.
             <code><![CDATA[
             TList<Street> list = new TList<Street>();
             Street entity = new Street();
             entity.StringProperty = "foo";
             Street entity2 = new Street();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StreetService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Delete(Ekip.Framework.Entities.Street)">
            <summary>
            public virtual method that Deletes a Street object into the datasource using a transaction.
            </summary>
            <param name="entity">Street object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Street object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Street entity = StreetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StreetService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Street})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Street</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Street</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Street.
             <code><![CDATA[
             TList<Street> list = new TList<Street>();
             Street entity = new Street();
             entity.StringProperty = "foo";
             Street entity2 = new Street();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StreetService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Delete(Ekip.Framework.Entities.StreetKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _streetId
            </summary>
            <param name="_streetId">Street pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.GetByNeighborhoodId(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'Street_GetByNeighborhoodId' stored procedure. 
            </summary>
            <param name="neighborhoodId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.GetByNeighborhoodId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            This method wrap the 'Street_GetByNeighborhoodId' stored procedure. 
            </summary>
            <param name="neighborhoodId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.DeepLoadByNeighborhoodId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_neighborhoodId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Street Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.DeepLoadByStreetId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Street"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_streetId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Street Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Street"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.DeepLoad(Ekip.Framework.Entities.Street)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Street Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.StreetServiceBase.DeepLoad(Ekip.Framework.Entities.Street)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.DeepLoad(Ekip.Framework.Entities.Street,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.StreetServiceBase.DeepLoad(Ekip.Framework.Entities.Street)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Street Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.DeepLoad(Ekip.Framework.Entities.Street,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Street"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Street Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Street})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.StreetServiceBase.DeepLoad(Ekip.Framework.Entities.Street)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Street},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.StreetServiceBase.DeepLoad(Ekip.Framework.Entities.Street)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Street},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Street"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.DeepSave(Ekip.Framework.Entities.Street)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Street"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Street Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.DeepSave(Ekip.Framework.Entities.Street,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Street object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Street Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Street</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Street})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Street} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.StreetServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Street},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Street Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.QuestionFormService">
            <summary>
            An component type implementation of the 'QuestionForm' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormService.#ctor">
            <summary>
            Initializes a new instance of the QuestionFormService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.QuestionFormServiceBase">
            <summary>
             An object representation of the 'QuestionForm' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the QuestionForm.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.QuestionForm"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.QuestionForm"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.CreateQuestionForm(System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Boolean,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.QuestionForm"/> instance.
            </summary>
            <param name="_groupId"></param>
            <param name="_questionRef"></param>
            <param name="_questionName"></param>
            <param name="_lineNumber"></param>
            <param name="_status"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.QuestionFormServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.GetByGroupId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_QuestionForm_QuestionForm_Group key.
            	FK_QuestionForm_QuestionForm_Group Description: 
            </summary>
            <param name="_groupId"></param>
            <returns>Returns a generic collection of QuestionForm objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.GetByGroupId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_QuestionForm_QuestionForm_Group key.
            	FK_QuestionForm_QuestionForm_Group Description: 
            </summary>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>QuestionForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Get(Ekip.Framework.Entities.QuestionFormKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.GetByQuestionId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_QuestionForm index.
            </summary>
            <param name="_questionId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionForm"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.GetByQuestionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_QuestionForm index.
            </summary>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionForm"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.QuestionForm" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.QuestionForm" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{QuestionForm} of <c>QuestionForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>QuestionForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Insert(Ekip.Framework.Entities.QuestionForm)">
            <summary>
            public virtual method that Inserts a QuestionForm object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionForm object to Insert.</param>
            <remarks>After Inserting into the datasource, the QuestionForm object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            QuestionForm entity = new QuestionForm();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	QuestionFormService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionForm})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionForm</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>QuestionForm</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of QuestionForm.
             <code><![CDATA[
             TList<QuestionForm> list = new TList<QuestionForm>();
             QuestionForm entity = new QuestionForm();
             entity.StringProperty = "foo";
             QuestionForm entity2 = new QuestionForm();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Update(Ekip.Framework.Entities.QuestionForm)">
            <summary>
            public virtual method that Updates a QuestionForm object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionForm object to Update.</param>
            <remarks>After Updateing into the datasource, the QuestionForm object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            QuestionForm entity = QuestionFormService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	QuestionFormService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionForm})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionForm</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>QuestionForm</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of QuestionForm.
             <code><![CDATA[
             TList<QuestionForm> list = new TList<QuestionForm>();
             QuestionForm entity = new QuestionForm();
             entity.StringProperty = "foo";
             QuestionForm entity2 = new QuestionForm();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Save(Ekip.Framework.Entities.QuestionForm)">
            <summary>
            public virtual method that Saves a QuestionForm object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionForm object to Save.</param>
            <remarks>After Saveing into the datasource, the QuestionForm object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            QuestionForm entity = QuestionFormService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	QuestionFormService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionForm})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionForm</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>QuestionForm</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of QuestionForm.
             <code><![CDATA[
             TList<QuestionForm> list = new TList<QuestionForm>();
             QuestionForm entity = new QuestionForm();
             entity.StringProperty = "foo";
             QuestionForm entity2 = new QuestionForm();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Delete(Ekip.Framework.Entities.QuestionForm)">
            <summary>
            public virtual method that Deletes a QuestionForm object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionForm object to Delete.</param>
            <remarks>After Deleteing into the datasource, the QuestionForm object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            QuestionForm entity = QuestionFormService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	QuestionFormService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionForm})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionForm</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>QuestionForm</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of QuestionForm.
             <code><![CDATA[
             TList<QuestionForm> list = new TList<QuestionForm>();
             QuestionForm entity = new QuestionForm();
             entity.StringProperty = "foo";
             QuestionForm entity2 = new QuestionForm();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Delete(Ekip.Framework.Entities.QuestionFormKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _questionId
            </summary>
            <param name="_questionId">QuestionForm pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepLoadByQuestionId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.QuestionForm"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_questionId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionForm Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionForm"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionForm)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">QuestionForm Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionForm)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionForm,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionForm)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">QuestionForm Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionForm,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.QuestionForm"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionForm Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionForm})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionForm)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionForm},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionForm)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionForm},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.QuestionForm"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepSave(Ekip.Framework.Entities.QuestionForm)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.QuestionForm"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">QuestionForm Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepSave(Ekip.Framework.Entities.QuestionForm,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the QuestionForm object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">QuestionForm Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>QuestionForm</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionForm})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{QuestionForm} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionForm},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QuestionForm Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.SiblingService">
            <summary>
            An component type implementation of the 'Sibling' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingService.#ctor">
            <summary>
            Initializes a new instance of the SiblingService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.SiblingServiceBase">
            <summary>
             An object representation of the 'Sibling' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Sibling.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Sibling"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Sibling"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.CreateSibling(System.Int32,System.String,System.Nullable{System.DateTime},System.Byte,System.Int32,System.String,System.Nullable{System.Byte},System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Sibling"/> instance.
            </summary>
            <param name="_clientId"></param>
            <param name="_fullName"></param>
            <param name="_birthDate"></param>
            <param name="_gender"></param>
            <param name="_age"></param>
            <param name="_school"></param>
            <param name="_classRoom"></param>
            <param name="_note"></param>
            <param name="_createOn"></param>
            <param name="_updateOn"></param>
            <param name="_userId"></param>
        </member>
        <member name="P:Ekip.Framework.Services.SiblingServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.GetByClientId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Sibling_Client key.
            	FK_Sibling_Client Description: 
            </summary>
            <param name="_clientId"></param>
            <returns>Returns a generic collection of Sibling objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.GetByClientId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Sibling_Client key.
            	FK_Sibling_Client Description: 
            </summary>
            <param name="_clientId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>Sibling</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Get(Ekip.Framework.Entities.SiblingKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.GetBySiblingId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Sibling index.
            </summary>
            <param name="_siblingId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Sibling"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.GetBySiblingId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Sibling index.
            </summary>
            <param name="_siblingId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Sibling"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Sibling" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Sibling" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Sibling</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Sibling</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Sibling</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Sibling} of <c>Sibling</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Sibling</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Sibling</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Sibling</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Sibling</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Sibling</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Insert(Ekip.Framework.Entities.Sibling)">
            <summary>
            public virtual method that Inserts a Sibling object into the datasource using a transaction.
            </summary>
            <param name="entity">Sibling object to Insert.</param>
            <remarks>After Inserting into the datasource, the Sibling object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Sibling entity = new Sibling();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SiblingService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Sibling})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Sibling</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Sibling</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Sibling.
             <code><![CDATA[
             TList<Sibling> list = new TList<Sibling>();
             Sibling entity = new Sibling();
             entity.StringProperty = "foo";
             Sibling entity2 = new Sibling();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SiblingService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Update(Ekip.Framework.Entities.Sibling)">
            <summary>
            public virtual method that Updates a Sibling object into the datasource using a transaction.
            </summary>
            <param name="entity">Sibling object to Update.</param>
            <remarks>After Updateing into the datasource, the Sibling object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Sibling entity = SiblingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SiblingService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Sibling})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Sibling</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Sibling</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Sibling.
             <code><![CDATA[
             TList<Sibling> list = new TList<Sibling>();
             Sibling entity = new Sibling();
             entity.StringProperty = "foo";
             Sibling entity2 = new Sibling();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SiblingService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Save(Ekip.Framework.Entities.Sibling)">
            <summary>
            public virtual method that Saves a Sibling object into the datasource using a transaction.
            </summary>
            <param name="entity">Sibling object to Save.</param>
            <remarks>After Saveing into the datasource, the Sibling object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Sibling entity = SiblingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SiblingService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Sibling})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Sibling</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Sibling</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Sibling.
             <code><![CDATA[
             TList<Sibling> list = new TList<Sibling>();
             Sibling entity = new Sibling();
             entity.StringProperty = "foo";
             Sibling entity2 = new Sibling();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SiblingService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Delete(Ekip.Framework.Entities.Sibling)">
            <summary>
            public virtual method that Deletes a Sibling object into the datasource using a transaction.
            </summary>
            <param name="entity">Sibling object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Sibling object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Sibling entity = SiblingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SiblingService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Sibling})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Sibling</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Sibling</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Sibling.
             <code><![CDATA[
             TList<Sibling> list = new TList<Sibling>();
             Sibling entity = new Sibling();
             entity.StringProperty = "foo";
             Sibling entity2 = new Sibling();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SiblingService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Delete(Ekip.Framework.Entities.SiblingKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _siblingId
            </summary>
            <param name="_siblingId">Sibling pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.DeepLoadBySiblingId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Sibling"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_siblingId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Sibling Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Sibling"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.DeepLoad(Ekip.Framework.Entities.Sibling)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Sibling Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SiblingServiceBase.DeepLoad(Ekip.Framework.Entities.Sibling)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.DeepLoad(Ekip.Framework.Entities.Sibling,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SiblingServiceBase.DeepLoad(Ekip.Framework.Entities.Sibling)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Sibling Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.DeepLoad(Ekip.Framework.Entities.Sibling,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Sibling"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Sibling Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Sibling})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SiblingServiceBase.DeepLoad(Ekip.Framework.Entities.Sibling)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Sibling},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.SiblingServiceBase.DeepLoad(Ekip.Framework.Entities.Sibling)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Sibling},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Sibling"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.DeepSave(Ekip.Framework.Entities.Sibling)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Sibling"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Sibling Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.DeepSave(Ekip.Framework.Entities.Sibling,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Sibling object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Sibling Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Sibling</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Sibling})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Sibling} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.SiblingServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Sibling},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Sibling Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.ClientFatherService">
            <summary>
            An component type implementation of the 'ClientFather' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherService.#ctor">
            <summary>
            Initializes a new instance of the ClientFatherService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ClientFatherServiceBase">
            <summary>
             An object representation of the 'ClientFather' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ClientFather.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.ClientFather"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.ClientFather"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.CreateClientFather(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Byte,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.ClientFather"/> instance.
            </summary>
            <param name="_fullName"></param>
            <param name="_title"></param>
            <param name="_email"></param>
            <param name="_fax"></param>
            <param name="_homePhone"></param>
            <param name="_businessPhone"></param>
            <param name="_mobilePhone"></param>
            <param name="_otherPhone"></param>
            <param name="_jobId"></param>
            <param name="_notes"></param>
            <param name="_fatherStatusId"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.ClientFatherServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Get(Ekip.Framework.Entities.ClientFatherKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.GetByFatherId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Father index.
            </summary>
            <param name="_fatherId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientFather"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.GetByFatherId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Father index.
            </summary>
            <param name="_fatherId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientFather"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.ClientFather" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.ClientFather" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ClientFather</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ClientFather</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ClientFather</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ClientFather} of <c>ClientFather</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ClientFather</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ClientFather</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ClientFather</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ClientFather</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ClientFather</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Insert(Ekip.Framework.Entities.ClientFather)">
            <summary>
            public virtual method that Inserts a ClientFather object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientFather object to Insert.</param>
            <remarks>After Inserting into the datasource, the ClientFather object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ClientFather entity = new ClientFather();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ClientFatherService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientFather})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientFather</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ClientFather</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ClientFather.
             <code><![CDATA[
             TList<ClientFather> list = new TList<ClientFather>();
             ClientFather entity = new ClientFather();
             entity.StringProperty = "foo";
             ClientFather entity2 = new ClientFather();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientFatherService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Update(Ekip.Framework.Entities.ClientFather)">
            <summary>
            public virtual method that Updates a ClientFather object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientFather object to Update.</param>
            <remarks>After Updateing into the datasource, the ClientFather object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ClientFather entity = ClientFatherService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ClientFatherService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientFather})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientFather</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ClientFather</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ClientFather.
             <code><![CDATA[
             TList<ClientFather> list = new TList<ClientFather>();
             ClientFather entity = new ClientFather();
             entity.StringProperty = "foo";
             ClientFather entity2 = new ClientFather();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientFatherService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Save(Ekip.Framework.Entities.ClientFather)">
            <summary>
            public virtual method that Saves a ClientFather object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientFather object to Save.</param>
            <remarks>After Saveing into the datasource, the ClientFather object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ClientFather entity = ClientFatherService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ClientFatherService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientFather})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientFather</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ClientFather</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ClientFather.
             <code><![CDATA[
             TList<ClientFather> list = new TList<ClientFather>();
             ClientFather entity = new ClientFather();
             entity.StringProperty = "foo";
             ClientFather entity2 = new ClientFather();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientFatherService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Delete(Ekip.Framework.Entities.ClientFather)">
            <summary>
            public virtual method that Deletes a ClientFather object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientFather object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ClientFather object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ClientFather entity = ClientFatherService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ClientFatherService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientFather})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientFather</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ClientFather</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ClientFather.
             <code><![CDATA[
             TList<ClientFather> list = new TList<ClientFather>();
             ClientFather entity = new ClientFather();
             entity.StringProperty = "foo";
             ClientFather entity2 = new ClientFather();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientFatherService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Delete(Ekip.Framework.Entities.ClientFatherKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _fatherId
            </summary>
            <param name="_fatherId">ClientFather pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepLoadByFatherId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.ClientFather"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_fatherId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ClientFather Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientFather"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientFather)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ClientFather Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientFather)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientFather,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientFather)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ClientFather Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientFather,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.ClientFather"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ClientFather Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientFather})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientFather)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientFather},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientFather)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientFather},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.ClientFather"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepSave(Ekip.Framework.Entities.ClientFather)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.ClientFather"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ClientFather Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepSave(Ekip.Framework.Entities.ClientFather,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ClientFather object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ClientFather Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ClientFather</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientFather})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ClientFather} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientFatherServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientFather},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ClientFather Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.ClientMotherService">
            <summary>
            An component type implementation of the 'ClientMother' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherService.#ctor">
            <summary>
            Initializes a new instance of the ClientMotherService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ClientMotherServiceBase">
            <summary>
             An object representation of the 'ClientMother' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ClientMother.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.ClientMother"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.ClientMother"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.CreateClientMother(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Byte,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.ClientMother"/> instance.
            </summary>
            <param name="_fullName"></param>
            <param name="_title"></param>
            <param name="_email"></param>
            <param name="_fax"></param>
            <param name="_homePhone"></param>
            <param name="_businessPhone"></param>
            <param name="_mobilePhone"></param>
            <param name="_otherPhone"></param>
            <param name="_jobId"></param>
            <param name="_notes"></param>
            <param name="_motherStatusId"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.ClientMotherServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Get(Ekip.Framework.Entities.ClientMotherKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.GetByMotherId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Mother index.
            </summary>
            <param name="_motherId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientMother"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.GetByMotherId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Mother index.
            </summary>
            <param name="_motherId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientMother"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.ClientMother" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.ClientMother" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ClientMother</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ClientMother</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ClientMother</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ClientMother} of <c>ClientMother</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ClientMother</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ClientMother</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ClientMother</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ClientMother</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ClientMother</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Insert(Ekip.Framework.Entities.ClientMother)">
            <summary>
            public virtual method that Inserts a ClientMother object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientMother object to Insert.</param>
            <remarks>After Inserting into the datasource, the ClientMother object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ClientMother entity = new ClientMother();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ClientMotherService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientMother})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientMother</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ClientMother</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ClientMother.
             <code><![CDATA[
             TList<ClientMother> list = new TList<ClientMother>();
             ClientMother entity = new ClientMother();
             entity.StringProperty = "foo";
             ClientMother entity2 = new ClientMother();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientMotherService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Update(Ekip.Framework.Entities.ClientMother)">
            <summary>
            public virtual method that Updates a ClientMother object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientMother object to Update.</param>
            <remarks>After Updateing into the datasource, the ClientMother object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ClientMother entity = ClientMotherService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ClientMotherService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientMother})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientMother</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ClientMother</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ClientMother.
             <code><![CDATA[
             TList<ClientMother> list = new TList<ClientMother>();
             ClientMother entity = new ClientMother();
             entity.StringProperty = "foo";
             ClientMother entity2 = new ClientMother();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientMotherService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Save(Ekip.Framework.Entities.ClientMother)">
            <summary>
            public virtual method that Saves a ClientMother object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientMother object to Save.</param>
            <remarks>After Saveing into the datasource, the ClientMother object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ClientMother entity = ClientMotherService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ClientMotherService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientMother})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientMother</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ClientMother</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ClientMother.
             <code><![CDATA[
             TList<ClientMother> list = new TList<ClientMother>();
             ClientMother entity = new ClientMother();
             entity.StringProperty = "foo";
             ClientMother entity2 = new ClientMother();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientMotherService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Delete(Ekip.Framework.Entities.ClientMother)">
            <summary>
            public virtual method that Deletes a ClientMother object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientMother object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ClientMother object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ClientMother entity = ClientMotherService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ClientMotherService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientMother})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientMother</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ClientMother</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ClientMother.
             <code><![CDATA[
             TList<ClientMother> list = new TList<ClientMother>();
             ClientMother entity = new ClientMother();
             entity.StringProperty = "foo";
             ClientMother entity2 = new ClientMother();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientMotherService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Delete(Ekip.Framework.Entities.ClientMotherKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _motherId
            </summary>
            <param name="_motherId">ClientMother pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepLoadByMotherId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.ClientMother"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_motherId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ClientMother Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientMother"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientMother)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ClientMother Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientMother)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientMother,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientMother)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ClientMother Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientMother,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.ClientMother"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ClientMother Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientMother})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientMother)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientMother},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepLoad(Ekip.Framework.Entities.ClientMother)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientMother},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.ClientMother"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepSave(Ekip.Framework.Entities.ClientMother)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.ClientMother"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ClientMother Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepSave(Ekip.Framework.Entities.ClientMother,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ClientMother object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ClientMother Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ClientMother</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientMother})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ClientMother} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientMotherServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientMother},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ClientMother Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.ClientAddressService">
            <summary>
            An component type implementation of the 'ClientAddress' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressService.#ctor">
            <summary>
            Initializes a new instance of the ClientAddressService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ClientAddressServiceBase">
            <summary>
             An object representation of the 'ClientAddress' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ClientAddress.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.ClientAddress"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.ClientAddress"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.CreateClientAddress(System.Nullable{System.Byte},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.ClientAddress"/> instance.
            </summary>
            <param name="_titleId"></param>
            <param name="_addressLine"></param>
            <param name="_provinceId"></param>
            <param name="_townId"></param>
            <param name="_neighborhoodId"></param>
            <param name="_streetId"></param>
            <param name="_phone1"></param>
            <param name="_phone2"></param>
            <param name="_mobile"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.ClientAddressServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Get(Ekip.Framework.Entities.ClientAddressKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.GetByAddressId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Users_Address index.
            </summary>
            <param name="_addressId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientAddress"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.GetByAddressId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Users_Address index.
            </summary>
            <param name="_addressId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientAddress"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.ClientAddress" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.ClientAddress" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ClientAddress</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ClientAddress</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ClientAddress</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ClientAddress} of <c>ClientAddress</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ClientAddress</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ClientAddress</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ClientAddress</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ClientAddress</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ClientAddress</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Insert(Ekip.Framework.Entities.ClientAddress)">
            <summary>
            public virtual method that Inserts a ClientAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientAddress object to Insert.</param>
            <remarks>After Inserting into the datasource, the ClientAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ClientAddress entity = new ClientAddress();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ClientAddressService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientAddress})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientAddress</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ClientAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ClientAddress.
             <code><![CDATA[
             TList<ClientAddress> list = new TList<ClientAddress>();
             ClientAddress entity = new ClientAddress();
             entity.StringProperty = "foo";
             ClientAddress entity2 = new ClientAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientAddressService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Update(Ekip.Framework.Entities.ClientAddress)">
            <summary>
            public virtual method that Updates a ClientAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientAddress object to Update.</param>
            <remarks>After Updateing into the datasource, the ClientAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ClientAddress entity = ClientAddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ClientAddressService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientAddress})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientAddress</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ClientAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ClientAddress.
             <code><![CDATA[
             TList<ClientAddress> list = new TList<ClientAddress>();
             ClientAddress entity = new ClientAddress();
             entity.StringProperty = "foo";
             ClientAddress entity2 = new ClientAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientAddressService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Save(Ekip.Framework.Entities.ClientAddress)">
            <summary>
            public virtual method that Saves a ClientAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientAddress object to Save.</param>
            <remarks>After Saveing into the datasource, the ClientAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ClientAddress entity = ClientAddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ClientAddressService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientAddress})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientAddress</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ClientAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ClientAddress.
             <code><![CDATA[
             TList<ClientAddress> list = new TList<ClientAddress>();
             ClientAddress entity = new ClientAddress();
             entity.StringProperty = "foo";
             ClientAddress entity2 = new ClientAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientAddressService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Delete(Ekip.Framework.Entities.ClientAddress)">
            <summary>
            public virtual method that Deletes a ClientAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientAddress object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ClientAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ClientAddress entity = ClientAddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ClientAddressService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientAddress})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientAddress</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ClientAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ClientAddress.
             <code><![CDATA[
             TList<ClientAddress> list = new TList<ClientAddress>();
             ClientAddress entity = new ClientAddress();
             entity.StringProperty = "foo";
             ClientAddress entity2 = new ClientAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientAddressService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Delete(Ekip.Framework.Entities.ClientAddressKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _addressId
            </summary>
            <param name="_addressId">ClientAddress pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.GetCurrentAddress(System.Int32)">
            <summary>
            This method wrap the 'ClientAddress_GetCurrentAddress' stored procedure. 
            </summary>
            <param name="clientId"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.GetCurrentAddress(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'ClientAddress_GetCurrentAddress' stored procedure. 
            </summary>
            <param name="clientId"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepLoadByAddressId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.ClientAddress"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_addressId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ClientAddress Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientAddress"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepLoad(Ekip.Framework.Entities.ClientAddress)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ClientAddress Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepLoad(Ekip.Framework.Entities.ClientAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepLoad(Ekip.Framework.Entities.ClientAddress,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepLoad(Ekip.Framework.Entities.ClientAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ClientAddress Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepLoad(Ekip.Framework.Entities.ClientAddress,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.ClientAddress"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ClientAddress Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientAddress})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepLoad(Ekip.Framework.Entities.ClientAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientAddress},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepLoad(Ekip.Framework.Entities.ClientAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientAddress},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.ClientAddress"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepSave(Ekip.Framework.Entities.ClientAddress)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.ClientAddress"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ClientAddress Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepSave(Ekip.Framework.Entities.ClientAddress,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ClientAddress object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ClientAddress Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ClientAddress</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientAddress})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ClientAddress} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientAddressServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientAddress},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ClientAddress Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.ProvinceService">
            <summary>
            An component type implementation of the 'Province' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceService.#ctor">
            <summary>
            Initializes a new instance of the ProvinceService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ProvinceServiceBase">
            <summary>
             An object representation of the 'Province' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Province.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Province"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Province"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.CreateProvince(System.Int32,System.Int64,System.Int64,System.Int64,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.DateTime,System.TimeSpan,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Province"/> instance.
            </summary>
            <param name="_rowNumber"></param>
            <param name="_adminId"></param>
            <param name="_objectId"></param>
            <param name="_parentId"></param>
            <param name="_plateCode"></param>
            <param name="_areaId"></param>
            <param name="_phoneCode"></param>
            <param name="_provinceName"></param>
            <param name="_longitude"></param>
            <param name="_latitude"></param>
            <param name="_type"></param>
            <param name="_createDate"></param>
            <param name="_createTime"></param>
            <param name="_updateDate"></param>
            <param name="_updateTime"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.ProvinceServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Get(Ekip.Framework.Entities.ProvinceKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.GetByProvinceName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Province_ProvinceName index.
            </summary>
            <param name="_provinceName"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Province"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.GetByProvinceName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Province_ProvinceName index.
            </summary>
            <param name="_provinceName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Province"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.GetByProvinceId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Province index.
            </summary>
            <param name="_provinceId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Province"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.GetByProvinceId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Province index.
            </summary>
            <param name="_provinceId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Province"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Province" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Province" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Province</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Province</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Province</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Province} of <c>Province</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Province</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Province</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Province</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Province</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Province</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Insert(Ekip.Framework.Entities.Province)">
            <summary>
            public virtual method that Inserts a Province object into the datasource using a transaction.
            </summary>
            <param name="entity">Province object to Insert.</param>
            <remarks>After Inserting into the datasource, the Province object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Province entity = new Province();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProvinceService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Province})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Province</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Province</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Province.
             <code><![CDATA[
             TList<Province> list = new TList<Province>();
             Province entity = new Province();
             entity.StringProperty = "foo";
             Province entity2 = new Province();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProvinceService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Update(Ekip.Framework.Entities.Province)">
            <summary>
            public virtual method that Updates a Province object into the datasource using a transaction.
            </summary>
            <param name="entity">Province object to Update.</param>
            <remarks>After Updateing into the datasource, the Province object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Province entity = ProvinceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProvinceService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Province})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Province</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Province</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Province.
             <code><![CDATA[
             TList<Province> list = new TList<Province>();
             Province entity = new Province();
             entity.StringProperty = "foo";
             Province entity2 = new Province();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProvinceService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Save(Ekip.Framework.Entities.Province)">
            <summary>
            public virtual method that Saves a Province object into the datasource using a transaction.
            </summary>
            <param name="entity">Province object to Save.</param>
            <remarks>After Saveing into the datasource, the Province object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Province entity = ProvinceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProvinceService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Province})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Province</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Province</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Province.
             <code><![CDATA[
             TList<Province> list = new TList<Province>();
             Province entity = new Province();
             entity.StringProperty = "foo";
             Province entity2 = new Province();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProvinceService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Delete(Ekip.Framework.Entities.Province)">
            <summary>
            public virtual method that Deletes a Province object into the datasource using a transaction.
            </summary>
            <param name="entity">Province object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Province object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Province entity = ProvinceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProvinceService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Province})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Province</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Province</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Province.
             <code><![CDATA[
             TList<Province> list = new TList<Province>();
             Province entity = new Province();
             entity.StringProperty = "foo";
             Province entity2 = new Province();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProvinceService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Delete(Ekip.Framework.Entities.ProvinceKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _provinceId
            </summary>
            <param name="_provinceId">Province pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.DeepLoadByProvinceName(System.String,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Province"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_provinceName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Province Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Province"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.DeepLoadByProvinceId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Province"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_provinceId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Province Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Province"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.DeepLoad(Ekip.Framework.Entities.Province)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Province Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ProvinceServiceBase.DeepLoad(Ekip.Framework.Entities.Province)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.DeepLoad(Ekip.Framework.Entities.Province,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ProvinceServiceBase.DeepLoad(Ekip.Framework.Entities.Province)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Province Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.DeepLoad(Ekip.Framework.Entities.Province,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Province"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Province Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Province})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ProvinceServiceBase.DeepLoad(Ekip.Framework.Entities.Province)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Province},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ProvinceServiceBase.DeepLoad(Ekip.Framework.Entities.Province)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Province},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Province"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.DeepSave(Ekip.Framework.Entities.Province)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Province"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Province Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.DeepSave(Ekip.Framework.Entities.Province,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Province object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Province Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Province</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Province})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Province} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Province},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Province Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.CalendarAgeService">
            <summary>
            An component type implementation of the 'CalendarAge' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeService.#ctor">
            <summary>
            Initializes a new instance of the CalendarAgeService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.CalendarAgeServiceBase">
            <summary>
             An object representation of the 'CalendarAge' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CalendarAge.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.CalendarAge"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.CalendarAge"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.CreateCalendarAge(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.CalendarAge"/> instance.
            </summary>
            <param name="_ageDescription"></param>
            <param name="_minValue"></param>
            <param name="_maxValue"></param>
        </member>
        <member name="P:Ekip.Framework.Services.CalendarAgeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Get(Ekip.Framework.Entities.CalendarAgeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.GetByCalendarAgeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_CalendarAge index.
            </summary>
            <param name="_calendarAgeId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.CalendarAge"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.GetByCalendarAgeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_CalendarAge index.
            </summary>
            <param name="_calendarAgeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.CalendarAge"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.CalendarAge" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.CalendarAge" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CalendarAge</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CalendarAge</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CalendarAge</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CalendarAge} of <c>CalendarAge</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CalendarAge</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CalendarAge</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CalendarAge</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CalendarAge</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CalendarAge</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Insert(Ekip.Framework.Entities.CalendarAge)">
            <summary>
            public virtual method that Inserts a CalendarAge object into the datasource using a transaction.
            </summary>
            <param name="entity">CalendarAge object to Insert.</param>
            <remarks>After Inserting into the datasource, the CalendarAge object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CalendarAge entity = new CalendarAge();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CalendarAgeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.CalendarAge})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>CalendarAge</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CalendarAge</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CalendarAge.
             <code><![CDATA[
             TList<CalendarAge> list = new TList<CalendarAge>();
             CalendarAge entity = new CalendarAge();
             entity.StringProperty = "foo";
             CalendarAge entity2 = new CalendarAge();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CalendarAgeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Update(Ekip.Framework.Entities.CalendarAge)">
            <summary>
            public virtual method that Updates a CalendarAge object into the datasource using a transaction.
            </summary>
            <param name="entity">CalendarAge object to Update.</param>
            <remarks>After Updateing into the datasource, the CalendarAge object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CalendarAge entity = CalendarAgeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CalendarAgeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.CalendarAge})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>CalendarAge</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CalendarAge</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CalendarAge.
             <code><![CDATA[
             TList<CalendarAge> list = new TList<CalendarAge>();
             CalendarAge entity = new CalendarAge();
             entity.StringProperty = "foo";
             CalendarAge entity2 = new CalendarAge();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CalendarAgeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Save(Ekip.Framework.Entities.CalendarAge)">
            <summary>
            public virtual method that Saves a CalendarAge object into the datasource using a transaction.
            </summary>
            <param name="entity">CalendarAge object to Save.</param>
            <remarks>After Saveing into the datasource, the CalendarAge object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CalendarAge entity = CalendarAgeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CalendarAgeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.CalendarAge})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>CalendarAge</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CalendarAge</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CalendarAge.
             <code><![CDATA[
             TList<CalendarAge> list = new TList<CalendarAge>();
             CalendarAge entity = new CalendarAge();
             entity.StringProperty = "foo";
             CalendarAge entity2 = new CalendarAge();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CalendarAgeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Delete(Ekip.Framework.Entities.CalendarAge)">
            <summary>
            public virtual method that Deletes a CalendarAge object into the datasource using a transaction.
            </summary>
            <param name="entity">CalendarAge object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CalendarAge object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CalendarAge entity = CalendarAgeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CalendarAgeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.CalendarAge})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>CalendarAge</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CalendarAge</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CalendarAge.
             <code><![CDATA[
             TList<CalendarAge> list = new TList<CalendarAge>();
             CalendarAge entity = new CalendarAge();
             entity.StringProperty = "foo";
             CalendarAge entity2 = new CalendarAge();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CalendarAgeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Delete(Ekip.Framework.Entities.CalendarAgeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _calendarAgeId
            </summary>
            <param name="_calendarAgeId">CalendarAge pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.GetByYearAndMonth(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'CalendarAge_GetByYearAndMonth' stored procedure. 
            </summary>
            <param name="year"> A <c>System.Int32?</c> instance.</param>
            <param name="month"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.GetByYearAndMonth(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            This method wrap the 'CalendarAge_GetByYearAndMonth' stored procedure. 
            </summary>
            <param name="year"> A <c>System.Int32?</c> instance.</param>
            <param name="month"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepLoadByCalendarAgeId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.CalendarAge"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_calendarAgeId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CalendarAge Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.CalendarAge"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepLoad(Ekip.Framework.Entities.CalendarAge)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CalendarAge Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepLoad(Ekip.Framework.Entities.CalendarAge)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepLoad(Ekip.Framework.Entities.CalendarAge,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepLoad(Ekip.Framework.Entities.CalendarAge)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CalendarAge Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepLoad(Ekip.Framework.Entities.CalendarAge,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.CalendarAge"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CalendarAge Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.CalendarAge})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepLoad(Ekip.Framework.Entities.CalendarAge)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.CalendarAge},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepLoad(Ekip.Framework.Entities.CalendarAge)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.CalendarAge},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.CalendarAge"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepSave(Ekip.Framework.Entities.CalendarAge)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.CalendarAge"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CalendarAge Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepSave(Ekip.Framework.Entities.CalendarAge,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CalendarAge object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CalendarAge Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CalendarAge</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.CalendarAge})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CalendarAge} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.CalendarAgeServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.CalendarAge},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CalendarAge Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.ClientService">
            <summary>
            An component type implementation of the 'Client' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientService.#ctor">
            <summary>
            Initializes a new instance of the ClientService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ClientServiceBase">
            <summary>
             An object representation of the 'Client' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Client.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Client"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Client"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.CreateClient(System.Int32,System.DateTime,System.Int32,System.Int32,System.DateTime,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.Nullable{System.Byte},System.Nullable{System.Byte},System.String,System.Int32,System.Nullable{System.Byte},System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Client"/> instance.
            </summary>
            <param name="_fileNumber"></param>
            <param name="_firstContactDate"></param>
            <param name="_firstContactAge"></param>
            <param name="_currentAge"></param>
            <param name="_birthDate"></param>
            <param name="_calendarAgeId"></param>
            <param name="_fullName"></param>
            <param name="_middleName"></param>
            <param name="_reference"></param>
            <param name="_motherId"></param>
            <param name="_fatherId"></param>
            <param name="_addressId"></param>
            <param name="_ıdCard"></param>
            <param name="_gender"></param>
            <param name="_blood"></param>
            <param name="_pediatrician"></param>
            <param name="_countOfChild"></param>
            <param name="_familyStatus"></param>
            <param name="_notes"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.ClientServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetByAddressId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Client_ClientAddress key.
            	FK_Client_ClientAddress Description: 
            </summary>
            <param name="_addressId"></param>
            <returns>Returns a generic collection of Client objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetByAddressId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Client_ClientAddress key.
            	FK_Client_ClientAddress Description: 
            </summary>
            <param name="_addressId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>Client</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetByFatherId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Client_ClientFather key.
            	FK_Client_ClientFather Description: 
            </summary>
            <param name="_fatherId"></param>
            <returns>Returns a generic collection of Client objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetByFatherId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Client_ClientFather key.
            	FK_Client_ClientFather Description: 
            </summary>
            <param name="_fatherId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>Client</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetByMotherId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Client_ClientMother key.
            	FK_Client_ClientMother Description: 
            </summary>
            <param name="_motherId"></param>
            <returns>Returns a generic collection of Client objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetByMotherId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_Client_ClientMother key.
            	FK_Client_ClientMother Description: 
            </summary>
            <param name="_motherId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>Client</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Get(Ekip.Framework.Entities.ClientKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetByFileNumber(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Client index.
            </summary>
            <param name="_fileNumber"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Client"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetByFileNumber(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Client index.
            </summary>
            <param name="_fileNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Client"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetByClientId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Client index.
            </summary>
            <param name="_clientId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Client"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetByClientId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Client index.
            </summary>
            <param name="_clientId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Client"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Client" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Client" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Client</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Client</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Client</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Client} of <c>Client</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Client</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Client</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Client</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Client</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Client</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Insert(Ekip.Framework.Entities.Client)">
            <summary>
            public virtual method that Inserts a Client object into the datasource using a transaction.
            </summary>
            <param name="entity">Client object to Insert.</param>
            <remarks>After Inserting into the datasource, the Client object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Client entity = new Client();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ClientService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Client})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Client</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Client</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Client.
             <code><![CDATA[
             TList<Client> list = new TList<Client>();
             Client entity = new Client();
             entity.StringProperty = "foo";
             Client entity2 = new Client();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Update(Ekip.Framework.Entities.Client)">
            <summary>
            public virtual method that Updates a Client object into the datasource using a transaction.
            </summary>
            <param name="entity">Client object to Update.</param>
            <remarks>After Updateing into the datasource, the Client object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Client entity = ClientService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ClientService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Client})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Client</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Client</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Client.
             <code><![CDATA[
             TList<Client> list = new TList<Client>();
             Client entity = new Client();
             entity.StringProperty = "foo";
             Client entity2 = new Client();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Save(Ekip.Framework.Entities.Client)">
            <summary>
            public virtual method that Saves a Client object into the datasource using a transaction.
            </summary>
            <param name="entity">Client object to Save.</param>
            <remarks>After Saveing into the datasource, the Client object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Client entity = ClientService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ClientService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Client})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Client</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Client</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Client.
             <code><![CDATA[
             TList<Client> list = new TList<Client>();
             Client entity = new Client();
             entity.StringProperty = "foo";
             Client entity2 = new Client();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Delete(Ekip.Framework.Entities.Client)">
            <summary>
            public virtual method that Deletes a Client object into the datasource using a transaction.
            </summary>
            <param name="entity">Client object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Client object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Client entity = ClientService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ClientService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Client})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Client</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Client</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Client.
             <code><![CDATA[
             TList<Client> list = new TList<Client>();
             Client entity = new Client();
             entity.StringProperty = "foo";
             Client entity2 = new Client();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Delete(Ekip.Framework.Entities.ClientKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _clientId
            </summary>
            <param name="_clientId">Client pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.FindByReason_FirstDate_BirthDate(System.String,System.String,System.String)">
            <summary>
            This method wrap the 'Client_FindByReason_FirstDate_BirthDate' stored procedure. 
            </summary>
            <param name="seanceReasonIds"> A <c>System.String</c> instance.</param>
            <param name="firstContactYears"> A <c>System.String</c> instance.</param>
            <param name="birthDateYears"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.FindByReason_FirstDate_BirthDate(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'Client_FindByReason_FirstDate_BirthDate' stored procedure. 
            </summary>
            <param name="seanceReasonIds"> A <c>System.String</c> instance.</param>
            <param name="firstContactYears"> A <c>System.String</c> instance.</param>
            <param name="birthDateYears"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.AdvisorReport(System.String)">
            <summary>
            This method wrap the 'Client_AdvisorReport' stored procedure. 
            </summary>
            <param name="advisorIds"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.AdvisorReport(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'Client_AdvisorReport' stored procedure. 
            </summary>
            <param name="advisorIds"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetAllFirstContactYears">
            <summary>
            This method wrap the 'Client_GetAllFirstContactYears' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetAllFirstContactYears(System.Int32,System.Int32)">
            <summary>
            This method wrap the 'Client_GetAllFirstContactYears' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetByFirstContactYears(System.String)">
            <summary>
            This method wrap the 'Client_GetByFirstContactYears' stored procedure. 
            </summary>
            <param name="years"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetByFirstContactYears(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'Client_GetByFirstContactYears' stored procedure. 
            </summary>
            <param name="years"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetAllBirthDateYears">
            <summary>
            This method wrap the 'Client_GetAllBirthDateYears' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetAllBirthDateYears(System.Int32,System.Int32)">
            <summary>
            This method wrap the 'Client_GetAllBirthDateYears' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetFirst">
            <summary>
            This method wrap the 'Client_GetFirst' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetFirst(System.Int32,System.Int32)">
            <summary>
            This method wrap the 'Client_GetFirst' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetFileNumbers">
            <summary>
            This method wrap the 'Client_GetFileNumbers' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetFileNumbers(System.Int32,System.Int32)">
            <summary>
            This method wrap the 'Client_GetFileNumbers' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetLast">
            <summary>
            This method wrap the 'Client_GetLast' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.GetLast(System.Int32,System.Int32)">
            <summary>
            This method wrap the 'Client_GetLast' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.DeepLoadByFileNumber(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Client"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_fileNumber"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Client Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Client"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.DeepLoadByClientId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Client"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_clientId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Client Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Client"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.DeepLoad(Ekip.Framework.Entities.Client)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Client Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientServiceBase.DeepLoad(Ekip.Framework.Entities.Client)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.DeepLoad(Ekip.Framework.Entities.Client,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientServiceBase.DeepLoad(Ekip.Framework.Entities.Client)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Client Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.DeepLoad(Ekip.Framework.Entities.Client,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Client"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Client Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Client})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientServiceBase.DeepLoad(Ekip.Framework.Entities.Client)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Client},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientServiceBase.DeepLoad(Ekip.Framework.Entities.Client)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Client},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Client"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.DeepSave(Ekip.Framework.Entities.Client)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Client"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Client Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.DeepSave(Ekip.Framework.Entities.Client,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Client object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Client Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Client</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Client})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Client} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Client},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Client Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.ClientEducationService">
            <summary>
            An component type implementation of the 'ClientEducation' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationService.#ctor">
            <summary>
            Initializes a new instance of the ClientEducationService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ClientEducationServiceBase">
            <summary>
             An object representation of the 'ClientEducation' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ClientEducation.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.ClientEducation"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.ClientEducation"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.CreateClientEducation(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.ClientEducation"/> instance.
            </summary>
            <param name="_clientId"></param>
            <param name="_schoolId"></param>
            <param name="_classRoom"></param>
            <param name="_teacherId"></param>
            <param name="_notes"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.ClientEducationServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.GetByClientId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ClientEducation_Client key.
            	FK_ClientEducation_Client Description: 
            </summary>
            <param name="_clientId"></param>
            <returns>Returns a generic collection of ClientEducation objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.GetByClientId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ClientEducation_Client key.
            	FK_ClientEducation_Client Description: 
            </summary>
            <param name="_clientId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>ClientEducation</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.GetBySchoolId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ClientEducation_School key.
            	FK_ClientEducation_School Description: 
            </summary>
            <param name="_schoolId"></param>
            <returns>Returns a generic collection of ClientEducation objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.GetBySchoolId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ClientEducation_School key.
            	FK_ClientEducation_School Description: 
            </summary>
            <param name="_schoolId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>ClientEducation</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Get(Ekip.Framework.Entities.ClientEducationKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.GetByEducationId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_ClientEducation index.
            </summary>
            <param name="_educationId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientEducation"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.GetByEducationId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_ClientEducation index.
            </summary>
            <param name="_educationId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientEducation"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.ClientEducation" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.ClientEducation" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ClientEducation</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ClientEducation</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ClientEducation</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ClientEducation} of <c>ClientEducation</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ClientEducation</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ClientEducation</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ClientEducation</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ClientEducation</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ClientEducation</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Insert(Ekip.Framework.Entities.ClientEducation)">
            <summary>
            public virtual method that Inserts a ClientEducation object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientEducation object to Insert.</param>
            <remarks>After Inserting into the datasource, the ClientEducation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ClientEducation entity = new ClientEducation();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ClientEducationService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientEducation})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientEducation</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ClientEducation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ClientEducation.
             <code><![CDATA[
             TList<ClientEducation> list = new TList<ClientEducation>();
             ClientEducation entity = new ClientEducation();
             entity.StringProperty = "foo";
             ClientEducation entity2 = new ClientEducation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientEducationService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Update(Ekip.Framework.Entities.ClientEducation)">
            <summary>
            public virtual method that Updates a ClientEducation object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientEducation object to Update.</param>
            <remarks>After Updateing into the datasource, the ClientEducation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ClientEducation entity = ClientEducationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ClientEducationService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientEducation})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientEducation</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ClientEducation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ClientEducation.
             <code><![CDATA[
             TList<ClientEducation> list = new TList<ClientEducation>();
             ClientEducation entity = new ClientEducation();
             entity.StringProperty = "foo";
             ClientEducation entity2 = new ClientEducation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientEducationService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Save(Ekip.Framework.Entities.ClientEducation)">
            <summary>
            public virtual method that Saves a ClientEducation object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientEducation object to Save.</param>
            <remarks>After Saveing into the datasource, the ClientEducation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ClientEducation entity = ClientEducationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ClientEducationService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientEducation})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientEducation</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ClientEducation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ClientEducation.
             <code><![CDATA[
             TList<ClientEducation> list = new TList<ClientEducation>();
             ClientEducation entity = new ClientEducation();
             entity.StringProperty = "foo";
             ClientEducation entity2 = new ClientEducation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientEducationService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Delete(Ekip.Framework.Entities.ClientEducation)">
            <summary>
            public virtual method that Deletes a ClientEducation object into the datasource using a transaction.
            </summary>
            <param name="entity">ClientEducation object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ClientEducation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ClientEducation entity = ClientEducationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ClientEducationService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientEducation})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ClientEducation</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ClientEducation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ClientEducation.
             <code><![CDATA[
             TList<ClientEducation> list = new TList<ClientEducation>();
             ClientEducation entity = new ClientEducation();
             entity.StringProperty = "foo";
             ClientEducation entity2 = new ClientEducation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ClientEducationService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Delete(Ekip.Framework.Entities.ClientEducationKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _educationId
            </summary>
            <param name="_educationId">ClientEducation pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepLoadByEducationId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.ClientEducation"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_educationId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ClientEducation Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ClientEducation"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepLoad(Ekip.Framework.Entities.ClientEducation)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ClientEducation Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepLoad(Ekip.Framework.Entities.ClientEducation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepLoad(Ekip.Framework.Entities.ClientEducation,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepLoad(Ekip.Framework.Entities.ClientEducation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ClientEducation Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepLoad(Ekip.Framework.Entities.ClientEducation,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.ClientEducation"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ClientEducation Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientEducation})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepLoad(Ekip.Framework.Entities.ClientEducation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientEducation},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepLoad(Ekip.Framework.Entities.ClientEducation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientEducation},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.ClientEducation"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepSave(Ekip.Framework.Entities.ClientEducation)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.ClientEducation"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ClientEducation Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepSave(Ekip.Framework.Entities.ClientEducation,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ClientEducation object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ClientEducation Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ClientEducation</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientEducation})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ClientEducation} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ClientEducationServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ClientEducation},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ClientEducation Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.AreaService">
            <summary>
            An component type implementation of the 'Area' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.AreaService.#ctor">
            <summary>
            Initializes a new instance of the AreaService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.AreaServiceBase">
            <summary>
             An object representation of the 'Area' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Area.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Area"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Area"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.CreateArea(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Area"/> instance.
            </summary>
            <param name="_areaName"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.AreaServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Get(Ekip.Framework.Entities.AreaKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.GetByAreaId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Area index.
            </summary>
            <param name="_areaId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Area"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.GetByAreaId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Area index.
            </summary>
            <param name="_areaId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Area"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Area" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Area" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Area</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Area</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Area</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Area} of <c>Area</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Area</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Area</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Area</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Area</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Area</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Insert(Ekip.Framework.Entities.Area)">
            <summary>
            public virtual method that Inserts a Area object into the datasource using a transaction.
            </summary>
            <param name="entity">Area object to Insert.</param>
            <remarks>After Inserting into the datasource, the Area object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Area entity = new Area();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AreaService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Area})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Area</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Area</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Area.
             <code><![CDATA[
             TList<Area> list = new TList<Area>();
             Area entity = new Area();
             entity.StringProperty = "foo";
             Area entity2 = new Area();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AreaService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Update(Ekip.Framework.Entities.Area)">
            <summary>
            public virtual method that Updates a Area object into the datasource using a transaction.
            </summary>
            <param name="entity">Area object to Update.</param>
            <remarks>After Updateing into the datasource, the Area object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Area entity = AreaService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AreaService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Area})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Area</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Area</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Area.
             <code><![CDATA[
             TList<Area> list = new TList<Area>();
             Area entity = new Area();
             entity.StringProperty = "foo";
             Area entity2 = new Area();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AreaService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Save(Ekip.Framework.Entities.Area)">
            <summary>
            public virtual method that Saves a Area object into the datasource using a transaction.
            </summary>
            <param name="entity">Area object to Save.</param>
            <remarks>After Saveing into the datasource, the Area object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Area entity = AreaService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AreaService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Area})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Area</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Area</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Area.
             <code><![CDATA[
             TList<Area> list = new TList<Area>();
             Area entity = new Area();
             entity.StringProperty = "foo";
             Area entity2 = new Area();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AreaService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Delete(Ekip.Framework.Entities.Area)">
            <summary>
            public virtual method that Deletes a Area object into the datasource using a transaction.
            </summary>
            <param name="entity">Area object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Area object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Area entity = AreaService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AreaService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Area})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Area</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Area</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Area.
             <code><![CDATA[
             TList<Area> list = new TList<Area>();
             Area entity = new Area();
             entity.StringProperty = "foo";
             Area entity2 = new Area();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AreaService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Delete(Ekip.Framework.Entities.AreaKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _areaId
            </summary>
            <param name="_areaId">Area pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.DeepLoadByAreaId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Area"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_areaId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Area Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Area"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.DeepLoad(Ekip.Framework.Entities.Area)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Area Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.AreaServiceBase.DeepLoad(Ekip.Framework.Entities.Area)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.DeepLoad(Ekip.Framework.Entities.Area,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.AreaServiceBase.DeepLoad(Ekip.Framework.Entities.Area)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Area Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.DeepLoad(Ekip.Framework.Entities.Area,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Area"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Area Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Area})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.AreaServiceBase.DeepLoad(Ekip.Framework.Entities.Area)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Area},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.AreaServiceBase.DeepLoad(Ekip.Framework.Entities.Area)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Area},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Area"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.DeepSave(Ekip.Framework.Entities.Area)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Area"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Area Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.DeepSave(Ekip.Framework.Entities.Area,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Area object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Area Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Area</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Area})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Area} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.AreaServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Area},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Area Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.JobService">
            <summary>
            An component type implementation of the 'Job' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.JobService.#ctor">
            <summary>
            Initializes a new instance of the JobService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.JobServiceBase">
            <summary>
             An object representation of the 'Job' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Job.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Job"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Job"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.CreateJob(System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Job"/> instance.
            </summary>
            <param name="_jobCode"></param>
            <param name="_jobName"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.JobServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Get(Ekip.Framework.Entities.JobKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.GetByJobName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Job_FullName index.
            </summary>
            <param name="_jobName"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Job"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.GetByJobName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Job_FullName index.
            </summary>
            <param name="_jobName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Job"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.GetByJobId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Job index.
            </summary>
            <param name="_jobId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Job"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.GetByJobId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Job index.
            </summary>
            <param name="_jobId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Job"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Job" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Job" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Job</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Job</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Job</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Job} of <c>Job</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Job</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Job</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Job</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Job</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Job</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Insert(Ekip.Framework.Entities.Job)">
            <summary>
            public virtual method that Inserts a Job object into the datasource using a transaction.
            </summary>
            <param name="entity">Job object to Insert.</param>
            <remarks>After Inserting into the datasource, the Job object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Job entity = new Job();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	JobService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Job})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Job</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Job</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Job.
             <code><![CDATA[
             TList<Job> list = new TList<Job>();
             Job entity = new Job();
             entity.StringProperty = "foo";
             Job entity2 = new Job();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	JobService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Update(Ekip.Framework.Entities.Job)">
            <summary>
            public virtual method that Updates a Job object into the datasource using a transaction.
            </summary>
            <param name="entity">Job object to Update.</param>
            <remarks>After Updateing into the datasource, the Job object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Job entity = JobService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	JobService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Job})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Job</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Job</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Job.
             <code><![CDATA[
             TList<Job> list = new TList<Job>();
             Job entity = new Job();
             entity.StringProperty = "foo";
             Job entity2 = new Job();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	JobService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Save(Ekip.Framework.Entities.Job)">
            <summary>
            public virtual method that Saves a Job object into the datasource using a transaction.
            </summary>
            <param name="entity">Job object to Save.</param>
            <remarks>After Saveing into the datasource, the Job object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Job entity = JobService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	JobService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Job})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Job</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Job</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Job.
             <code><![CDATA[
             TList<Job> list = new TList<Job>();
             Job entity = new Job();
             entity.StringProperty = "foo";
             Job entity2 = new Job();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	JobService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Delete(Ekip.Framework.Entities.Job)">
            <summary>
            public virtual method that Deletes a Job object into the datasource using a transaction.
            </summary>
            <param name="entity">Job object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Job object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Job entity = JobService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	JobService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Job})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Job</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Job</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Job.
             <code><![CDATA[
             TList<Job> list = new TList<Job>();
             Job entity = new Job();
             entity.StringProperty = "foo";
             Job entity2 = new Job();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	JobService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Delete(Ekip.Framework.Entities.JobKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _jobId
            </summary>
            <param name="_jobId">Job pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.DeepLoadByJobName(System.String,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Job"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_jobName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Job Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Job"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.DeepLoadByJobId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Job"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_jobId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Job Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Job"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.DeepLoad(Ekip.Framework.Entities.Job)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Job Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.JobServiceBase.DeepLoad(Ekip.Framework.Entities.Job)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.DeepLoad(Ekip.Framework.Entities.Job,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.JobServiceBase.DeepLoad(Ekip.Framework.Entities.Job)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Job Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.DeepLoad(Ekip.Framework.Entities.Job,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Job"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Job Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Job})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.JobServiceBase.DeepLoad(Ekip.Framework.Entities.Job)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Job},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.JobServiceBase.DeepLoad(Ekip.Framework.Entities.Job)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Job},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Job"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.DeepSave(Ekip.Framework.Entities.Job)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Job"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Job Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.DeepSave(Ekip.Framework.Entities.Job,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Job object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Job Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Job</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Job})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Job} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.JobServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Job},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Job Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.NeighborhoodService">
            <summary>
            An component type implementation of the 'Neighborhood' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodService.#ctor">
            <summary>
            Initializes a new instance of the NeighborhoodService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.NeighborhoodServiceBase">
            <summary>
             An object representation of the 'Neighborhood' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Neighborhood.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Neighborhood"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Neighborhood"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.CreateNeighborhood(System.Int64,System.Int64,System.Int64,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.DateTime,System.TimeSpan,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Neighborhood"/> instance.
            </summary>
            <param name="_adminId"></param>
            <param name="_objectId"></param>
            <param name="_parentId"></param>
            <param name="_rowNumber"></param>
            <param name="_townId"></param>
            <param name="_neighborhoodName"></param>
            <param name="_longitude"></param>
            <param name="_latitude"></param>
            <param name="_type"></param>
            <param name="_createDate"></param>
            <param name="_createTime"></param>
            <param name="_updateDate"></param>
            <param name="_updateTime"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.NeighborhoodServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Get(Ekip.Framework.Entities.NeighborhoodKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.GetByTownId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Neighborhood index.
            </summary>
            <param name="_townId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.GetByTownId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key IX_Neighborhood index.
            </summary>
            <param name="_townId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.GetByNeighborhoodId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Neighborhood index.
            </summary>
            <param name="_neighborhoodId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Neighborhood"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.GetByNeighborhoodId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Neighborhood index.
            </summary>
            <param name="_neighborhoodId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Neighborhood"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Neighborhood" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Neighborhood" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Neighborhood</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Neighborhood</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Neighborhood</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Neighborhood} of <c>Neighborhood</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Neighborhood</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Neighborhood</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Neighborhood</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Neighborhood</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Neighborhood</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Insert(Ekip.Framework.Entities.Neighborhood)">
            <summary>
            public virtual method that Inserts a Neighborhood object into the datasource using a transaction.
            </summary>
            <param name="entity">Neighborhood object to Insert.</param>
            <remarks>After Inserting into the datasource, the Neighborhood object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Neighborhood entity = new Neighborhood();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	NeighborhoodService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Neighborhood})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Neighborhood</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Neighborhood</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Neighborhood.
             <code><![CDATA[
             TList<Neighborhood> list = new TList<Neighborhood>();
             Neighborhood entity = new Neighborhood();
             entity.StringProperty = "foo";
             Neighborhood entity2 = new Neighborhood();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NeighborhoodService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Update(Ekip.Framework.Entities.Neighborhood)">
            <summary>
            public virtual method that Updates a Neighborhood object into the datasource using a transaction.
            </summary>
            <param name="entity">Neighborhood object to Update.</param>
            <remarks>After Updateing into the datasource, the Neighborhood object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Neighborhood entity = NeighborhoodService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	NeighborhoodService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Neighborhood})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Neighborhood</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Neighborhood</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Neighborhood.
             <code><![CDATA[
             TList<Neighborhood> list = new TList<Neighborhood>();
             Neighborhood entity = new Neighborhood();
             entity.StringProperty = "foo";
             Neighborhood entity2 = new Neighborhood();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NeighborhoodService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Save(Ekip.Framework.Entities.Neighborhood)">
            <summary>
            public virtual method that Saves a Neighborhood object into the datasource using a transaction.
            </summary>
            <param name="entity">Neighborhood object to Save.</param>
            <remarks>After Saveing into the datasource, the Neighborhood object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Neighborhood entity = NeighborhoodService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	NeighborhoodService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Neighborhood})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Neighborhood</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Neighborhood</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Neighborhood.
             <code><![CDATA[
             TList<Neighborhood> list = new TList<Neighborhood>();
             Neighborhood entity = new Neighborhood();
             entity.StringProperty = "foo";
             Neighborhood entity2 = new Neighborhood();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NeighborhoodService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Delete(Ekip.Framework.Entities.Neighborhood)">
            <summary>
            public virtual method that Deletes a Neighborhood object into the datasource using a transaction.
            </summary>
            <param name="entity">Neighborhood object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Neighborhood object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Neighborhood entity = NeighborhoodService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	NeighborhoodService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Neighborhood})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Neighborhood</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Neighborhood</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Neighborhood.
             <code><![CDATA[
             TList<Neighborhood> list = new TList<Neighborhood>();
             Neighborhood entity = new Neighborhood();
             entity.StringProperty = "foo";
             Neighborhood entity2 = new Neighborhood();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NeighborhoodService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Delete(Ekip.Framework.Entities.NeighborhoodKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _neighborhoodId
            </summary>
            <param name="_neighborhoodId">Neighborhood pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepLoadByTownId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_townId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Neighborhood Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepLoadByNeighborhoodId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Neighborhood"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_neighborhoodId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Neighborhood Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Neighborhood"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepLoad(Ekip.Framework.Entities.Neighborhood)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Neighborhood Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepLoad(Ekip.Framework.Entities.Neighborhood)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepLoad(Ekip.Framework.Entities.Neighborhood,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepLoad(Ekip.Framework.Entities.Neighborhood)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Neighborhood Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepLoad(Ekip.Framework.Entities.Neighborhood,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Neighborhood"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Neighborhood Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Neighborhood})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepLoad(Ekip.Framework.Entities.Neighborhood)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Neighborhood},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepLoad(Ekip.Framework.Entities.Neighborhood)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Neighborhood},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Neighborhood"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepSave(Ekip.Framework.Entities.Neighborhood)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Neighborhood"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Neighborhood Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepSave(Ekip.Framework.Entities.Neighborhood,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Neighborhood object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Neighborhood Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Neighborhood</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Neighborhood})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Neighborhood} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Neighborhood},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Neighborhood Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.QuestionFormOptionService">
            <summary>
            An component type implementation of the 'QuestionForm_Option' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionService.#ctor">
            <summary>
            Initializes a new instance of the QuestionFormOptionService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.QuestionFormOptionServiceBase">
            <summary>
             An object representation of the 'QuestionFormOption' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the QuestionFormOption.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.CreateQuestionFormOption(System.Int32,System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> instance.
            </summary>
            <param name="_questionId"></param>
            <param name="_optionName"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.QuestionFormOptionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.GetByQuestionId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_QuestionForm_Option_QuestionForm key.
            	FK_QuestionForm_Option_QuestionForm Description: 
            </summary>
            <param name="_questionId"></param>
            <returns>Returns a generic collection of QuestionFormOption objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.GetByQuestionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_QuestionForm_Option_QuestionForm key.
            	FK_QuestionForm_Option_QuestionForm Description: 
            </summary>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>QuestionFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Get(Ekip.Framework.Entities.QuestionFormOptionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.GetByOptionId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_QuestionForm_Option index.
            </summary>
            <param name="_optionId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.GetByOptionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_QuestionForm_Option index.
            </summary>
            <param name="_optionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.QuestionFormOption" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.QuestionFormOption" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{QuestionFormOption} of <c>QuestionFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>QuestionFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Insert(Ekip.Framework.Entities.QuestionFormOption)">
            <summary>
            public virtual method that Inserts a QuestionFormOption object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionFormOption object to Insert.</param>
            <remarks>After Inserting into the datasource, the QuestionFormOption object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            QuestionFormOption entity = new QuestionFormOption();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	QuestionFormOptionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormOption})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionFormOption</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>QuestionFormOption</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of QuestionFormOption.
             <code><![CDATA[
             TList<QuestionFormOption> list = new TList<QuestionFormOption>();
             QuestionFormOption entity = new QuestionFormOption();
             entity.StringProperty = "foo";
             QuestionFormOption entity2 = new QuestionFormOption();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormOptionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Update(Ekip.Framework.Entities.QuestionFormOption)">
            <summary>
            public virtual method that Updates a QuestionFormOption object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionFormOption object to Update.</param>
            <remarks>After Updateing into the datasource, the QuestionFormOption object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            QuestionFormOption entity = QuestionFormOptionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	QuestionFormOptionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormOption})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionFormOption</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>QuestionFormOption</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of QuestionFormOption.
             <code><![CDATA[
             TList<QuestionFormOption> list = new TList<QuestionFormOption>();
             QuestionFormOption entity = new QuestionFormOption();
             entity.StringProperty = "foo";
             QuestionFormOption entity2 = new QuestionFormOption();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormOptionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Save(Ekip.Framework.Entities.QuestionFormOption)">
            <summary>
            public virtual method that Saves a QuestionFormOption object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionFormOption object to Save.</param>
            <remarks>After Saveing into the datasource, the QuestionFormOption object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            QuestionFormOption entity = QuestionFormOptionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	QuestionFormOptionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormOption})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionFormOption</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>QuestionFormOption</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of QuestionFormOption.
             <code><![CDATA[
             TList<QuestionFormOption> list = new TList<QuestionFormOption>();
             QuestionFormOption entity = new QuestionFormOption();
             entity.StringProperty = "foo";
             QuestionFormOption entity2 = new QuestionFormOption();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormOptionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Delete(Ekip.Framework.Entities.QuestionFormOption)">
            <summary>
            public virtual method that Deletes a QuestionFormOption object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionFormOption object to Delete.</param>
            <remarks>After Deleteing into the datasource, the QuestionFormOption object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            QuestionFormOption entity = QuestionFormOptionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	QuestionFormOptionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormOption})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionFormOption</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>QuestionFormOption</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of QuestionFormOption.
             <code><![CDATA[
             TList<QuestionFormOption> list = new TList<QuestionFormOption>();
             QuestionFormOption entity = new QuestionFormOption();
             entity.StringProperty = "foo";
             QuestionFormOption entity2 = new QuestionFormOption();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormOptionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Delete(Ekip.Framework.Entities.QuestionFormOptionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _optionId
            </summary>
            <param name="_optionId">QuestionFormOption pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepLoadByOptionId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_optionId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionFormOption Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormOption)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">QuestionFormOption Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormOption)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormOption,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormOption)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">QuestionFormOption Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormOption,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionFormOption Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormOption})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormOption)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormOption},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormOption)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormOption},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepSave(Ekip.Framework.Entities.QuestionFormOption)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.QuestionFormOption"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">QuestionFormOption Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepSave(Ekip.Framework.Entities.QuestionFormOption,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the QuestionFormOption object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">QuestionFormOption Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>QuestionFormOption</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormOption})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{QuestionFormOption} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormOptionServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormOption},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QuestionFormOption Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.QuestionFormAnswerService">
            <summary>
            An component type implementation of the 'QuestionForm_Answer' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerService.#ctor">
            <summary>
            Initializes a new instance of the QuestionFormAnswerService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.QuestionFormAnswerServiceBase">
            <summary>
             An object representation of the 'QuestionFormAnswer' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the QuestionFormAnswer.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.CreateQuestionFormAnswer(System.Int32,System.Int32,System.Int32,System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> instance.
            </summary>
            <param name="_clientId"></param>
            <param name="_questionId"></param>
            <param name="_optionId"></param>
            <param name="_description"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.QuestionFormAnswerServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetByClientId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_QuestionForm_Answer_Client key.
            	FK_QuestionForm_Answer_Client Description: 
            </summary>
            <param name="_clientId"></param>
            <returns>Returns a generic collection of QuestionFormAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetByClientId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_QuestionForm_Answer_Client key.
            	FK_QuestionForm_Answer_Client Description: 
            </summary>
            <param name="_clientId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>QuestionFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetByQuestionId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_QuestionForm_Answer_QuestionForm key.
            	FK_QuestionForm_Answer_QuestionForm Description: 
            </summary>
            <param name="_questionId"></param>
            <returns>Returns a generic collection of QuestionFormAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetByQuestionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_QuestionForm_Answer_QuestionForm key.
            	FK_QuestionForm_Answer_QuestionForm Description: 
            </summary>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>QuestionFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetByOptionId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_QuestionForm_Answer_QuestionForm_Option key.
            	FK_QuestionForm_Answer_QuestionForm_Option Description: 
            </summary>
            <param name="_optionId"></param>
            <returns>Returns a generic collection of QuestionFormAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetByOptionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_QuestionForm_Answer_QuestionForm_Option key.
            	FK_QuestionForm_Answer_QuestionForm_Option Description: 
            </summary>
            <param name="_optionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>QuestionFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Get(Ekip.Framework.Entities.QuestionFormAnswerKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetByRowId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_QuestionForm_Answer index.
            </summary>
            <param name="_rowId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetByRowId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_QuestionForm_Answer index.
            </summary>
            <param name="_rowId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{QuestionFormAnswer} of <c>QuestionFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>QuestionFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Insert(Ekip.Framework.Entities.QuestionFormAnswer)">
            <summary>
            public virtual method that Inserts a QuestionFormAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionFormAnswer object to Insert.</param>
            <remarks>After Inserting into the datasource, the QuestionFormAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            QuestionFormAnswer entity = new QuestionFormAnswer();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	QuestionFormAnswerService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormAnswer})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionFormAnswer</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>QuestionFormAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of QuestionFormAnswer.
             <code><![CDATA[
             TList<QuestionFormAnswer> list = new TList<QuestionFormAnswer>();
             QuestionFormAnswer entity = new QuestionFormAnswer();
             entity.StringProperty = "foo";
             QuestionFormAnswer entity2 = new QuestionFormAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormAnswerService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Update(Ekip.Framework.Entities.QuestionFormAnswer)">
            <summary>
            public virtual method that Updates a QuestionFormAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionFormAnswer object to Update.</param>
            <remarks>After Updateing into the datasource, the QuestionFormAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            QuestionFormAnswer entity = QuestionFormAnswerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	QuestionFormAnswerService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormAnswer})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionFormAnswer</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>QuestionFormAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of QuestionFormAnswer.
             <code><![CDATA[
             TList<QuestionFormAnswer> list = new TList<QuestionFormAnswer>();
             QuestionFormAnswer entity = new QuestionFormAnswer();
             entity.StringProperty = "foo";
             QuestionFormAnswer entity2 = new QuestionFormAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormAnswerService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Save(Ekip.Framework.Entities.QuestionFormAnswer)">
            <summary>
            public virtual method that Saves a QuestionFormAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionFormAnswer object to Save.</param>
            <remarks>After Saveing into the datasource, the QuestionFormAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            QuestionFormAnswer entity = QuestionFormAnswerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	QuestionFormAnswerService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormAnswer})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionFormAnswer</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>QuestionFormAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of QuestionFormAnswer.
             <code><![CDATA[
             TList<QuestionFormAnswer> list = new TList<QuestionFormAnswer>();
             QuestionFormAnswer entity = new QuestionFormAnswer();
             entity.StringProperty = "foo";
             QuestionFormAnswer entity2 = new QuestionFormAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormAnswerService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Delete(Ekip.Framework.Entities.QuestionFormAnswer)">
            <summary>
            public virtual method that Deletes a QuestionFormAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionFormAnswer object to Delete.</param>
            <remarks>After Deleteing into the datasource, the QuestionFormAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            QuestionFormAnswer entity = QuestionFormAnswerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	QuestionFormAnswerService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormAnswer})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionFormAnswer</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>QuestionFormAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of QuestionFormAnswer.
             <code><![CDATA[
             TList<QuestionFormAnswer> list = new TList<QuestionFormAnswer>();
             QuestionFormAnswer entity = new QuestionFormAnswer();
             entity.StringProperty = "foo";
             QuestionFormAnswer entity2 = new QuestionFormAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionFormAnswerService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Delete(Ekip.Framework.Entities.QuestionFormAnswerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _rowId
            </summary>
            <param name="_rowId">QuestionFormAnswer pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepLoadByRowId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionFormAnswer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormAnswer)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">QuestionFormAnswer Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormAnswer,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">QuestionFormAnswer Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormAnswer,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionFormAnswer Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormAnswer})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormAnswer},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.QuestionFormAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormAnswer},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepSave(Ekip.Framework.Entities.QuestionFormAnswer)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.QuestionFormAnswer"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">QuestionFormAnswer Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepSave(Ekip.Framework.Entities.QuestionFormAnswer,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the QuestionFormAnswer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">QuestionFormAnswer Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>QuestionFormAnswer</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormAnswer})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{QuestionFormAnswer} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.QuestionFormAnswerServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.QuestionFormAnswer},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QuestionFormAnswer Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.ObservationFormGroupService">
            <summary>
            An component type implementation of the 'ObservationForm_Group' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupService.#ctor">
            <summary>
            Initializes a new instance of the ObservationFormGroupService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ObservationFormGroupServiceBase">
            <summary>
             An object representation of the 'ObservationForm_Group' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ObservationFormGroup.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.CreateObservationFormGroup(System.String,System.Int32,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> instance.
            </summary>
            <param name="_groupName"></param>
            <param name="_lineNumber"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.ObservationFormGroupServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Get(Ekip.Framework.Entities.ObservationFormGroupKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.GetByGroupId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_ObservationForm_Group index.
            </summary>
            <param name="_groupId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.GetByGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_ObservationForm_Group index.
            </summary>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.ObservationFormGroup" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.ObservationFormGroup" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ObservationFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ObservationFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ObservationFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ObservationFormGroup} of <c>ObservationFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ObservationFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ObservationFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ObservationFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ObservationFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ObservationFormGroup</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Insert(Ekip.Framework.Entities.ObservationFormGroup)">
            <summary>
            public virtual method that Inserts a ObservationFormGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationFormGroup object to Insert.</param>
            <remarks>After Inserting into the datasource, the ObservationFormGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ObservationFormGroup entity = new ObservationFormGroup();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ObservationFormGroupService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormGroup})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationFormGroup</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ObservationFormGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ObservationFormGroup.
             <code><![CDATA[
             TList<ObservationFormGroup> list = new TList<ObservationFormGroup>();
             ObservationFormGroup entity = new ObservationFormGroup();
             entity.StringProperty = "foo";
             ObservationFormGroup entity2 = new ObservationFormGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormGroupService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Update(Ekip.Framework.Entities.ObservationFormGroup)">
            <summary>
            public virtual method that Updates a ObservationFormGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationFormGroup object to Update.</param>
            <remarks>After Updateing into the datasource, the ObservationFormGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ObservationFormGroup entity = ObservationFormGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ObservationFormGroupService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormGroup})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationFormGroup</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ObservationFormGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ObservationFormGroup.
             <code><![CDATA[
             TList<ObservationFormGroup> list = new TList<ObservationFormGroup>();
             ObservationFormGroup entity = new ObservationFormGroup();
             entity.StringProperty = "foo";
             ObservationFormGroup entity2 = new ObservationFormGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormGroupService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Save(Ekip.Framework.Entities.ObservationFormGroup)">
            <summary>
            public virtual method that Saves a ObservationFormGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationFormGroup object to Save.</param>
            <remarks>After Saveing into the datasource, the ObservationFormGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ObservationFormGroup entity = ObservationFormGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ObservationFormGroupService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormGroup})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationFormGroup</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ObservationFormGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ObservationFormGroup.
             <code><![CDATA[
             TList<ObservationFormGroup> list = new TList<ObservationFormGroup>();
             ObservationFormGroup entity = new ObservationFormGroup();
             entity.StringProperty = "foo";
             ObservationFormGroup entity2 = new ObservationFormGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormGroupService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Delete(Ekip.Framework.Entities.ObservationFormGroup)">
            <summary>
            public virtual method that Deletes a ObservationFormGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationFormGroup object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ObservationFormGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ObservationFormGroup entity = ObservationFormGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ObservationFormGroupService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormGroup})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationFormGroup</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ObservationFormGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ObservationFormGroup.
             <code><![CDATA[
             TList<ObservationFormGroup> list = new TList<ObservationFormGroup>();
             ObservationFormGroup entity = new ObservationFormGroup();
             entity.StringProperty = "foo";
             ObservationFormGroup entity2 = new ObservationFormGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormGroupService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Delete(Ekip.Framework.Entities.ObservationFormGroupKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _groupId
            </summary>
            <param name="_groupId">ObservationFormGroup pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepLoadByGroupId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_groupId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ObservationFormGroup Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormGroup)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ObservationFormGroup Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormGroup,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ObservationFormGroup Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormGroup,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ObservationFormGroup Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormGroup})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormGroup},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormGroup},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepSave(Ekip.Framework.Entities.ObservationFormGroup)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.ObservationFormGroup"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ObservationFormGroup Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepSave(Ekip.Framework.Entities.ObservationFormGroup,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ObservationFormGroup object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ObservationFormGroup Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ObservationFormGroup</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormGroup})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ObservationFormGroup} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormGroupServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormGroup},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ObservationFormGroup Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.ObservationFormService">
            <summary>
            An component type implementation of the 'ObservationForm' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormService.#ctor">
            <summary>
            Initializes a new instance of the ObservationFormService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ObservationFormServiceBase">
            <summary>
             An object representation of the 'ObservationForm' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ObservationForm.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.ObservationForm"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.ObservationForm"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.CreateObservationForm(System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Boolean,System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.ObservationForm"/> instance.
            </summary>
            <param name="_groupId"></param>
            <param name="_questionRef"></param>
            <param name="_questionName"></param>
            <param name="_lineNumber"></param>
            <param name="_status"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.ObservationFormServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.GetByGroupId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ObservationForm_ObservationForm_Group key.
            	FK_ObservationForm_ObservationForm_Group Description: 
            </summary>
            <param name="_groupId"></param>
            <returns>Returns a generic collection of ObservationForm objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.GetByGroupId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ObservationForm_ObservationForm_Group key.
            	FK_ObservationForm_ObservationForm_Group Description: 
            </summary>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>ObservationForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Get(Ekip.Framework.Entities.ObservationFormKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.GetByQuestionId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_ObservationForm index.
            </summary>
            <param name="_questionId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationForm"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.GetByQuestionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_ObservationForm index.
            </summary>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationForm"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.ObservationForm" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.ObservationForm" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ObservationForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ObservationForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ObservationForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ObservationForm} of <c>ObservationForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ObservationForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ObservationForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ObservationForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ObservationForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ObservationForm</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Insert(Ekip.Framework.Entities.ObservationForm)">
            <summary>
            public virtual method that Inserts a ObservationForm object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationForm object to Insert.</param>
            <remarks>After Inserting into the datasource, the ObservationForm object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ObservationForm entity = new ObservationForm();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ObservationFormService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationForm})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationForm</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ObservationForm</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ObservationForm.
             <code><![CDATA[
             TList<ObservationForm> list = new TList<ObservationForm>();
             ObservationForm entity = new ObservationForm();
             entity.StringProperty = "foo";
             ObservationForm entity2 = new ObservationForm();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Update(Ekip.Framework.Entities.ObservationForm)">
            <summary>
            public virtual method that Updates a ObservationForm object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationForm object to Update.</param>
            <remarks>After Updateing into the datasource, the ObservationForm object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ObservationForm entity = ObservationFormService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ObservationFormService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationForm})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationForm</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ObservationForm</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ObservationForm.
             <code><![CDATA[
             TList<ObservationForm> list = new TList<ObservationForm>();
             ObservationForm entity = new ObservationForm();
             entity.StringProperty = "foo";
             ObservationForm entity2 = new ObservationForm();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Save(Ekip.Framework.Entities.ObservationForm)">
            <summary>
            public virtual method that Saves a ObservationForm object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationForm object to Save.</param>
            <remarks>After Saveing into the datasource, the ObservationForm object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ObservationForm entity = ObservationFormService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ObservationFormService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationForm})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationForm</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ObservationForm</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ObservationForm.
             <code><![CDATA[
             TList<ObservationForm> list = new TList<ObservationForm>();
             ObservationForm entity = new ObservationForm();
             entity.StringProperty = "foo";
             ObservationForm entity2 = new ObservationForm();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Delete(Ekip.Framework.Entities.ObservationForm)">
            <summary>
            public virtual method that Deletes a ObservationForm object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationForm object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ObservationForm object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ObservationForm entity = ObservationFormService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ObservationFormService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationForm})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationForm</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ObservationForm</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ObservationForm.
             <code><![CDATA[
             TList<ObservationForm> list = new TList<ObservationForm>();
             ObservationForm entity = new ObservationForm();
             entity.StringProperty = "foo";
             ObservationForm entity2 = new ObservationForm();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Delete(Ekip.Framework.Entities.ObservationFormKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _questionId
            </summary>
            <param name="_questionId">ObservationForm pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepLoadByQuestionId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.ObservationForm"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_questionId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ObservationForm Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationForm"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationForm)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ObservationForm Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationForm)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationForm,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationForm)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ObservationForm Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationForm,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.ObservationForm"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ObservationForm Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationForm})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationForm)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationForm},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationForm)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationForm},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.ObservationForm"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepSave(Ekip.Framework.Entities.ObservationForm)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.ObservationForm"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ObservationForm Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepSave(Ekip.Framework.Entities.ObservationForm,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ObservationForm object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ObservationForm Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ObservationForm</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationForm})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ObservationForm} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationForm},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ObservationForm Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.ObservationFormOptionService">
            <summary>
            An component type implementation of the 'ObservationForm_Option' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionService.#ctor">
            <summary>
            Initializes a new instance of the ObservationFormOptionService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ObservationFormOptionServiceBase">
            <summary>
             An object representation of the 'ObservationForm_Option' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ObservationFormOption.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.CreateObservationFormOption(System.Int32,System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> instance.
            </summary>
            <param name="_questionId"></param>
            <param name="_optionName"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.ObservationFormOptionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.GetByQuestionId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ObservationForm_Option_ObservationForm key.
            	FK_ObservationForm_Option_ObservationForm Description: 
            </summary>
            <param name="_questionId"></param>
            <returns>Returns a generic collection of ObservationFormOption objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.GetByQuestionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ObservationForm_Option_ObservationForm key.
            	FK_ObservationForm_Option_ObservationForm Description: 
            </summary>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>ObservationFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Get(Ekip.Framework.Entities.ObservationFormOptionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.GetByOptionId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_ObservationForm_Option index.
            </summary>
            <param name="_optionId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.GetByOptionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_ObservationForm_Option index.
            </summary>
            <param name="_optionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.ObservationFormOption" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.ObservationFormOption" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ObservationFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ObservationFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ObservationFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ObservationFormOption} of <c>ObservationFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ObservationFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ObservationFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ObservationFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ObservationFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ObservationFormOption</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Insert(Ekip.Framework.Entities.ObservationFormOption)">
            <summary>
            public virtual method that Inserts a ObservationFormOption object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationFormOption object to Insert.</param>
            <remarks>After Inserting into the datasource, the ObservationFormOption object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ObservationFormOption entity = new ObservationFormOption();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ObservationFormOptionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormOption})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationFormOption</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ObservationFormOption</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ObservationFormOption.
             <code><![CDATA[
             TList<ObservationFormOption> list = new TList<ObservationFormOption>();
             ObservationFormOption entity = new ObservationFormOption();
             entity.StringProperty = "foo";
             ObservationFormOption entity2 = new ObservationFormOption();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormOptionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Update(Ekip.Framework.Entities.ObservationFormOption)">
            <summary>
            public virtual method that Updates a ObservationFormOption object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationFormOption object to Update.</param>
            <remarks>After Updateing into the datasource, the ObservationFormOption object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ObservationFormOption entity = ObservationFormOptionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ObservationFormOptionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormOption})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationFormOption</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ObservationFormOption</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ObservationFormOption.
             <code><![CDATA[
             TList<ObservationFormOption> list = new TList<ObservationFormOption>();
             ObservationFormOption entity = new ObservationFormOption();
             entity.StringProperty = "foo";
             ObservationFormOption entity2 = new ObservationFormOption();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormOptionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Save(Ekip.Framework.Entities.ObservationFormOption)">
            <summary>
            public virtual method that Saves a ObservationFormOption object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationFormOption object to Save.</param>
            <remarks>After Saveing into the datasource, the ObservationFormOption object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ObservationFormOption entity = ObservationFormOptionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ObservationFormOptionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormOption})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationFormOption</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ObservationFormOption</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ObservationFormOption.
             <code><![CDATA[
             TList<ObservationFormOption> list = new TList<ObservationFormOption>();
             ObservationFormOption entity = new ObservationFormOption();
             entity.StringProperty = "foo";
             ObservationFormOption entity2 = new ObservationFormOption();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormOptionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Delete(Ekip.Framework.Entities.ObservationFormOption)">
            <summary>
            public virtual method that Deletes a ObservationFormOption object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationFormOption object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ObservationFormOption object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ObservationFormOption entity = ObservationFormOptionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ObservationFormOptionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormOption})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationFormOption</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ObservationFormOption</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ObservationFormOption.
             <code><![CDATA[
             TList<ObservationFormOption> list = new TList<ObservationFormOption>();
             ObservationFormOption entity = new ObservationFormOption();
             entity.StringProperty = "foo";
             ObservationFormOption entity2 = new ObservationFormOption();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormOptionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Delete(Ekip.Framework.Entities.ObservationFormOptionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _optionId
            </summary>
            <param name="_optionId">ObservationFormOption pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepLoadByOptionId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_optionId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ObservationFormOption Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormOption)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ObservationFormOption Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormOption)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormOption,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormOption)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ObservationFormOption Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormOption,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ObservationFormOption Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormOption})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormOption)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormOption},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormOption)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormOption},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepSave(Ekip.Framework.Entities.ObservationFormOption)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.ObservationFormOption"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ObservationFormOption Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepSave(Ekip.Framework.Entities.ObservationFormOption,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ObservationFormOption object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ObservationFormOption Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ObservationFormOption</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormOption})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ObservationFormOption} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormOptionServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormOption},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ObservationFormOption Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.ObservationFormAnswerService">
            <summary>
            An component type implementation of the 'ObservationForm_Answer' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerService.#ctor">
            <summary>
            Initializes a new instance of the ObservationFormAnswerService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ObservationFormAnswerServiceBase">
            <summary>
             An object representation of the 'ObservationForm_Answer' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ObservationFormAnswer.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.CreateObservationFormAnswer(System.Int32,System.Int32,System.Int32,System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> instance.
            </summary>
            <param name="_clientId"></param>
            <param name="_questionId"></param>
            <param name="_optionId"></param>
            <param name="_description"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.ObservationFormAnswerServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetByClientId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ObservationForm_Answer_Client key.
            	FK_ObservationForm_Answer_Client Description: 
            </summary>
            <param name="_clientId"></param>
            <returns>Returns a generic collection of ObservationFormAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetByClientId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ObservationForm_Answer_Client key.
            	FK_ObservationForm_Answer_Client Description: 
            </summary>
            <param name="_clientId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>ObservationFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetByQuestionId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ObservationForm_Answer_ObservationForm key.
            	FK_ObservationForm_Answer_ObservationForm Description: 
            </summary>
            <param name="_questionId"></param>
            <returns>Returns a generic collection of ObservationFormAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetByQuestionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ObservationForm_Answer_ObservationForm key.
            	FK_ObservationForm_Answer_ObservationForm Description: 
            </summary>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>ObservationFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetByOptionId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ObservationForm_Answer_ObservationForm_Option key.
            	FK_ObservationForm_Answer_ObservationForm_Option Description: 
            </summary>
            <param name="_optionId"></param>
            <returns>Returns a generic collection of ObservationFormAnswer objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetByOptionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the FK_ObservationForm_Answer_ObservationForm_Option key.
            	FK_ObservationForm_Answer_ObservationForm_Option Description: 
            </summary>
            <param name="_optionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Ekip.Framework.Entities.TList`1" /> of <c>ObservationFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Get(Ekip.Framework.Entities.ObservationFormAnswerKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetByRowId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_ObservationForm_Answer index.
            </summary>
            <param name="_rowId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetByRowId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_ObservationForm_Answer index.
            </summary>
            <param name="_rowId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ObservationFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ObservationFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ObservationFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ObservationFormAnswer} of <c>ObservationFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ObservationFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ObservationFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ObservationFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ObservationFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ObservationFormAnswer</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Insert(Ekip.Framework.Entities.ObservationFormAnswer)">
            <summary>
            public virtual method that Inserts a ObservationFormAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationFormAnswer object to Insert.</param>
            <remarks>After Inserting into the datasource, the ObservationFormAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ObservationFormAnswer entity = new ObservationFormAnswer();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ObservationFormAnswerService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormAnswer})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationFormAnswer</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ObservationFormAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ObservationFormAnswer.
             <code><![CDATA[
             TList<ObservationFormAnswer> list = new TList<ObservationFormAnswer>();
             ObservationFormAnswer entity = new ObservationFormAnswer();
             entity.StringProperty = "foo";
             ObservationFormAnswer entity2 = new ObservationFormAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormAnswerService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Update(Ekip.Framework.Entities.ObservationFormAnswer)">
            <summary>
            public virtual method that Updates a ObservationFormAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationFormAnswer object to Update.</param>
            <remarks>After Updateing into the datasource, the ObservationFormAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ObservationFormAnswer entity = ObservationFormAnswerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ObservationFormAnswerService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormAnswer})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationFormAnswer</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ObservationFormAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ObservationFormAnswer.
             <code><![CDATA[
             TList<ObservationFormAnswer> list = new TList<ObservationFormAnswer>();
             ObservationFormAnswer entity = new ObservationFormAnswer();
             entity.StringProperty = "foo";
             ObservationFormAnswer entity2 = new ObservationFormAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormAnswerService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Save(Ekip.Framework.Entities.ObservationFormAnswer)">
            <summary>
            public virtual method that Saves a ObservationFormAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationFormAnswer object to Save.</param>
            <remarks>After Saveing into the datasource, the ObservationFormAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ObservationFormAnswer entity = ObservationFormAnswerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ObservationFormAnswerService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormAnswer})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationFormAnswer</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ObservationFormAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ObservationFormAnswer.
             <code><![CDATA[
             TList<ObservationFormAnswer> list = new TList<ObservationFormAnswer>();
             ObservationFormAnswer entity = new ObservationFormAnswer();
             entity.StringProperty = "foo";
             ObservationFormAnswer entity2 = new ObservationFormAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormAnswerService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Delete(Ekip.Framework.Entities.ObservationFormAnswer)">
            <summary>
            public virtual method that Deletes a ObservationFormAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">ObservationFormAnswer object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ObservationFormAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ObservationFormAnswer entity = ObservationFormAnswerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ObservationFormAnswerService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormAnswer})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ObservationFormAnswer</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ObservationFormAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ObservationFormAnswer.
             <code><![CDATA[
             TList<ObservationFormAnswer> list = new TList<ObservationFormAnswer>();
             ObservationFormAnswer entity = new ObservationFormAnswer();
             entity.StringProperty = "foo";
             ObservationFormAnswer entity2 = new ObservationFormAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ObservationFormAnswerService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Delete(Ekip.Framework.Entities.ObservationFormAnswerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _rowId
            </summary>
            <param name="_rowId">ObservationFormAnswer pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepLoadByRowId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ObservationFormAnswer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormAnswer)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ObservationFormAnswer Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormAnswer,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ObservationFormAnswer Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormAnswer,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ObservationFormAnswer Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormAnswer})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormAnswer},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.ObservationFormAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormAnswer},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepSave(Ekip.Framework.Entities.ObservationFormAnswer)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.ObservationFormAnswer"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ObservationFormAnswer Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepSave(Ekip.Framework.Entities.ObservationFormAnswer,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ObservationFormAnswer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ObservationFormAnswer Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ObservationFormAnswer</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormAnswer})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ObservationFormAnswer} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.ObservationFormAnswerServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.ObservationFormAnswer},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ObservationFormAnswer Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.WiscrService">
            <summary>
            An component type implementation of the 'Wiscr' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrService.#ctor">
            <summary>
            Initializes a new instance of the WiscrService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.WiscrServiceBase">
            <summary>
             An object representation of the 'Wiscr' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Wiscr.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.Wiscr"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.Wiscr"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.CreateWiscr(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.DateTime,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.Wiscr"/> instance.
            </summary>
            <param name="_seanceId"></param>
            <param name="_generalRawScore"></param>
            <param name="_generalStandartScore"></param>
            <param name="_similarityRawScore"></param>
            <param name="_similarityStandartScore"></param>
            <param name="_arithmeticRawScore"></param>
            <param name="_arithmeticStandartScore"></param>
            <param name="_wordRawScore"></param>
            <param name="_wordStandartScore"></param>
            <param name="_judgingRawScore"></param>
            <param name="_judgingStandartScore"></param>
            <param name="_setOfNumbersRawScore"></param>
            <param name="_setOfNumbersStandartScore"></param>
            <param name="_ımageDefineRawScore"></param>
            <param name="_ımageDefineStandartScore"></param>
            <param name="_ımageEditingRawScore"></param>
            <param name="_ımageEditingStandartScore"></param>
            <param name="_cubesPatternRawScore"></param>
            <param name="_cubesPatternStandartScore"></param>
            <param name="_partsMergeRawScore"></param>
            <param name="_partsMergeStandartScore"></param>
            <param name="_passwordRawScore"></param>
            <param name="_passwordStandartScore"></param>
            <param name="_mazesRawScore"></param>
            <param name="_mazesStandartScore"></param>
            <param name="_totalVerbalScore"></param>
            <param name="_totalPerformanceScore"></param>
            <param name="_totalScore"></param>
            <param name="_notes"></param>
            <param name="_testDate"></param>
            <param name="_createDate"></param>
            <param name="_updateDate"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
        </member>
        <member name="P:Ekip.Framework.Services.WiscrServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Get(Ekip.Framework.Entities.WiscrKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.GetByWiscrId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Wiscr index.
            </summary>
            <param name="_wiscrId"></param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Wiscr"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.GetByWiscrId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the datasource based on the primary key PK_Wiscr index.
            </summary>
            <param name="_wiscrId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Wiscr"/> class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.Wiscr" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.Wiscr" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Wiscr</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Wiscr</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Wiscr</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Wiscr} of <c>Wiscr</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Wiscr</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Wiscr</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Wiscr</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,Ekip.Framework.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Ekip.Framework.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Wiscr</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Wiscr</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Insert(Ekip.Framework.Entities.Wiscr)">
            <summary>
            public virtual method that Inserts a Wiscr object into the datasource using a transaction.
            </summary>
            <param name="entity">Wiscr object to Insert.</param>
            <remarks>After Inserting into the datasource, the Wiscr object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Wiscr entity = new Wiscr();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	WiscrService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Insert(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wiscr})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Wiscr</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Wiscr</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Wiscr.
             <code><![CDATA[
             TList<Wiscr> list = new TList<Wiscr>();
             Wiscr entity = new Wiscr();
             entity.StringProperty = "foo";
             Wiscr entity2 = new Wiscr();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WiscrService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Update(Ekip.Framework.Entities.Wiscr)">
            <summary>
            public virtual method that Updates a Wiscr object into the datasource using a transaction.
            </summary>
            <param name="entity">Wiscr object to Update.</param>
            <remarks>After Updateing into the datasource, the Wiscr object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Wiscr entity = WiscrService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	WiscrService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Update(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wiscr})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Wiscr</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Wiscr</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Wiscr.
             <code><![CDATA[
             TList<Wiscr> list = new TList<Wiscr>();
             Wiscr entity = new Wiscr();
             entity.StringProperty = "foo";
             Wiscr entity2 = new Wiscr();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WiscrService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Save(Ekip.Framework.Entities.Wiscr)">
            <summary>
            public virtual method that Saves a Wiscr object into the datasource using a transaction.
            </summary>
            <param name="entity">Wiscr object to Save.</param>
            <remarks>After Saveing into the datasource, the Wiscr object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Wiscr entity = WiscrService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	WiscrService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Save(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wiscr})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Wiscr</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Wiscr</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Wiscr.
             <code><![CDATA[
             TList<Wiscr> list = new TList<Wiscr>();
             Wiscr entity = new Wiscr();
             entity.StringProperty = "foo";
             Wiscr entity2 = new Wiscr();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WiscrService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Delete(Ekip.Framework.Entities.Wiscr)">
            <summary>
            public virtual method that Deletes a Wiscr object into the datasource using a transaction.
            </summary>
            <param name="entity">Wiscr object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Wiscr object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Wiscr entity = WiscrService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	WiscrService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Delete(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wiscr})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Ekip.Framework.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Wiscr</c> objects in a <see cref="T:Ekip.Framework.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Wiscr</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Wiscr.
             <code><![CDATA[
             TList<Wiscr> list = new TList<Wiscr>();
             Wiscr entity = new Wiscr();
             entity.StringProperty = "foo";
             Wiscr entity2 = new Wiscr();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WiscrService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Delete(Ekip.Framework.Entities.WiscrKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _wiscrId
            </summary>
            <param name="_wiscrId">Wiscr pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.DeepLoadByWiscrId(System.Int32,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Ekip.Framework.Entities.Wiscr"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <param name="_wiscrId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Wiscr Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Ekip.Framework.Entities.Wiscr"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.DeepLoad(Ekip.Framework.Entities.Wiscr)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Wiscr Object</param>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.WiscrServiceBase.DeepLoad(Ekip.Framework.Entities.Wiscr)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.DeepLoad(Ekip.Framework.Entities.Wiscr,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.WiscrServiceBase.DeepLoad(Ekip.Framework.Entities.Wiscr)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Wiscr Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.DeepLoad(Ekip.Framework.Entities.Wiscr,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Ekip.Framework.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Ekip.Framework.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Ekip.Framework.Entities.Wiscr"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Wiscr Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wiscr})">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.WiscrServiceBase.DeepLoad(Ekip.Framework.Entities.Wiscr)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wiscr},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Ekip.Framework.Entities.TList`1" /> object.
            </summary>
            <remarks>
            <seealso cref="M:Ekip.Framework.Services.WiscrServiceBase.DeepLoad(Ekip.Framework.Entities.Wiscr)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Ekip.Framework.Entities.TList`1" /> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.DeepLoad(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wiscr},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Ekip.Framework.Entities.TList`1" /> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Ekip.Framework.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Ekip.Framework.Entities.Wiscr"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.DeepSave(Ekip.Framework.Entities.Wiscr)">
            <summary>
            public virtualDeep Saves the <see cref="T:Ekip.Framework.Entities.Wiscr"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Wiscr Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.DeepSave(Ekip.Framework.Entities.Wiscr,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Wiscr object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Wiscr Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Wiscr</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wiscr})">
            <summary>
            Deep Save the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Wiscr} Object</param>
        </member>
        <member name="M:Ekip.Framework.Services.WiscrServiceBase.DeepSave(Ekip.Framework.Entities.TList{Ekip.Framework.Entities.Wiscr},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Ekip.Framework.Entities.TList`1" /> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Wiscr Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="T:Ekip.Framework.Services.NeighborhoodViewService">
            <summary>
             An component type implementation of the 'NeighborhoodView' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewService.#ctor">
            <summary>
            Initializes a new instance of the NeighborhoodViewService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.NeighborhoodViewServiceBase">
            <summary>
             An object representation of the 'NeighborhoodView' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the NeighborhoodView.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.NeighborhoodView"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.NeighborhoodView"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.CreateNeighborhoodView(System.Int32,System.String,System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.NeighborhoodView"/> instance.
            </summary>
            <param name="_townId"></param>
            <param name="_townName"></param>
            <param name="_neighborhoodId"></param>
            <param name="_neighborhoodName"></param>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{NeighborhoodView} of <c>NeighborhoodView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.NeighborhoodView" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.NeighborhoodView" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NeighborhoodView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NeighborhoodView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NeighborhoodView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>NeighborhoodView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>NeighborhoodView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NeighborhoodView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.GetByNeighborhoodId(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'NeighborhoodView_GetByNeighborhoodId' stored procedure. 
            </summary>
            <param name="neighborhoodId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.GetByNeighborhoodId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            This method wrap the 'NeighborhoodView_GetByNeighborhoodId' stored procedure. 
            </summary>
            <param name="neighborhoodId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.GetByTownId(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'NeighborhoodView_GetByTownId' stored procedure. 
            </summary>
            <param name="townId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.NeighborhoodViewServiceBase.GetByTownId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            This method wrap the 'NeighborhoodView_GetByTownId' stored procedure. 
            </summary>
            <param name="townId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:Ekip.Framework.Services.ProvinceViewService">
            <summary>
             An component type implementation of the 'ProvinceView' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewService.#ctor">
            <summary>
            Initializes a new instance of the ProvinceViewService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ProvinceViewServiceBase">
            <summary>
             An object representation of the 'ProvinceView' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProvinceView.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.ProvinceView"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.ProvinceView"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewServiceBase.CreateProvinceView(System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.DateTime,System.TimeSpan,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.ProvinceView"/> instance.
            </summary>
            <param name="_ıd"></param>
            <param name="_rowNumber"></param>
            <param name="_adminId"></param>
            <param name="_objectId"></param>
            <param name="_parentId"></param>
            <param name="_plateCode"></param>
            <param name="_areaId"></param>
            <param name="_phoneCode"></param>
            <param name="_provinceName"></param>
            <param name="_longitude"></param>
            <param name="_latitude"></param>
            <param name="_type"></param>
            <param name="_createDate"></param>
            <param name="_createTime"></param>
            <param name="_updateDate"></param>
            <param name="_updateTime"></param>
            <param name="_createUserId"></param>
            <param name="_updateUserId"></param>
            <param name="_active"></param>
            <param name="_deleted"></param>
            <param name="_areaName"></param>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProvinceView} of <c>ProvinceView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.ProvinceView" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.ProvinceView" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProvinceView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProvinceView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProvinceView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProvinceView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProvinceView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ProvinceViewServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProvinceView</c> objects.</returns>
        </member>
        <member name="T:Ekip.Framework.Services.StreetViewService">
            <summary>
             An component type implementation of the 'StreetView' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewService.#ctor">
            <summary>
            Initializes a new instance of the StreetViewService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.StreetViewServiceBase">
            <summary>
             An object representation of the 'StreetView' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the StreetView.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.StreetView"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.StreetView"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.CreateStreetView(System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.StreetView"/> instance.
            </summary>
            <param name="_neighborhoodId"></param>
            <param name="_neighborhoodName"></param>
            <param name="_streetId"></param>
            <param name="_streetName"></param>
            <param name="_zipCode"></param>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{StreetView} of <c>StreetView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.StreetView" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.StreetView" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StreetView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StreetView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StreetView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>StreetView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>StreetView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>StreetView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.GetByNeighborhoodId(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'StreetView_GetByNeighborhoodId' stored procedure. 
            </summary>
            <param name="neighborhoodId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.GetByNeighborhoodId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            This method wrap the 'StreetView_GetByNeighborhoodId' stored procedure. 
            </summary>
            <param name="neighborhoodId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.GetByStreetId(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'StreetView_GetByStreetId' stored procedure. 
            </summary>
            <param name="streetId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.StreetViewServiceBase.GetByStreetId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            This method wrap the 'StreetView_GetByStreetId' stored procedure. 
            </summary>
            <param name="streetId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:Ekip.Framework.Services.TownViewService">
            <summary>
             An component type implementation of the 'TownView' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewService.#ctor">
            <summary>
            Initializes a new instance of the TownViewService class.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.TownViewServiceBase">
            <summary>
             An object representation of the 'TownView' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TownView.cs file instead.
             All custom implementations should be done in the <see cref="T:Ekip.Framework.Entities.TownView"/> class.
             </remarks>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Ekip.Framework.Entities.TownView"/> instance .
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.CreateTownView(System.Int32,System.String,System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Ekip.Framework.Entities.TownView"/> instance.
            </summary>
            <param name="_provinceId"></param>
            <param name="_provinceName"></param>
            <param name="_townId"></param>
            <param name="_townName"></param>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TownView} of <c>TownView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Ekip.Framework.Entities.TownView" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Ekip.Framework.Entities.TownView" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Ekip.Framework.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TownView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Ekip.Framework.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TownView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Ekip.Framework.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TownView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TownView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TownView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TownView</c> objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.GetByProvinceId(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'TownView_GetByProvinceId' stored procedure. 
            </summary>
            <param name="provinceId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.GetByProvinceId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            This method wrap the 'TownView_GetByProvinceId' stored procedure. 
            </summary>
            <param name="provinceId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.GetByTownId(System.Nullable{System.Int32})">
            <summary>
            This method wrap the 'TownView_GetByTownId' stored procedure. 
            </summary>
            <param name="townId"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.TownViewServiceBase.GetByTownId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            This method wrap the 'TownView_GetByTownId' stored procedure. 
            </summary>
            <param name="townId"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:Ekip.Framework.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:Ekip.Framework.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:Ekip.Framework.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Ekip.Framework.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="M:Ekip.Framework.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,Ekip.Framework.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:Ekip.Framework.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Ekip.Framework.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:Ekip.Framework.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:Ekip.Framework.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Ekip.Framework.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Ekip.Framework.Services.IProcessor.ChangeProcessorState(Ekip.Framework.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Ekip.Framework.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="M:Ekip.Framework.Services.IProcessorResult.AddBrokenRulesList(System.Type,Ekip.Framework.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Ekip.Framework.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:Ekip.Framework.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ProcessorBase.ChangeProcessorState(Ekip.Framework.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="E:Ekip.Framework.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ekip.Framework.Services.ProcessorBase.OnNotifyProcessorStateChanging(Ekip.Framework.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="T:Ekip.Framework.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SecurityContext`1.#ctor">
            <summary>
             Creates a new <see cref="T:System.Security.SecurityContext"/> instance.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.SecurityContextBase`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.SecurityContextBase`1.Identity">
            <summary>
            The Current IIdentity.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.SecurityContextBase`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.SecurityContextBase`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.SecurityContextBase`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SecurityContextBase`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.SecurityContextBase`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="P:Ekip.Framework.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:Ekip.Framework.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:Ekip.Framework.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="M:Ekip.Framework.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekip.Framework.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ContextView`2.#ctor(`0,Ekip.Framework.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ekip.Framework.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ContextView`2.#ctor(`0,Ekip.Framework.Services.SecurityContext{`0},Ekip.Framework.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Ekip.Framework.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="T:Ekip.Framework.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.DomainUtil.GetErrorsFromList``1(Ekip.Framework.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader" />, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:Ekip.Framework.Services.IConnectionScope">
            <summary>
            Connection Scope Interface
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.IConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>The connection string key.</value>
        </member>
        <member name="P:Ekip.Framework.Services.IConnectionScope.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:Ekip.Framework.Services.IConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the dynamic connection string.
            </summary>
            <value>The dynamic connection string.</value>
        </member>
        <member name="P:Ekip.Framework.Services.IConnectionScope.HasTransaction">
            <summary>
            Gets a value indicating whether this instance has transaction.
            </summary>
            <value>
            	<c>true</c> if this instance has transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ekip.Framework.Services.IConnectionScope.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:Ekip.Framework.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ConnectionScope.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:Ekip.Framework.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:Ekip.Framework.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ConnectionScope.Copy(Ekip.Framework.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:Ekip.Framework.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:Ekip.Framework.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <see cref="T:Ekip.Framework.Data.TransactionManager" /> if one exists,
            otherwise creates a new <see cref="T:Ekip.Framework.Data.TransactionManager" /> to use.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <see cref="T:Ekip.Framework.Data.TransactionManager" /> if one exists,
            otherwise creates a new <see cref="T:Ekip.Framework.Data.TransactionManager" /> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:Ekip.Framework.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <see cref="T:System.Data.IsolationLevel" />.
            </summary>
            <param name="level">Determines which <see cref="T:System.Data.IsolationLevel" /> to use for the transaction.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ConnectionScope.Complete">
            <summary>
            Completes this transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekip.Framework.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ConnectionScopeBase">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ConnectionScopeBase.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="F:Ekip.Framework.Services.ConnectionScopeBase.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ConnectionScopeBase.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="F:Ekip.Framework.Services.ConnectionScopeBase.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ConnectionScopeBase.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="F:Ekip.Framework.Services.ConnectionScopeBase.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ConnectionScopeBase.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="F:Ekip.Framework.Services.ConnectionScopeBase.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ConnectionScopeBase.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:Ekip.Framework.Services.ConnectionScopeBase.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:Ekip.Framework.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:Ekip.Framework.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.OnProcessStarting(Ekip.Framework.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.OnProcessEnded(Ekip.Framework.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="E:Ekip.Framework.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:Ekip.Framework.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             <remarks>
             If no AbortIfFailure parameter is passed then the process will not abort if there is a failure
             </remarks>
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Executes the processors in the processor list
             <remarks>
             If abortIfFailure is set to true then the execution will halt on the first failure
            </remarks>
             </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.BulkInsert(Ekip.Framework.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[],Ekip.Framework.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.DeepLoad(Ekip.Framework.Entities.TList{`0},System.Boolean,Ekip.Framework.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Ekip.Framework.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.DeepSave(`0,Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.DeepSave(`0,Ekip.Framework.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceBaseCore`2.DeepSave(Ekip.Framework.Entities.TList{`0},Ekip.Framework.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="T:Ekip.Framework.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Ekip.Framework.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Ekip.Framework.Services.ProcessorEventArgs">
            <summary>
            Processor Event Args
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ProcessorEventArgs.#ctor(Ekip.Framework.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:Ekip.Framework.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:Ekip.Framework.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Ekip.Framework.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Ekip.Framework.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:Ekip.Framework.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:Ekip.Framework.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:Ekip.Framework.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:Ekip.Framework.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:Ekip.Framework.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceViewBaseCore`1.OnProcessStarting(Ekip.Framework.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceViewBaseCore`1.OnProcessEnded(Ekip.Framework.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="E:Ekip.Framework.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:Ekip.Framework.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:Ekip.Framework.Services.ServiceViewBaseCore`1.Find(Ekip.Framework.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Ekip.Framework.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
    </members>
</doc>
