
/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 18 Aralık 2018 Salı
	Important: Do not modify this file. Edit the file Client.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Ekip.Framework.Entities.Validation;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'Client' table. [No description found the database]	
	///</summary>
	[DataContract]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ClientBase : EntityBase, IClient, IEntityId<ClientKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		[DataMember]
		private ClientEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		[DataMember]
		private ClientEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ClientEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		private TList<Client> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		public event ClientEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		public event ClientEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ClientBase"/> instance.
		///</summary>
		public ClientBase()
		{
			this.entityData = new ClientEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ClientBase"/> instance.
		///</summary>
		///<param name="_fileNumber"></param>
		///<param name="_firstContactDate"></param>
		///<param name="_fullName"></param>
		///<param name="_middleName"></param>
		///<param name="_reference"></param>
		///<param name="_motherId"></param>
		///<param name="_fatherId"></param>
		///<param name="_addressId"></param>
		///<param name="_ıdCard"></param>
		///<param name="_gender"></param>
		///<param name="_blood"></param>
		///<param name="_birthDate"></param>
		///<param name="_age"></param>
		///<param name="_pediatrician"></param>
		///<param name="_countOfChild"></param>
		///<param name="_familyStatus"></param>
		///<param name="_notes"></param>
		///<param name="_createOn"></param>
		///<param name="_updateOn"></param>
		///<param name="_userId"></param>
		public ClientBase(System.Int32 _fileNumber, System.DateTime? _firstContactDate, System.String _fullName, 
			System.String _middleName, System.String _reference, System.Int32? _motherId, System.Int32? _fatherId, 
			System.Int32? _addressId, System.String _ıdCard, System.Byte _gender, System.Byte _blood, System.DateTime? _birthDate, 
			System.Int32? _age, System.String _pediatrician, System.Int32 _countOfChild, System.Byte _familyStatus, 
			System.String _notes, System.DateTime _createOn, System.DateTime? _updateOn, System.Int32 _userId)
		{
			this.entityData = new ClientEntityData();
			this.backupData = null;

			this.FileNumber = _fileNumber;
			this.FirstContactDate = _firstContactDate;
			this.FullName = _fullName;
			this.MiddleName = _middleName;
			this.Reference = _reference;
			this.MotherId = _motherId;
			this.FatherId = _fatherId;
			this.AddressId = _addressId;
			this.IdCard = _ıdCard;
			this.Gender = _gender;
			this.Blood = _blood;
			this.BirthDate = _birthDate;
			this.Age = _age;
			this.Pediatrician = _pediatrician;
			this.CountOfChild = _countOfChild;
			this.FamilyStatus = _familyStatus;
			this.Notes = _notes;
			this.CreateOn = _createOn;
			this.UpdateOn = _updateOn;
			this.UserId = _userId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Client"/> instance.
		///</summary>
		///<param name="_fileNumber"></param>
		///<param name="_firstContactDate"></param>
		///<param name="_fullName"></param>
		///<param name="_middleName"></param>
		///<param name="_reference"></param>
		///<param name="_motherId"></param>
		///<param name="_fatherId"></param>
		///<param name="_addressId"></param>
		///<param name="_ıdCard"></param>
		///<param name="_gender"></param>
		///<param name="_blood"></param>
		///<param name="_birthDate"></param>
		///<param name="_age"></param>
		///<param name="_pediatrician"></param>
		///<param name="_countOfChild"></param>
		///<param name="_familyStatus"></param>
		///<param name="_notes"></param>
		///<param name="_createOn"></param>
		///<param name="_updateOn"></param>
		///<param name="_userId"></param>
		public static Client CreateClient(System.Int32 _fileNumber, System.DateTime? _firstContactDate, System.String _fullName, 
			System.String _middleName, System.String _reference, System.Int32? _motherId, System.Int32? _fatherId, 
			System.Int32? _addressId, System.String _ıdCard, System.Byte _gender, System.Byte _blood, System.DateTime? _birthDate, 
			System.Int32? _age, System.String _pediatrician, System.Int32 _countOfChild, System.Byte _familyStatus, 
			System.String _notes, System.DateTime _createOn, System.DateTime? _updateOn, System.Int32 _userId)
		{
			Client newClient = new Client();
			newClient.FileNumber = _fileNumber;
			newClient.FirstContactDate = _firstContactDate;
			newClient.FullName = _fullName;
			newClient.MiddleName = _middleName;
			newClient.Reference = _reference;
			newClient.MotherId = _motherId;
			newClient.FatherId = _fatherId;
			newClient.AddressId = _addressId;
			newClient.IdCard = _ıdCard;
			newClient.Gender = _gender;
			newClient.Blood = _blood;
			newClient.BirthDate = _birthDate;
			newClient.Age = _age;
			newClient.Pediatrician = _pediatrician;
			newClient.CountOfChild = _countOfChild;
			newClient.FamilyStatus = _familyStatus;
			newClient.Notes = _notes;
			newClient.CreateOn = _createOn;
			newClient.UpdateOn = _updateOn;
			newClient.UserId = _userId;
			return newClient;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ClientId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ClientId
		{
			get
			{
				return this.entityData.ClientId; 
			}
			
			set
			{
				if (this.entityData.ClientId == value)
					return;
				
                OnPropertyChanging("ClientId");                    
				OnColumnChanging(ClientColumn.ClientId, this.entityData.ClientId);
				this.entityData.ClientId = value;
				this.EntityId.ClientId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.ClientId, this.entityData.ClientId);
				OnPropertyChanged("ClientId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FileNumber property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 FileNumber
		{
			get
			{
				return this.entityData.FileNumber; 
			}
			
			set
			{
				if (this.entityData.FileNumber == value)
					return;
				
                OnPropertyChanging("FileNumber");                    
				OnColumnChanging(ClientColumn.FileNumber, this.entityData.FileNumber);
				this.entityData.FileNumber = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.FileNumber, this.entityData.FileNumber);
				OnPropertyChanged("FileNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstContactDate property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FirstContactDate
		{
			get
			{
				return this.entityData.FirstContactDate; 
			}
			
			set
			{
				if (this.entityData.FirstContactDate == value)
					return;
				
                OnPropertyChanging("FirstContactDate");                    
				OnColumnChanging(ClientColumn.FirstContactDate, this.entityData.FirstContactDate);
				this.entityData.FirstContactDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.FirstContactDate, this.entityData.FirstContactDate);
				OnPropertyChanged("FirstContactDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FullName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String FullName
		{
			get
			{
				return this.entityData.FullName; 
			}
			
			set
			{
				if (this.entityData.FullName == value)
					return;
				
                OnPropertyChanging("FullName");                    
				OnColumnChanging(ClientColumn.FullName, this.entityData.FullName);
				this.entityData.FullName = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.FullName, this.entityData.FullName);
				OnPropertyChanged("FullName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MiddleName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String MiddleName
		{
			get
			{
				return this.entityData.MiddleName; 
			}
			
			set
			{
				if (this.entityData.MiddleName == value)
					return;
				
                OnPropertyChanging("MiddleName");                    
				OnColumnChanging(ClientColumn.MiddleName, this.entityData.MiddleName);
				this.entityData.MiddleName = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.MiddleName, this.entityData.MiddleName);
				OnPropertyChanged("MiddleName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Reference property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Reference
		{
			get
			{
				return this.entityData.Reference; 
			}
			
			set
			{
				if (this.entityData.Reference == value)
					return;
				
                OnPropertyChanging("Reference");                    
				OnColumnChanging(ClientColumn.Reference, this.entityData.Reference);
				this.entityData.Reference = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.Reference, this.entityData.Reference);
				OnPropertyChanged("Reference");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MotherId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MotherId
		{
			get
			{
				return this.entityData.MotherId; 
			}
			
			set
			{
				if (this.entityData.MotherId == value)
					return;
				
                OnPropertyChanging("MotherId");                    
				OnColumnChanging(ClientColumn.MotherId, this.entityData.MotherId);
				this.entityData.MotherId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.MotherId, this.entityData.MotherId);
				OnPropertyChanged("MotherId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FatherId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FatherId
		{
			get
			{
				return this.entityData.FatherId; 
			}
			
			set
			{
				if (this.entityData.FatherId == value)
					return;
				
                OnPropertyChanging("FatherId");                    
				OnColumnChanging(ClientColumn.FatherId, this.entityData.FatherId);
				this.entityData.FatherId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.FatherId, this.entityData.FatherId);
				OnPropertyChanged("FatherId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddressId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AddressId
		{
			get
			{
				return this.entityData.AddressId; 
			}
			
			set
			{
				if (this.entityData.AddressId == value)
					return;
				
                OnPropertyChanging("AddressId");                    
				OnColumnChanging(ClientColumn.AddressId, this.entityData.AddressId);
				this.entityData.AddressId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.AddressId, this.entityData.AddressId);
				OnPropertyChanged("AddressId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdCard property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 11)]
		public virtual System.String IdCard
		{
			get
			{
				return this.entityData.IdCard; 
			}
			
			set
			{
				if (this.entityData.IdCard == value)
					return;
				
                OnPropertyChanging("IdCard");                    
				OnColumnChanging(ClientColumn.IdCard, this.entityData.IdCard);
				this.entityData.IdCard = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.IdCard, this.entityData.IdCard);
				OnPropertyChanged("IdCard");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Gender property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte Gender
		{
			get
			{
				return this.entityData.Gender; 
			}
			
			set
			{
				if (this.entityData.Gender == value)
					return;
				
                OnPropertyChanging("Gender");                    
				OnColumnChanging(ClientColumn.Gender, this.entityData.Gender);
				this.entityData.Gender = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.Gender, this.entityData.Gender);
				OnPropertyChanged("Gender");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Blood property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte Blood
		{
			get
			{
				return this.entityData.Blood; 
			}
			
			set
			{
				if (this.entityData.Blood == value)
					return;
				
                OnPropertyChanging("Blood");                    
				OnColumnChanging(ClientColumn.Blood, this.entityData.Blood);
				this.entityData.Blood = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.Blood, this.entityData.Blood);
				OnPropertyChanged("Blood");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BirthDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? BirthDate
		{
			get
			{
				return this.entityData.BirthDate; 
			}
			
			set
			{
				if (this.entityData.BirthDate == value)
					return;
				
                OnPropertyChanging("BirthDate");                    
				OnColumnChanging(ClientColumn.BirthDate, this.entityData.BirthDate);
				this.entityData.BirthDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.BirthDate, this.entityData.BirthDate);
				OnPropertyChanged("BirthDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Age property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Age
		{
			get
			{
				return this.entityData.Age; 
			}
			
			set
			{
				if (this.entityData.Age == value)
					return;
				
                OnPropertyChanging("Age");                    
				OnColumnChanging(ClientColumn.Age, this.entityData.Age);
				this.entityData.Age = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.Age, this.entityData.Age);
				OnPropertyChanged("Age");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Pediatrician property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Pediatrician
		{
			get
			{
				return this.entityData.Pediatrician; 
			}
			
			set
			{
				if (this.entityData.Pediatrician == value)
					return;
				
                OnPropertyChanging("Pediatrician");                    
				OnColumnChanging(ClientColumn.Pediatrician, this.entityData.Pediatrician);
				this.entityData.Pediatrician = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.Pediatrician, this.entityData.Pediatrician);
				OnPropertyChanged("Pediatrician");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CountOfChild property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CountOfChild
		{
			get
			{
				return this.entityData.CountOfChild; 
			}
			
			set
			{
				if (this.entityData.CountOfChild == value)
					return;
				
                OnPropertyChanging("CountOfChild");                    
				OnColumnChanging(ClientColumn.CountOfChild, this.entityData.CountOfChild);
				this.entityData.CountOfChild = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.CountOfChild, this.entityData.CountOfChild);
				OnPropertyChanged("CountOfChild");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FamilyStatus property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte FamilyStatus
		{
			get
			{
				return this.entityData.FamilyStatus; 
			}
			
			set
			{
				if (this.entityData.FamilyStatus == value)
					return;
				
                OnPropertyChanging("FamilyStatus");                    
				OnColumnChanging(ClientColumn.FamilyStatus, this.entityData.FamilyStatus);
				this.entityData.FamilyStatus = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.FamilyStatus, this.entityData.FamilyStatus);
				OnPropertyChanged("FamilyStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
				
                OnPropertyChanging("Notes");                    
				OnColumnChanging(ClientColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateOn property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateOn
		{
			get
			{
				return this.entityData.CreateOn; 
			}
			
			set
			{
				if (this.entityData.CreateOn == value)
					return;
				
                OnPropertyChanging("CreateOn");                    
				OnColumnChanging(ClientColumn.CreateOn, this.entityData.CreateOn);
				this.entityData.CreateOn = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.CreateOn, this.entityData.CreateOn);
				OnPropertyChanged("CreateOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateOn property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateOn
		{
			get
			{
				return this.entityData.UpdateOn; 
			}
			
			set
			{
				if (this.entityData.UpdateOn == value)
					return;
				
                OnPropertyChanging("UpdateOn");                    
				OnColumnChanging(ClientColumn.UpdateOn, this.entityData.UpdateOn);
				this.entityData.UpdateOn = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.UpdateOn, this.entityData.UpdateOn);
				OnPropertyChanged("UpdateOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
				
                OnPropertyChanging("UserId");                    
				OnColumnChanging(ClientColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="ClientAddress"/>.
		/// </summary>
		/// <value>The source ClientAddress for AddressId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ClientAddress AddressIdSource
      	{
            get { return entityData.AddressIdSource; }
            set { entityData.AddressIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ClientFather"/>.
		/// </summary>
		/// <value>The source ClientFather for FatherId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ClientFather FatherIdSource
      	{
            get { return entityData.FatherIdSource; }
            set { entityData.FatherIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ClientMother"/>.
		/// </summary>
		/// <value>The source ClientMother for MotherId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ClientMother MotherIdSource
      	{
            get { return entityData.MotherIdSource; }
            set { entityData.MotherIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ObservationFormAnswer objects
		///	which are related to this object through the relation FK_ObservationForm_Answer_Client
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ObservationFormAnswer> ObservationFormAnswerCollection
		{
			get { return entityData.ObservationFormAnswerCollection; }
			set { entityData.ObservationFormAnswerCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Sibling objects
		///	which are related to this object through the relation FK_Sibling_Client
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Sibling> SiblingCollection
		{
			get { return entityData.SiblingCollection; }
			set { entityData.SiblingCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Seance objects
		///	which are related to this object through the relation FK_Seance_Client
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Seance> SeanceCollection
		{
			get { return entityData.SeanceCollection; }
			set { entityData.SeanceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of QuestionFormAnswer objects
		///	which are related to this object through the relation FK_QuestionForm_Answer_Client
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<QuestionFormAnswer> QuestionFormAnswerCollection
		{
			get { return entityData.QuestionFormAnswerCollection; }
			set { entityData.QuestionFormAnswerCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeanceQuestionAnswer objects
		///	which are related to this object through the relation FK_SeanceQuestion_Answer_Client
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeanceQuestionAnswer> SeanceQuestionAnswerCollection
		{
			get { return entityData.SeanceQuestionAnswerCollection; }
			set { entityData.SeanceQuestionAnswerCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ClientSchool objects
		///	which are related to this object through the relation FK_ClientSchool_Client
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ClientSchool> ClientSchoolCollection
		{
			get { return entityData.ClientSchoolCollection; }
			set { entityData.ClientSchoolCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FullName", "Full Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FullName", "Full Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MiddleName", "Middle Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Reference", "Reference", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("IdCard", "Id Card", 11));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Pediatrician", "Pediatrician", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Client"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ClientId", "FileNumber", "FirstContactDate", "FullName", "MiddleName", "Reference", "MotherId", "FatherId", "AddressId", "IdCard", "Gender", "Blood", "BirthDate", "Age", "Pediatrician", "CountOfChild", "FamilyStatus", "Notes", "CreateOn", "UpdateOn", "UserId"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ClientEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Client) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Client>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Client);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Client Entity 
		///</summary>
		protected virtual Client Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Client copy = new Client();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ClientId = this.ClientId;
				copy.FileNumber = this.FileNumber;
				copy.FirstContactDate = this.FirstContactDate;
				copy.FullName = this.FullName;
				copy.MiddleName = this.MiddleName;
				copy.Reference = this.Reference;
				copy.MotherId = this.MotherId;
				copy.FatherId = this.FatherId;
				copy.AddressId = this.AddressId;
				copy.IdCard = this.IdCard;
				copy.Gender = this.Gender;
				copy.Blood = this.Blood;
				copy.BirthDate = this.BirthDate;
				copy.Age = this.Age;
				copy.Pediatrician = this.Pediatrician;
				copy.CountOfChild = this.CountOfChild;
				copy.FamilyStatus = this.FamilyStatus;
				copy.Notes = this.Notes;
				copy.CreateOn = this.CreateOn;
				copy.UpdateOn = this.UpdateOn;
				copy.UserId = this.UserId;
			
			if (this.AddressIdSource != null && existingCopies.Contains(this.AddressIdSource))
				copy.AddressIdSource = existingCopies[this.AddressIdSource] as ClientAddress;
			else
				copy.AddressIdSource = MakeCopyOf(this.AddressIdSource, existingCopies) as ClientAddress;
			if (this.FatherIdSource != null && existingCopies.Contains(this.FatherIdSource))
				copy.FatherIdSource = existingCopies[this.FatherIdSource] as ClientFather;
			else
				copy.FatherIdSource = MakeCopyOf(this.FatherIdSource, existingCopies) as ClientFather;
			if (this.MotherIdSource != null && existingCopies.Contains(this.MotherIdSource))
				copy.MotherIdSource = existingCopies[this.MotherIdSource] as ClientMother;
			else
				copy.MotherIdSource = MakeCopyOf(this.MotherIdSource, existingCopies) as ClientMother;
		
			//deep copy nested objects
			copy.ObservationFormAnswerCollection = (TList<ObservationFormAnswer>) MakeCopyOf(this.ObservationFormAnswerCollection, existingCopies); 
			copy.SiblingCollection = (TList<Sibling>) MakeCopyOf(this.SiblingCollection, existingCopies); 
			copy.SeanceCollection = (TList<Seance>) MakeCopyOf(this.SeanceCollection, existingCopies); 
			copy.QuestionFormAnswerCollection = (TList<QuestionFormAnswer>) MakeCopyOf(this.QuestionFormAnswerCollection, existingCopies); 
			copy.SeanceQuestionAnswerCollection = (TList<SeanceQuestionAnswer>) MakeCopyOf(this.SeanceQuestionAnswerCollection, existingCopies); 
			copy.ClientSchoolCollection = (TList<ClientSchool>) MakeCopyOf(this.ClientSchoolCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Client Entity 
		///</summary>
		public virtual Client Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Client Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Client DeepCopy()
		{
			return EntityHelper.Clone<Client>(this as Client);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ClientEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ClientEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ClientEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ClientColumn column)
		{
			switch(column)
			{
					case ClientColumn.ClientId:
					return entityData.ClientId != _originalData.ClientId;
					case ClientColumn.FileNumber:
					return entityData.FileNumber != _originalData.FileNumber;
					case ClientColumn.FirstContactDate:
					return entityData.FirstContactDate != _originalData.FirstContactDate;
					case ClientColumn.FullName:
					return entityData.FullName != _originalData.FullName;
					case ClientColumn.MiddleName:
					return entityData.MiddleName != _originalData.MiddleName;
					case ClientColumn.Reference:
					return entityData.Reference != _originalData.Reference;
					case ClientColumn.MotherId:
					return entityData.MotherId != _originalData.MotherId;
					case ClientColumn.FatherId:
					return entityData.FatherId != _originalData.FatherId;
					case ClientColumn.AddressId:
					return entityData.AddressId != _originalData.AddressId;
					case ClientColumn.IdCard:
					return entityData.IdCard != _originalData.IdCard;
					case ClientColumn.Gender:
					return entityData.Gender != _originalData.Gender;
					case ClientColumn.Blood:
					return entityData.Blood != _originalData.Blood;
					case ClientColumn.BirthDate:
					return entityData.BirthDate != _originalData.BirthDate;
					case ClientColumn.Age:
					return entityData.Age != _originalData.Age;
					case ClientColumn.Pediatrician:
					return entityData.Pediatrician != _originalData.Pediatrician;
					case ClientColumn.CountOfChild:
					return entityData.CountOfChild != _originalData.CountOfChild;
					case ClientColumn.FamilyStatus:
					return entityData.FamilyStatus != _originalData.FamilyStatus;
					case ClientColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case ClientColumn.CreateOn:
					return entityData.CreateOn != _originalData.CreateOn;
					case ClientColumn.UpdateOn:
					return entityData.UpdateOn != _originalData.UpdateOn;
					case ClientColumn.UserId:
					return entityData.UserId != _originalData.UserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ClientColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ClientId != _originalData.ClientId;
			result = result || entityData.FileNumber != _originalData.FileNumber;
			result = result || entityData.FirstContactDate != _originalData.FirstContactDate;
			result = result || entityData.FullName != _originalData.FullName;
			result = result || entityData.MiddleName != _originalData.MiddleName;
			result = result || entityData.Reference != _originalData.Reference;
			result = result || entityData.MotherId != _originalData.MotherId;
			result = result || entityData.FatherId != _originalData.FatherId;
			result = result || entityData.AddressId != _originalData.AddressId;
			result = result || entityData.IdCard != _originalData.IdCard;
			result = result || entityData.Gender != _originalData.Gender;
			result = result || entityData.Blood != _originalData.Blood;
			result = result || entityData.BirthDate != _originalData.BirthDate;
			result = result || entityData.Age != _originalData.Age;
			result = result || entityData.Pediatrician != _originalData.Pediatrician;
			result = result || entityData.CountOfChild != _originalData.CountOfChild;
			result = result || entityData.FamilyStatus != _originalData.FamilyStatus;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.CreateOn != _originalData.CreateOn;
			result = result || entityData.UpdateOn != _originalData.UpdateOn;
			result = result || entityData.UserId != _originalData.UserId;
			return result;
		}	
		
		///<summary>
		///  Returns a Client Entity with the original data.
		///</summary>
		public Client GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateClient(
				_originalData.FileNumber,
				_originalData.FirstContactDate,
				_originalData.FullName,
				_originalData.MiddleName,
				_originalData.Reference,
				_originalData.MotherId,
				_originalData.FatherId,
				_originalData.AddressId,
				_originalData.IdCard,
				_originalData.Gender,
				_originalData.Blood,
				_originalData.BirthDate,
				_originalData.Age,
				_originalData.Pediatrician,
				_originalData.CountOfChild,
				_originalData.FamilyStatus,
				_originalData.Notes,
				_originalData.CreateOn,
				_originalData.UpdateOn,
				_originalData.UserId
				);
				
			return (Client)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ClientBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ClientBase)
				return ValueEquals(this, (ClientBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ClientBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ClientId.GetHashCode() ^ 
					this.FileNumber.GetHashCode() ^ 
					((this.FirstContactDate == null) ? string.Empty : this.FirstContactDate.ToString()).GetHashCode() ^ 
					this.FullName.GetHashCode() ^ 
					((this.MiddleName == null) ? string.Empty : this.MiddleName.ToString()).GetHashCode() ^ 
					((this.Reference == null) ? string.Empty : this.Reference.ToString()).GetHashCode() ^ 
					((this.MotherId == null) ? string.Empty : this.MotherId.ToString()).GetHashCode() ^ 
					((this.FatherId == null) ? string.Empty : this.FatherId.ToString()).GetHashCode() ^ 
					((this.AddressId == null) ? string.Empty : this.AddressId.ToString()).GetHashCode() ^ 
					((this.IdCard == null) ? string.Empty : this.IdCard.ToString()).GetHashCode() ^ 
					this.Gender.GetHashCode() ^ 
					this.Blood.GetHashCode() ^ 
					((this.BirthDate == null) ? string.Empty : this.BirthDate.ToString()).GetHashCode() ^ 
					((this.Age == null) ? string.Empty : this.Age.ToString()).GetHashCode() ^ 
					((this.Pediatrician == null) ? string.Empty : this.Pediatrician.ToString()).GetHashCode() ^ 
					this.CountOfChild.GetHashCode() ^ 
					this.FamilyStatus.GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					this.CreateOn.GetHashCode() ^ 
					((this.UpdateOn == null) ? string.Empty : this.UpdateOn.ToString()).GetHashCode() ^ 
					this.UserId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ClientBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ClientBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ClientBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ClientBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ClientBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ClientBase Object1, ClientBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ClientId != Object2.ClientId)
				equal = false;
			if (Object1.FileNumber != Object2.FileNumber)
				equal = false;
			if ( Object1.FirstContactDate != null && Object2.FirstContactDate != null )
			{
				if (Object1.FirstContactDate != Object2.FirstContactDate)
					equal = false;
			}
			else if (Object1.FirstContactDate == null ^ Object2.FirstContactDate == null )
			{
				equal = false;
			}
			if (Object1.FullName != Object2.FullName)
				equal = false;
			if ( Object1.MiddleName != null && Object2.MiddleName != null )
			{
				if (Object1.MiddleName != Object2.MiddleName)
					equal = false;
			}
			else if (Object1.MiddleName == null ^ Object2.MiddleName == null )
			{
				equal = false;
			}
			if ( Object1.Reference != null && Object2.Reference != null )
			{
				if (Object1.Reference != Object2.Reference)
					equal = false;
			}
			else if (Object1.Reference == null ^ Object2.Reference == null )
			{
				equal = false;
			}
			if ( Object1.MotherId != null && Object2.MotherId != null )
			{
				if (Object1.MotherId != Object2.MotherId)
					equal = false;
			}
			else if (Object1.MotherId == null ^ Object2.MotherId == null )
			{
				equal = false;
			}
			if ( Object1.FatherId != null && Object2.FatherId != null )
			{
				if (Object1.FatherId != Object2.FatherId)
					equal = false;
			}
			else if (Object1.FatherId == null ^ Object2.FatherId == null )
			{
				equal = false;
			}
			if ( Object1.AddressId != null && Object2.AddressId != null )
			{
				if (Object1.AddressId != Object2.AddressId)
					equal = false;
			}
			else if (Object1.AddressId == null ^ Object2.AddressId == null )
			{
				equal = false;
			}
			if ( Object1.IdCard != null && Object2.IdCard != null )
			{
				if (Object1.IdCard != Object2.IdCard)
					equal = false;
			}
			else if (Object1.IdCard == null ^ Object2.IdCard == null )
			{
				equal = false;
			}
			if (Object1.Gender != Object2.Gender)
				equal = false;
			if (Object1.Blood != Object2.Blood)
				equal = false;
			if ( Object1.BirthDate != null && Object2.BirthDate != null )
			{
				if (Object1.BirthDate != Object2.BirthDate)
					equal = false;
			}
			else if (Object1.BirthDate == null ^ Object2.BirthDate == null )
			{
				equal = false;
			}
			if ( Object1.Age != null && Object2.Age != null )
			{
				if (Object1.Age != Object2.Age)
					equal = false;
			}
			else if (Object1.Age == null ^ Object2.Age == null )
			{
				equal = false;
			}
			if ( Object1.Pediatrician != null && Object2.Pediatrician != null )
			{
				if (Object1.Pediatrician != Object2.Pediatrician)
					equal = false;
			}
			else if (Object1.Pediatrician == null ^ Object2.Pediatrician == null )
			{
				equal = false;
			}
			if (Object1.CountOfChild != Object2.CountOfChild)
				equal = false;
			if (Object1.FamilyStatus != Object2.FamilyStatus)
				equal = false;
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if (Object1.CreateOn != Object2.CreateOn)
				equal = false;
			if ( Object1.UpdateOn != null && Object2.UpdateOn != null )
			{
				if (Object1.UpdateOn != Object2.UpdateOn)
					equal = false;
			}
			else if (Object1.UpdateOn == null ^ Object2.UpdateOn == null )
			{
				equal = false;
			}
			if (Object1.UserId != Object2.UserId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ClientBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ClientComparer GetComparer()
        {
            return new ClientComparer();
        }
        */

        // Comparer delegates back to Client
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Client rhs, ClientColumn which)
        {
            switch (which)
            {
            	
            	
            	case ClientColumn.ClientId:
            		return this.ClientId.CompareTo(rhs.ClientId);
            		
            		                 
            	
            	
            	case ClientColumn.FileNumber:
            		return this.FileNumber.CompareTo(rhs.FileNumber);
            		
            		                 
            	
            	
            	case ClientColumn.FirstContactDate:
            		return this.FirstContactDate.Value.CompareTo(rhs.FirstContactDate.Value);
            		
            		                 
            	
            	
            	case ClientColumn.FullName:
            		return this.FullName.CompareTo(rhs.FullName);
            		
            		                 
            	
            	
            	case ClientColumn.MiddleName:
            		return this.MiddleName.CompareTo(rhs.MiddleName);
            		
            		                 
            	
            	
            	case ClientColumn.Reference:
            		return this.Reference.CompareTo(rhs.Reference);
            		
            		                 
            	
            	
            	case ClientColumn.MotherId:
            		return this.MotherId.Value.CompareTo(rhs.MotherId.Value);
            		
            		                 
            	
            	
            	case ClientColumn.FatherId:
            		return this.FatherId.Value.CompareTo(rhs.FatherId.Value);
            		
            		                 
            	
            	
            	case ClientColumn.AddressId:
            		return this.AddressId.Value.CompareTo(rhs.AddressId.Value);
            		
            		                 
            	
            	
            	case ClientColumn.IdCard:
            		return this.IdCard.CompareTo(rhs.IdCard);
            		
            		                 
            	
            	
            	case ClientColumn.Gender:
            		return this.Gender.CompareTo(rhs.Gender);
            		
            		                 
            	
            	
            	case ClientColumn.Blood:
            		return this.Blood.CompareTo(rhs.Blood);
            		
            		                 
            	
            	
            	case ClientColumn.BirthDate:
            		return this.BirthDate.Value.CompareTo(rhs.BirthDate.Value);
            		
            		                 
            	
            	
            	case ClientColumn.Age:
            		return this.Age.Value.CompareTo(rhs.Age.Value);
            		
            		                 
            	
            	
            	case ClientColumn.Pediatrician:
            		return this.Pediatrician.CompareTo(rhs.Pediatrician);
            		
            		                 
            	
            	
            	case ClientColumn.CountOfChild:
            		return this.CountOfChild.CompareTo(rhs.CountOfChild);
            		
            		                 
            	
            	
            	case ClientColumn.FamilyStatus:
            		return this.FamilyStatus.CompareTo(rhs.FamilyStatus);
            		
            		                 
            	
            	
            	case ClientColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case ClientColumn.CreateOn:
            		return this.CreateOn.CompareTo(rhs.CreateOn);
            		
            		                 
            	
            	
            	case ClientColumn.UpdateOn:
            		return this.UpdateOn.Value.CompareTo(rhs.UpdateOn.Value);
            		
            		                 
            	
            	
            	case ClientColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ClientKey> Members
		
		// member variable for the EntityId property
		private ClientKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ClientKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ClientKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Client")
					.Append("|").Append( this.ClientId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{22}{21}- ClientId: {0}{21}- FileNumber: {1}{21}- FirstContactDate: {2}{21}- FullName: {3}{21}- MiddleName: {4}{21}- Reference: {5}{21}- MotherId: {6}{21}- FatherId: {7}{21}- AddressId: {8}{21}- IdCard: {9}{21}- Gender: {10}{21}- Blood: {11}{21}- BirthDate: {12}{21}- Age: {13}{21}- Pediatrician: {14}{21}- CountOfChild: {15}{21}- FamilyStatus: {16}{21}- Notes: {17}{21}- CreateOn: {18}{21}- UpdateOn: {19}{21}- UserId: {20}{21}{23}", 
				this.ClientId,
				this.FileNumber,
				(this.FirstContactDate == null) ? string.Empty : this.FirstContactDate.ToString(),
				this.FullName,
				(this.MiddleName == null) ? string.Empty : this.MiddleName.ToString(),
				(this.Reference == null) ? string.Empty : this.Reference.ToString(),
				(this.MotherId == null) ? string.Empty : this.MotherId.ToString(),
				(this.FatherId == null) ? string.Empty : this.FatherId.ToString(),
				(this.AddressId == null) ? string.Empty : this.AddressId.ToString(),
				(this.IdCard == null) ? string.Empty : this.IdCard.ToString(),
				this.Gender,
				this.Blood,
				(this.BirthDate == null) ? string.Empty : this.BirthDate.ToString(),
				(this.Age == null) ? string.Empty : this.Age.ToString(),
				(this.Pediatrician == null) ? string.Empty : this.Pediatrician.ToString(),
				this.CountOfChild,
				this.FamilyStatus,
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				this.CreateOn,
				(this.UpdateOn == null) ? string.Empty : this.UpdateOn.ToString(),
				this.UserId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Client' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	internal protected class ClientEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ClientId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Client"</remarks>
		[DataMember]
		public System.Int32 ClientId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// FileNumber : 
		/// </summary>
		[DataMember]
		public System.Int32 FileNumber = (int)0;
		
		/// <summary>
		/// FirstContactDate : 
		/// </summary>
		[DataMember]
		public System.DateTime? FirstContactDate = null;
		
		/// <summary>
		/// FullName : 
		/// </summary>
		[DataMember]
		public System.String FullName = string.Empty;
		
		/// <summary>
		/// MiddleName : 
		/// </summary>
		[DataMember]
		public System.String MiddleName = null;
		
		/// <summary>
		/// Reference : 
		/// </summary>
		[DataMember]
		public System.String Reference = null;
		
		/// <summary>
		/// MotherId : 
		/// </summary>
		[DataMember]
		public System.Int32? MotherId = null;
		
		/// <summary>
		/// FatherId : 
		/// </summary>
		[DataMember]
		public System.Int32? FatherId = null;
		
		/// <summary>
		/// AddressId : 
		/// </summary>
		[DataMember]
		public System.Int32? AddressId = null;
		
		/// <summary>
		/// IdCard : 
		/// </summary>
		[DataMember]
		public System.String IdCard = null;
		
		/// <summary>
		/// Gender : 
		/// </summary>
		[DataMember]
		public System.Byte Gender = (byte)0;
		
		/// <summary>
		/// Blood : 
		/// </summary>
		[DataMember]
		public System.Byte Blood = (byte)0;
		
		/// <summary>
		/// BirthDate : 
		/// </summary>
		[DataMember]
		public System.DateTime? BirthDate = null;
		
		/// <summary>
		/// Age : 
		/// </summary>
		[DataMember]
		public System.Int32? Age = null;
		
		/// <summary>
		/// Pediatrician : 
		/// </summary>
		[DataMember]
		public System.String Pediatrician = null;
		
		/// <summary>
		/// CountOfChild : 
		/// </summary>
		[DataMember]
		public System.Int32 CountOfChild = (int)1;
		
		/// <summary>
		/// FamilyStatus : 
		/// </summary>
		[DataMember]
		public System.Byte FamilyStatus = (byte)0;
		
		/// <summary>
		/// Notes : 
		/// </summary>
		[DataMember]
		public System.String Notes = null;
		
		/// <summary>
		/// CreateOn : 
		/// </summary>
		[DataMember]
		public System.DateTime CreateOn = DateTime.Now;
		
		/// <summary>
		/// UpdateOn : 
		/// </summary>
		[DataMember]
		public System.DateTime? UpdateOn = null;
		
		/// <summary>
		/// UserId : 
		/// </summary>
		[DataMember]
		public System.Int32 UserId = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		private ClientAddress _addressIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ClientAddress"/>.
		/// </summary>
		/// <value>The source ClientAddress for AddressId.</value>
		[DataMember]
		[Browsable(false)]
		public virtual ClientAddress AddressIdSource
      	{
            get { return this._addressIdSource; }
            set { this._addressIdSource = value; }
      	}
		private ClientFather _fatherIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ClientFather"/>.
		/// </summary>
		/// <value>The source ClientFather for FatherId.</value>
		[DataMember]
		[Browsable(false)]
		public virtual ClientFather FatherIdSource
      	{
            get { return this._fatherIdSource; }
            set { this._fatherIdSource = value; }
      	}
		private ClientMother _motherIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ClientMother"/>.
		/// </summary>
		/// <value>The source ClientMother for MotherId.</value>
		[DataMember]
		[Browsable(false)]
		public virtual ClientMother MotherIdSource
      	{
            get { return this._motherIdSource; }
            set { this._motherIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region ObservationFormAnswerCollection
		
		private TList<ObservationFormAnswer> _observationFormAnswerClientId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _observationFormAnswerClientId
		/// </summary>
		[DataMember]
		public TList<ObservationFormAnswer> ObservationFormAnswerCollection
		{
			get
			{
				if (_observationFormAnswerClientId == null)
				{
				_observationFormAnswerClientId = new TList<ObservationFormAnswer>();
				}
	
				return _observationFormAnswerClientId;
			}
			set { _observationFormAnswerClientId = value; }
		}
		
		#endregion

		#region SiblingCollection
		
		private TList<Sibling> _siblingClientId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siblingClientId
		/// </summary>
		[DataMember]
		public TList<Sibling> SiblingCollection
		{
			get
			{
				if (_siblingClientId == null)
				{
				_siblingClientId = new TList<Sibling>();
				}
	
				return _siblingClientId;
			}
			set { _siblingClientId = value; }
		}
		
		#endregion

		#region SeanceCollection
		
		private TList<Seance> _seanceClientId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seanceClientId
		/// </summary>
		[DataMember]
		public TList<Seance> SeanceCollection
		{
			get
			{
				if (_seanceClientId == null)
				{
				_seanceClientId = new TList<Seance>();
				}
	
				return _seanceClientId;
			}
			set { _seanceClientId = value; }
		}
		
		#endregion

		#region QuestionFormAnswerCollection
		
		private TList<QuestionFormAnswer> _questionFormAnswerClientId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _questionFormAnswerClientId
		/// </summary>
		[DataMember]
		public TList<QuestionFormAnswer> QuestionFormAnswerCollection
		{
			get
			{
				if (_questionFormAnswerClientId == null)
				{
				_questionFormAnswerClientId = new TList<QuestionFormAnswer>();
				}
	
				return _questionFormAnswerClientId;
			}
			set { _questionFormAnswerClientId = value; }
		}
		
		#endregion

		#region SeanceQuestionAnswerCollection
		
		private TList<SeanceQuestionAnswer> _seanceQuestionAnswerClientId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seanceQuestionAnswerClientId
		/// </summary>
		[DataMember]
		public TList<SeanceQuestionAnswer> SeanceQuestionAnswerCollection
		{
			get
			{
				if (_seanceQuestionAnswerClientId == null)
				{
				_seanceQuestionAnswerClientId = new TList<SeanceQuestionAnswer>();
				}
	
				return _seanceQuestionAnswerClientId;
			}
			set { _seanceQuestionAnswerClientId = value; }
		}
		
		#endregion

		#region ClientSchoolCollection
		
		private TList<ClientSchool> _clientSchoolClientId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _clientSchoolClientId
		/// </summary>
		[DataMember]
		public TList<ClientSchool> ClientSchoolCollection
		{
			get
			{
				if (_clientSchoolClientId == null)
				{
				_clientSchoolClientId = new TList<ClientSchool>();
				}
	
				return _clientSchoolClientId;
			}
			set { _clientSchoolClientId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ClientEntityData _tmp = new ClientEntityData();
						
			_tmp.ClientId = this.ClientId;
			
			_tmp.FileNumber = this.FileNumber;
			_tmp.FirstContactDate = this.FirstContactDate;
			_tmp.FullName = this.FullName;
			_tmp.MiddleName = this.MiddleName;
			_tmp.Reference = this.Reference;
			_tmp.MotherId = this.MotherId;
			_tmp.FatherId = this.FatherId;
			_tmp.AddressId = this.AddressId;
			_tmp.IdCard = this.IdCard;
			_tmp.Gender = this.Gender;
			_tmp.Blood = this.Blood;
			_tmp.BirthDate = this.BirthDate;
			_tmp.Age = this.Age;
			_tmp.Pediatrician = this.Pediatrician;
			_tmp.CountOfChild = this.CountOfChild;
			_tmp.FamilyStatus = this.FamilyStatus;
			_tmp.Notes = this.Notes;
			_tmp.CreateOn = this.CreateOn;
			_tmp.UpdateOn = this.UpdateOn;
			_tmp.UserId = this.UserId;
			
			#region Source Parent Composite Entities
			if (this.AddressIdSource != null)
				_tmp.AddressIdSource = MakeCopyOf(this.AddressIdSource) as ClientAddress;
			if (this.FatherIdSource != null)
				_tmp.FatherIdSource = MakeCopyOf(this.FatherIdSource) as ClientFather;
			if (this.MotherIdSource != null)
				_tmp.MotherIdSource = MakeCopyOf(this.MotherIdSource) as ClientMother;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._observationFormAnswerClientId != null)
				_tmp.ObservationFormAnswerCollection = (TList<ObservationFormAnswer>) MakeCopyOf(this.ObservationFormAnswerCollection); 
			if (this._siblingClientId != null)
				_tmp.SiblingCollection = (TList<Sibling>) MakeCopyOf(this.SiblingCollection); 
			if (this._seanceClientId != null)
				_tmp.SeanceCollection = (TList<Seance>) MakeCopyOf(this.SeanceCollection); 
			if (this._questionFormAnswerClientId != null)
				_tmp.QuestionFormAnswerCollection = (TList<QuestionFormAnswer>) MakeCopyOf(this.QuestionFormAnswerCollection); 
			if (this._seanceQuestionAnswerClientId != null)
				_tmp.SeanceQuestionAnswerCollection = (TList<SeanceQuestionAnswer>) MakeCopyOf(this.SeanceQuestionAnswerCollection); 
			if (this._clientSchoolClientId != null)
				_tmp.ClientSchoolCollection = (TList<ClientSchool>) MakeCopyOf(this.ClientSchoolCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ClientEntityData _tmp = new ClientEntityData();
						
			_tmp.ClientId = this.ClientId;
			
			_tmp.FileNumber = this.FileNumber;
			_tmp.FirstContactDate = this.FirstContactDate;
			_tmp.FullName = this.FullName;
			_tmp.MiddleName = this.MiddleName;
			_tmp.Reference = this.Reference;
			_tmp.MotherId = this.MotherId;
			_tmp.FatherId = this.FatherId;
			_tmp.AddressId = this.AddressId;
			_tmp.IdCard = this.IdCard;
			_tmp.Gender = this.Gender;
			_tmp.Blood = this.Blood;
			_tmp.BirthDate = this.BirthDate;
			_tmp.Age = this.Age;
			_tmp.Pediatrician = this.Pediatrician;
			_tmp.CountOfChild = this.CountOfChild;
			_tmp.FamilyStatus = this.FamilyStatus;
			_tmp.Notes = this.Notes;
			_tmp.CreateOn = this.CreateOn;
			_tmp.UpdateOn = this.UpdateOn;
			_tmp.UserId = this.UserId;
			
			#region Source Parent Composite Entities
			if (this.AddressIdSource != null && existingCopies.Contains(this.AddressIdSource))
				_tmp.AddressIdSource = existingCopies[this.AddressIdSource] as ClientAddress;
			else
				_tmp.AddressIdSource = MakeCopyOf(this.AddressIdSource, existingCopies) as ClientAddress;
			if (this.FatherIdSource != null && existingCopies.Contains(this.FatherIdSource))
				_tmp.FatherIdSource = existingCopies[this.FatherIdSource] as ClientFather;
			else
				_tmp.FatherIdSource = MakeCopyOf(this.FatherIdSource, existingCopies) as ClientFather;
			if (this.MotherIdSource != null && existingCopies.Contains(this.MotherIdSource))
				_tmp.MotherIdSource = existingCopies[this.MotherIdSource] as ClientMother;
			else
				_tmp.MotherIdSource = MakeCopyOf(this.MotherIdSource, existingCopies) as ClientMother;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ObservationFormAnswerCollection = (TList<ObservationFormAnswer>) MakeCopyOf(this.ObservationFormAnswerCollection, existingCopies); 
			_tmp.SiblingCollection = (TList<Sibling>) MakeCopyOf(this.SiblingCollection, existingCopies); 
			_tmp.SeanceCollection = (TList<Seance>) MakeCopyOf(this.SeanceCollection, existingCopies); 
			_tmp.QuestionFormAnswerCollection = (TList<QuestionFormAnswer>) MakeCopyOf(this.QuestionFormAnswerCollection, existingCopies); 
			_tmp.SeanceQuestionAnswerCollection = (TList<SeanceQuestionAnswer>) MakeCopyOf(this.SeanceQuestionAnswerCollection, existingCopies); 
			_tmp.ClientSchoolCollection = (TList<ClientSchool>) MakeCopyOf(this.ClientSchoolCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		[DataMember]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new ClientEntityData();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ClientColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ClientColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ClientColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ClientEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ClientEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ClientColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ClientEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ClientEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ClientEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Client"/> object.
	/// </remarks>
	public class ClientEventArgs : System.EventArgs
	{
		private ClientColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ClientEventArgs class.
		///</summary>
		public ClientEventArgs(ClientColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ClientEventArgs class.
		///</summary>
		public ClientEventArgs(ClientColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ClientColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ClientColumn" />
		public ClientColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Client related events.
	///</summary>
	public delegate void ClientEventHandler(object sender, ClientEventArgs e);
	
	#region ClientComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ClientComparer : System.Collections.Generic.IComparer<Client>
	{
		ClientColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ClientComparer"/> class.
        /// </summary>
		public ClientComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ClientComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ClientComparer(ClientColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Client"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Client"/> to compare.</param>
        /// <param name="b">The second <c>Client</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Client a, Client b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Client entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Client a, Client b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ClientColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ClientKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Client"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ClientKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ClientKey class.
		/// </summary>
		public ClientKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ClientKey class.
		/// </summary>
		public ClientKey(ClientBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ClientId = entity.ClientId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ClientKey class.
		/// </summary>
		public ClientKey(System.Int32 _clientId)
		{
			#region Init Properties

			this.ClientId = _clientId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ClientBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ClientBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ClientId property
		private System.Int32 _clientId;
		
		/// <summary>
		/// Gets or sets the ClientId property.
		/// </summary>
		public System.Int32 ClientId
		{
			get { return _clientId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ClientId = value;
				
				_clientId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ClientId = ( values["ClientId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ClientId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ClientId", ClientId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ClientId: {0}{1}",
								ClientId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ClientColumn Enum
	
	/// <summary>
	/// Enumerate the Client columns.
	/// </summary>
	[Serializable]
	public enum ClientColumn : int
	{
		/// <summary>
		/// ClientId : 
		/// </summary>
		[EnumTextValue("Client Id")]
		[ColumnEnum("ClientId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ClientId = 1,
		/// <summary>
		/// FileNumber : 
		/// </summary>
		[EnumTextValue("File Number")]
		[ColumnEnum("FileNumber", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		FileNumber = 2,
		/// <summary>
		/// FirstContactDate : 
		/// </summary>
		[EnumTextValue("First Contact Date")]
		[ColumnEnum("FirstContactDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FirstContactDate = 3,
		/// <summary>
		/// FullName : 
		/// </summary>
		[EnumTextValue("Full Name")]
		[ColumnEnum("FullName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		FullName = 4,
		/// <summary>
		/// MiddleName : 
		/// </summary>
		[EnumTextValue("Middle Name")]
		[ColumnEnum("MiddleName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		MiddleName = 5,
		/// <summary>
		/// Reference : 
		/// </summary>
		[EnumTextValue("Reference")]
		[ColumnEnum("Reference", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 250)]
		Reference = 6,
		/// <summary>
		/// MotherId : 
		/// </summary>
		[EnumTextValue("Mother Id")]
		[ColumnEnum("MotherId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MotherId = 7,
		/// <summary>
		/// FatherId : 
		/// </summary>
		[EnumTextValue("Father Id")]
		[ColumnEnum("FatherId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FatherId = 8,
		/// <summary>
		/// AddressId : 
		/// </summary>
		[EnumTextValue("Address Id")]
		[ColumnEnum("AddressId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AddressId = 9,
		/// <summary>
		/// IdCard : 
		/// </summary>
		[EnumTextValue("Id Card")]
		[ColumnEnum("IdCard", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 11)]
		IdCard = 10,
		/// <summary>
		/// Gender : 
		/// </summary>
		[EnumTextValue("Gender")]
		[ColumnEnum("Gender", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		Gender = 11,
		/// <summary>
		/// Blood : 
		/// </summary>
		[EnumTextValue("Blood")]
		[ColumnEnum("Blood", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		Blood = 12,
		/// <summary>
		/// BirthDate : 
		/// </summary>
		[EnumTextValue("Birth Date")]
		[ColumnEnum("BirthDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		BirthDate = 13,
		/// <summary>
		/// Age : 
		/// </summary>
		[EnumTextValue("Age")]
		[ColumnEnum("Age", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Age = 14,
		/// <summary>
		/// Pediatrician : 
		/// </summary>
		[EnumTextValue("Pediatrician")]
		[ColumnEnum("Pediatrician", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Pediatrician = 15,
		/// <summary>
		/// CountOfChild : 
		/// </summary>
		[EnumTextValue("Count Of Child")]
		[ColumnEnum("CountOfChild", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CountOfChild = 16,
		/// <summary>
		/// FamilyStatus : 
		/// </summary>
		[EnumTextValue("Family Status")]
		[ColumnEnum("FamilyStatus", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		FamilyStatus = 17,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("Notes")]
		[ColumnEnum("Notes", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Notes = 18,
		/// <summary>
		/// CreateOn : 
		/// </summary>
		[EnumTextValue("Create On")]
		[ColumnEnum("CreateOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateOn = 19,
		/// <summary>
		/// UpdateOn : 
		/// </summary>
		[EnumTextValue("Update On")]
		[ColumnEnum("UpdateOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateOn = 20,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("User Id")]
		[ColumnEnum("UserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		UserId = 21
	}//End enum

	#endregion ClientColumn Enum

} // end namespace
