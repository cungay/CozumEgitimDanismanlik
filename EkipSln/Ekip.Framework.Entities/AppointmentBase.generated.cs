
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : 27 Ocak 2013 Pazar
	Important: Do not modify this file. Edit the file Appointment.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Ekip.Framework.Entities.Validation;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'Appointment' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AppointmentBase : EntityBase, IAppointment, IEntityId<AppointmentKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AppointmentEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AppointmentEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AppointmentEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Appointment> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AppointmentEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AppointmentEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AppointmentBase"/> instance.
		///</summary>
		public AppointmentBase()
		{
			this.entityData = new AppointmentEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AppointmentBase"/> instance.
		///</summary>
		///<param name="_clientId"></param>
		///<param name="_doctorId"></param>
		///<param name="_calenderAgeId"></param>
		///<param name="_reasonId"></param>
		///<param name="_symptom"></param>
		///<param name="_complaint"></param>
		///<param name="_finding"></param>
		///<param name="_appointmentDate"></param>
		///<param name="_appointmentNote"></param>
		///<param name="_status"></param>
		///<param name="_createOn"></param>
		///<param name="_updateOn"></param>
		///<param name="_userId"></param>
		public AppointmentBase(System.Int32 _clientId, System.Int32? _doctorId, System.Int32? _calenderAgeId, 
			System.Int32? _reasonId, System.String _symptom, System.String _complaint, System.String _finding, 
			System.DateTime? _appointmentDate, System.String _appointmentNote, System.Int32? _status, 
			System.DateTime _createOn, System.DateTime? _updateOn, System.Int32 _userId)
		{
			this.entityData = new AppointmentEntityData();
			this.backupData = null;

			this.ClientId = _clientId;
			this.DoctorId = _doctorId;
			this.CalenderAgeId = _calenderAgeId;
			this.ReasonId = _reasonId;
			this.Symptom = _symptom;
			this.Complaint = _complaint;
			this.Finding = _finding;
			this.AppointmentDate = _appointmentDate;
			this.AppointmentNote = _appointmentNote;
			this.Status = _status;
			this.CreateOn = _createOn;
			this.UpdateOn = _updateOn;
			this.UserId = _userId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Appointment"/> instance.
		///</summary>
		///<param name="_clientId"></param>
		///<param name="_doctorId"></param>
		///<param name="_calenderAgeId"></param>
		///<param name="_reasonId"></param>
		///<param name="_symptom"></param>
		///<param name="_complaint"></param>
		///<param name="_finding"></param>
		///<param name="_appointmentDate"></param>
		///<param name="_appointmentNote"></param>
		///<param name="_status"></param>
		///<param name="_createOn"></param>
		///<param name="_updateOn"></param>
		///<param name="_userId"></param>
		public static Appointment CreateAppointment(System.Int32 _clientId, System.Int32? _doctorId, System.Int32? _calenderAgeId, 
			System.Int32? _reasonId, System.String _symptom, System.String _complaint, System.String _finding, 
			System.DateTime? _appointmentDate, System.String _appointmentNote, System.Int32? _status, 
			System.DateTime _createOn, System.DateTime? _updateOn, System.Int32 _userId)
		{
			Appointment newAppointment = new Appointment();
			newAppointment.ClientId = _clientId;
			newAppointment.DoctorId = _doctorId;
			newAppointment.CalenderAgeId = _calenderAgeId;
			newAppointment.ReasonId = _reasonId;
			newAppointment.Symptom = _symptom;
			newAppointment.Complaint = _complaint;
			newAppointment.Finding = _finding;
			newAppointment.AppointmentDate = _appointmentDate;
			newAppointment.AppointmentNote = _appointmentNote;
			newAppointment.Status = _status;
			newAppointment.CreateOn = _createOn;
			newAppointment.UpdateOn = _updateOn;
			newAppointment.UserId = _userId;
			return newAppointment;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AppointmentId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 AppointmentId
		{
			get
			{
				return this.entityData.AppointmentId; 
			}
			
			set
			{
				if (this.entityData.AppointmentId == value)
					return;
					
				OnColumnChanging(AppointmentColumn.AppointmentId, this.entityData.AppointmentId);
				this.entityData.AppointmentId = value;
				this.EntityId.AppointmentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.AppointmentId, this.entityData.AppointmentId);
				OnPropertyChanged("AppointmentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClientId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ClientId
		{
			get
			{
				return this.entityData.ClientId; 
			}
			
			set
			{
				if (this.entityData.ClientId == value)
					return;
					
				OnColumnChanging(AppointmentColumn.ClientId, this.entityData.ClientId);
				this.entityData.ClientId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.ClientId, this.entityData.ClientId);
				OnPropertyChanged("ClientId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoctorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDoctorIdNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DoctorId
		{
			get
			{
				return this.entityData.DoctorId; 
			}
			
			set
			{
				if (this.entityData.DoctorId == value)
					return;
					
				OnColumnChanging(AppointmentColumn.DoctorId, this.entityData.DoctorId);
				this.entityData.DoctorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.DoctorId, this.entityData.DoctorId);
				OnPropertyChanged("DoctorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CalenderAgeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCalenderAgeIdNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CalenderAgeId
		{
			get
			{
				return this.entityData.CalenderAgeId; 
			}
			
			set
			{
				if (this.entityData.CalenderAgeId == value)
					return;
					
				OnColumnChanging(AppointmentColumn.CalenderAgeId, this.entityData.CalenderAgeId);
				this.entityData.CalenderAgeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.CalenderAgeId, this.entityData.CalenderAgeId);
				OnPropertyChanged("CalenderAgeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReasonId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsReasonIdNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ReasonId
		{
			get
			{
				return this.entityData.ReasonId; 
			}
			
			set
			{
				if (this.entityData.ReasonId == value)
					return;
					
				OnColumnChanging(AppointmentColumn.ReasonId, this.entityData.ReasonId);
				this.entityData.ReasonId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.ReasonId, this.entityData.ReasonId);
				OnPropertyChanged("ReasonId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Symptom property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Symptom
		{
			get
			{
				return this.entityData.Symptom; 
			}
			
			set
			{
				if (this.entityData.Symptom == value)
					return;
					
				OnColumnChanging(AppointmentColumn.Symptom, this.entityData.Symptom);
				this.entityData.Symptom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.Symptom, this.entityData.Symptom);
				OnPropertyChanged("Symptom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Complaint property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Complaint
		{
			get
			{
				return this.entityData.Complaint; 
			}
			
			set
			{
				if (this.entityData.Complaint == value)
					return;
					
				OnColumnChanging(AppointmentColumn.Complaint, this.entityData.Complaint);
				this.entityData.Complaint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.Complaint, this.entityData.Complaint);
				OnPropertyChanged("Complaint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Finding property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Finding
		{
			get
			{
				return this.entityData.Finding; 
			}
			
			set
			{
				if (this.entityData.Finding == value)
					return;
					
				OnColumnChanging(AppointmentColumn.Finding, this.entityData.Finding);
				this.entityData.Finding = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.Finding, this.entityData.Finding);
				OnPropertyChanged("Finding");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AppointmentDate property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsAppointmentDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? AppointmentDate
		{
			get
			{
				return this.entityData.AppointmentDate; 
			}
			
			set
			{
				if (this.entityData.AppointmentDate == value)
					return;
					
				OnColumnChanging(AppointmentColumn.AppointmentDate, this.entityData.AppointmentDate);
				this.entityData.AppointmentDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.AppointmentDate, this.entityData.AppointmentDate);
				OnPropertyChanged("AppointmentDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AppointmentNote property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String AppointmentNote
		{
			get
			{
				return this.entityData.AppointmentNote; 
			}
			
			set
			{
				if (this.entityData.AppointmentNote == value)
					return;
					
				OnColumnChanging(AppointmentColumn.AppointmentNote, this.entityData.AppointmentNote);
				this.entityData.AppointmentNote = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.AppointmentNote, this.entityData.AppointmentNote);
				OnPropertyChanged("AppointmentNote");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(AppointmentColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateOn property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateOn
		{
			get
			{
				return this.entityData.CreateOn; 
			}
			
			set
			{
				if (this.entityData.CreateOn == value)
					return;
					
				OnColumnChanging(AppointmentColumn.CreateOn, this.entityData.CreateOn);
				this.entityData.CreateOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.CreateOn, this.entityData.CreateOn);
				OnPropertyChanged("CreateOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateOn property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.Now. It is up to the developer
		/// to check the value of IsUpdateOnNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateOn
		{
			get
			{
				return this.entityData.UpdateOn; 
			}
			
			set
			{
				if (this.entityData.UpdateOn == value)
					return;
					
				OnColumnChanging(AppointmentColumn.UpdateOn, this.entityData.UpdateOn);
				this.entityData.UpdateOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.UpdateOn, this.entityData.UpdateOn);
				OnPropertyChanged("UpdateOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(AppointmentColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Symptom", "Symptom", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Complaint", "Complaint", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Finding", "Finding", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AppointmentNote", "Appointment Note", 500));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Appointment"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"AppointmentID", "ClientID", "DoctorID", "CalenderAgeID", "ReasonID", "Symptom", "Complaint", "Finding", "AppointmentDate", "AppointmentNote", "Status", "CreateOn", "UpdateOn", "UserID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AppointmentEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Appointment) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Appointment>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Appointment);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Appointment Entity 
		///</summary>
		protected virtual Appointment Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Appointment copy = new Appointment();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AppointmentId = this.AppointmentId;
				copy.ClientId = this.ClientId;
				copy.DoctorId = this.DoctorId;
				copy.CalenderAgeId = this.CalenderAgeId;
				copy.ReasonId = this.ReasonId;
				copy.Symptom = this.Symptom;
				copy.Complaint = this.Complaint;
				copy.Finding = this.Finding;
				copy.AppointmentDate = this.AppointmentDate;
				copy.AppointmentNote = this.AppointmentNote;
				copy.Status = this.Status;
				copy.CreateOn = this.CreateOn;
				copy.UpdateOn = this.UpdateOn;
				copy.UserId = this.UserId;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Appointment Entity 
		///</summary>
		public virtual Appointment Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Appointment Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Appointment DeepCopy()
		{
			return EntityHelper.Clone<Appointment>(this as Appointment);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AppointmentEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AppointmentEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AppointmentEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AppointmentColumn column)
		{
			switch(column)
			{
					case AppointmentColumn.AppointmentId:
					return entityData.AppointmentId != _originalData.AppointmentId;
					case AppointmentColumn.ClientId:
					return entityData.ClientId != _originalData.ClientId;
					case AppointmentColumn.DoctorId:
					return entityData.DoctorId != _originalData.DoctorId;
					case AppointmentColumn.CalenderAgeId:
					return entityData.CalenderAgeId != _originalData.CalenderAgeId;
					case AppointmentColumn.ReasonId:
					return entityData.ReasonId != _originalData.ReasonId;
					case AppointmentColumn.Symptom:
					return entityData.Symptom != _originalData.Symptom;
					case AppointmentColumn.Complaint:
					return entityData.Complaint != _originalData.Complaint;
					case AppointmentColumn.Finding:
					return entityData.Finding != _originalData.Finding;
					case AppointmentColumn.AppointmentDate:
					return entityData.AppointmentDate != _originalData.AppointmentDate;
					case AppointmentColumn.AppointmentNote:
					return entityData.AppointmentNote != _originalData.AppointmentNote;
					case AppointmentColumn.Status:
					return entityData.Status != _originalData.Status;
					case AppointmentColumn.CreateOn:
					return entityData.CreateOn != _originalData.CreateOn;
					case AppointmentColumn.UpdateOn:
					return entityData.UpdateOn != _originalData.UpdateOn;
					case AppointmentColumn.UserId:
					return entityData.UserId != _originalData.UserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AppointmentColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AppointmentId != _originalData.AppointmentId;
			result = result || entityData.ClientId != _originalData.ClientId;
			result = result || entityData.DoctorId != _originalData.DoctorId;
			result = result || entityData.CalenderAgeId != _originalData.CalenderAgeId;
			result = result || entityData.ReasonId != _originalData.ReasonId;
			result = result || entityData.Symptom != _originalData.Symptom;
			result = result || entityData.Complaint != _originalData.Complaint;
			result = result || entityData.Finding != _originalData.Finding;
			result = result || entityData.AppointmentDate != _originalData.AppointmentDate;
			result = result || entityData.AppointmentNote != _originalData.AppointmentNote;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.CreateOn != _originalData.CreateOn;
			result = result || entityData.UpdateOn != _originalData.UpdateOn;
			result = result || entityData.UserId != _originalData.UserId;
			return result;
		}	
		
		///<summary>
		///  Returns a Appointment Entity with the original data.
		///</summary>
		public Appointment GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAppointment(
				_originalData.ClientId,
				_originalData.DoctorId,
				_originalData.CalenderAgeId,
				_originalData.ReasonId,
				_originalData.Symptom,
				_originalData.Complaint,
				_originalData.Finding,
				_originalData.AppointmentDate,
				_originalData.AppointmentNote,
				_originalData.Status,
				_originalData.CreateOn,
				_originalData.UpdateOn,
				_originalData.UserId
				);
				
			return (Appointment)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AppointmentBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AppointmentBase)
				return ValueEquals(this, (AppointmentBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AppointmentBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AppointmentId.GetHashCode() ^ 
					this.ClientId.GetHashCode() ^ 
					((this.DoctorId == null) ? string.Empty : this.DoctorId.ToString()).GetHashCode() ^ 
					((this.CalenderAgeId == null) ? string.Empty : this.CalenderAgeId.ToString()).GetHashCode() ^ 
					((this.ReasonId == null) ? string.Empty : this.ReasonId.ToString()).GetHashCode() ^ 
					((this.Symptom == null) ? string.Empty : this.Symptom.ToString()).GetHashCode() ^ 
					((this.Complaint == null) ? string.Empty : this.Complaint.ToString()).GetHashCode() ^ 
					((this.Finding == null) ? string.Empty : this.Finding.ToString()).GetHashCode() ^ 
					((this.AppointmentDate == null) ? string.Empty : this.AppointmentDate.ToString()).GetHashCode() ^ 
					((this.AppointmentNote == null) ? string.Empty : this.AppointmentNote.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode() ^ 
					this.CreateOn.GetHashCode() ^ 
					((this.UpdateOn == null) ? string.Empty : this.UpdateOn.ToString()).GetHashCode() ^ 
					this.UserId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AppointmentBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AppointmentBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AppointmentBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AppointmentBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AppointmentBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AppointmentBase Object1, AppointmentBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AppointmentId != Object2.AppointmentId)
				equal = false;
			if (Object1.ClientId != Object2.ClientId)
				equal = false;
			if ( Object1.DoctorId != null && Object2.DoctorId != null )
			{
				if (Object1.DoctorId != Object2.DoctorId)
					equal = false;
			}
			else if (Object1.DoctorId == null ^ Object2.DoctorId == null )
			{
				equal = false;
			}
			if ( Object1.CalenderAgeId != null && Object2.CalenderAgeId != null )
			{
				if (Object1.CalenderAgeId != Object2.CalenderAgeId)
					equal = false;
			}
			else if (Object1.CalenderAgeId == null ^ Object2.CalenderAgeId == null )
			{
				equal = false;
			}
			if ( Object1.ReasonId != null && Object2.ReasonId != null )
			{
				if (Object1.ReasonId != Object2.ReasonId)
					equal = false;
			}
			else if (Object1.ReasonId == null ^ Object2.ReasonId == null )
			{
				equal = false;
			}
			if ( Object1.Symptom != null && Object2.Symptom != null )
			{
				if (Object1.Symptom != Object2.Symptom)
					equal = false;
			}
			else if (Object1.Symptom == null ^ Object2.Symptom == null )
			{
				equal = false;
			}
			if ( Object1.Complaint != null && Object2.Complaint != null )
			{
				if (Object1.Complaint != Object2.Complaint)
					equal = false;
			}
			else if (Object1.Complaint == null ^ Object2.Complaint == null )
			{
				equal = false;
			}
			if ( Object1.Finding != null && Object2.Finding != null )
			{
				if (Object1.Finding != Object2.Finding)
					equal = false;
			}
			else if (Object1.Finding == null ^ Object2.Finding == null )
			{
				equal = false;
			}
			if ( Object1.AppointmentDate != null && Object2.AppointmentDate != null )
			{
				if (Object1.AppointmentDate != Object2.AppointmentDate)
					equal = false;
			}
			else if (Object1.AppointmentDate == null ^ Object2.AppointmentDate == null )
			{
				equal = false;
			}
			if ( Object1.AppointmentNote != null && Object2.AppointmentNote != null )
			{
				if (Object1.AppointmentNote != Object2.AppointmentNote)
					equal = false;
			}
			else if (Object1.AppointmentNote == null ^ Object2.AppointmentNote == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if (Object1.CreateOn != Object2.CreateOn)
				equal = false;
			if ( Object1.UpdateOn != null && Object2.UpdateOn != null )
			{
				if (Object1.UpdateOn != Object2.UpdateOn)
					equal = false;
			}
			else if (Object1.UpdateOn == null ^ Object2.UpdateOn == null )
			{
				equal = false;
			}
			if (Object1.UserId != Object2.UserId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AppointmentBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AppointmentComparer GetComparer()
        {
            return new AppointmentComparer();
        }
        */

        // Comparer delegates back to Appointment
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Appointment rhs, AppointmentColumn which)
        {
            switch (which)
            {
            	
            	
            	case AppointmentColumn.AppointmentId:
            		return this.AppointmentId.CompareTo(rhs.AppointmentId);
            		
            		                 
            	
            	
            	case AppointmentColumn.ClientId:
            		return this.ClientId.CompareTo(rhs.ClientId);
            		
            		                 
            	
            	
            	case AppointmentColumn.DoctorId:
            		return this.DoctorId.Value.CompareTo(rhs.DoctorId.Value);
            		
            		                 
            	
            	
            	case AppointmentColumn.CalenderAgeId:
            		return this.CalenderAgeId.Value.CompareTo(rhs.CalenderAgeId.Value);
            		
            		                 
            	
            	
            	case AppointmentColumn.ReasonId:
            		return this.ReasonId.Value.CompareTo(rhs.ReasonId.Value);
            		
            		                 
            	
            	
            	case AppointmentColumn.Symptom:
            		return this.Symptom.CompareTo(rhs.Symptom);
            		
            		                 
            	
            	
            	case AppointmentColumn.Complaint:
            		return this.Complaint.CompareTo(rhs.Complaint);
            		
            		                 
            	
            	
            	case AppointmentColumn.Finding:
            		return this.Finding.CompareTo(rhs.Finding);
            		
            		                 
            	
            	
            	case AppointmentColumn.AppointmentDate:
            		return this.AppointmentDate.Value.CompareTo(rhs.AppointmentDate.Value);
            		
            		                 
            	
            	
            	case AppointmentColumn.AppointmentNote:
            		return this.AppointmentNote.CompareTo(rhs.AppointmentNote);
            		
            		                 
            	
            	
            	case AppointmentColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case AppointmentColumn.CreateOn:
            		return this.CreateOn.CompareTo(rhs.CreateOn);
            		
            		                 
            	
            	
            	case AppointmentColumn.UpdateOn:
            		return this.UpdateOn.Value.CompareTo(rhs.UpdateOn.Value);
            		
            		                 
            	
            	
            	case AppointmentColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AppointmentKey> Members
		
		// member variable for the EntityId property
		private AppointmentKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AppointmentKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AppointmentKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Appointment")
					.Append("|").Append( this.AppointmentId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- AppointmentId: {0}{14}- ClientId: {1}{14}- DoctorId: {2}{14}- CalenderAgeId: {3}{14}- ReasonId: {4}{14}- Symptom: {5}{14}- Complaint: {6}{14}- Finding: {7}{14}- AppointmentDate: {8}{14}- AppointmentNote: {9}{14}- Status: {10}{14}- CreateOn: {11}{14}- UpdateOn: {12}{14}- UserId: {13}{14}{16}", 
				this.AppointmentId,
				this.ClientId,
				(this.DoctorId == null) ? string.Empty : this.DoctorId.ToString(),
				(this.CalenderAgeId == null) ? string.Empty : this.CalenderAgeId.ToString(),
				(this.ReasonId == null) ? string.Empty : this.ReasonId.ToString(),
				(this.Symptom == null) ? string.Empty : this.Symptom.ToString(),
				(this.Complaint == null) ? string.Empty : this.Complaint.ToString(),
				(this.Finding == null) ? string.Empty : this.Finding.ToString(),
				(this.AppointmentDate == null) ? string.Empty : this.AppointmentDate.ToString(),
				(this.AppointmentNote == null) ? string.Empty : this.AppointmentNote.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				this.CreateOn,
				(this.UpdateOn == null) ? string.Empty : this.UpdateOn.ToString(),
				this.UserId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Appointment' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AppointmentEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// AppointmentID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Appointment"</remarks>
		public System.Int32 AppointmentId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// ClientID : 
		/// </summary>
		public System.Int32 ClientId = (int)0;
		
		/// <summary>
		/// DoctorID : 
		/// </summary>
		public System.Int32? DoctorId = null;
		
		/// <summary>
		/// CalenderAgeID : 
		/// </summary>
		public System.Int32? CalenderAgeId = null;
		
		/// <summary>
		/// ReasonID : 
		/// </summary>
		public System.Int32? ReasonId = null;
		
		/// <summary>
		/// Symptom : 
		/// </summary>
		public System.String Symptom = null;
		
		/// <summary>
		/// Complaint : 
		/// </summary>
		public System.String Complaint = null;
		
		/// <summary>
		/// Finding : 
		/// </summary>
		public System.String Finding = null;
		
		/// <summary>
		/// AppointmentDate : 
		/// </summary>
		public System.DateTime? AppointmentDate = null;
		
		/// <summary>
		/// AppointmentNote : 
		/// </summary>
		public System.String AppointmentNote = null;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.Int32? Status = null;
		
		/// <summary>
		/// CreateOn : 
		/// </summary>
		public System.DateTime CreateOn = DateTime.MinValue;
		
		/// <summary>
		/// UpdateOn : 
		/// </summary>
		public System.DateTime? UpdateOn = DateTime.Now;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		public System.Int32 UserId = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AppointmentEntityData _tmp = new AppointmentEntityData();
						
			_tmp.AppointmentId = this.AppointmentId;
			
			_tmp.ClientId = this.ClientId;
			_tmp.DoctorId = this.DoctorId;
			_tmp.CalenderAgeId = this.CalenderAgeId;
			_tmp.ReasonId = this.ReasonId;
			_tmp.Symptom = this.Symptom;
			_tmp.Complaint = this.Complaint;
			_tmp.Finding = this.Finding;
			_tmp.AppointmentDate = this.AppointmentDate;
			_tmp.AppointmentNote = this.AppointmentNote;
			_tmp.Status = this.Status;
			_tmp.CreateOn = this.CreateOn;
			_tmp.UpdateOn = this.UpdateOn;
			_tmp.UserId = this.UserId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AppointmentEntityData _tmp = new AppointmentEntityData();
						
			_tmp.AppointmentId = this.AppointmentId;
			
			_tmp.ClientId = this.ClientId;
			_tmp.DoctorId = this.DoctorId;
			_tmp.CalenderAgeId = this.CalenderAgeId;
			_tmp.ReasonId = this.ReasonId;
			_tmp.Symptom = this.Symptom;
			_tmp.Complaint = this.Complaint;
			_tmp.Finding = this.Finding;
			_tmp.AppointmentDate = this.AppointmentDate;
			_tmp.AppointmentNote = this.AppointmentNote;
			_tmp.Status = this.Status;
			_tmp.CreateOn = this.CreateOn;
			_tmp.UpdateOn = this.UpdateOn;
			_tmp.UserId = this.UserId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppointmentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AppointmentColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppointmentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AppointmentColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppointmentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AppointmentColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AppointmentEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AppointmentEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppointmentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AppointmentColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AppointmentEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AppointmentEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AppointmentEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Appointment"/> object.
	/// </remarks>
	public class AppointmentEventArgs : System.EventArgs
	{
		private AppointmentColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AppointmentEventArgs class.
		///</summary>
		public AppointmentEventArgs(AppointmentColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AppointmentEventArgs class.
		///</summary>
		public AppointmentEventArgs(AppointmentColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AppointmentColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AppointmentColumn" />
		public AppointmentColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Appointment related events.
	///</summary>
	public delegate void AppointmentEventHandler(object sender, AppointmentEventArgs e);
	
	#region AppointmentComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AppointmentComparer : System.Collections.Generic.IComparer<Appointment>
	{
		AppointmentColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AppointmentComparer"/> class.
        /// </summary>
		public AppointmentComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AppointmentComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AppointmentComparer(AppointmentColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Appointment"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Appointment"/> to compare.</param>
        /// <param name="b">The second <c>Appointment</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Appointment a, Appointment b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Appointment entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Appointment a, Appointment b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AppointmentColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AppointmentKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Appointment"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AppointmentKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AppointmentKey class.
		/// </summary>
		public AppointmentKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AppointmentKey class.
		/// </summary>
		public AppointmentKey(AppointmentBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AppointmentId = entity.AppointmentId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AppointmentKey class.
		/// </summary>
		public AppointmentKey(System.Int32 _appointmentId)
		{
			#region Init Properties

			this.AppointmentId = _appointmentId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AppointmentBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AppointmentBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AppointmentId property
		private System.Int32 _appointmentId;
		
		/// <summary>
		/// Gets or sets the AppointmentId property.
		/// </summary>
		public System.Int32 AppointmentId
		{
			get { return _appointmentId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AppointmentId = value;
				
				_appointmentId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AppointmentId = ( values["AppointmentId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["AppointmentId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AppointmentId", AppointmentId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AppointmentId: {0}{1}",
								AppointmentId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AppointmentColumn Enum
	
	/// <summary>
	/// Enumerate the Appointment columns.
	/// </summary>
	[Serializable]
	public enum AppointmentColumn : int
	{
		/// <summary>
		/// AppointmentId : 
		/// </summary>
		[EnumTextValue("AppointmentID")]
		[ColumnEnum("AppointmentID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		AppointmentId = 1,
		/// <summary>
		/// ClientId : 
		/// </summary>
		[EnumTextValue("ClientID")]
		[ColumnEnum("ClientID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ClientId = 2,
		/// <summary>
		/// DoctorId : 
		/// </summary>
		[EnumTextValue("DoctorID")]
		[ColumnEnum("DoctorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DoctorId = 3,
		/// <summary>
		/// CalenderAgeId : 
		/// </summary>
		[EnumTextValue("CalenderAgeID")]
		[ColumnEnum("CalenderAgeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CalenderAgeId = 4,
		/// <summary>
		/// ReasonId : 
		/// </summary>
		[EnumTextValue("ReasonID")]
		[ColumnEnum("ReasonID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ReasonId = 5,
		/// <summary>
		/// Symptom : 
		/// </summary>
		[EnumTextValue("Symptom")]
		[ColumnEnum("Symptom", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		Symptom = 6,
		/// <summary>
		/// Complaint : 
		/// </summary>
		[EnumTextValue("Complaint")]
		[ColumnEnum("Complaint", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		Complaint = 7,
		/// <summary>
		/// Finding : 
		/// </summary>
		[EnumTextValue("Finding")]
		[ColumnEnum("Finding", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		Finding = 8,
		/// <summary>
		/// AppointmentDate : 
		/// </summary>
		[EnumTextValue("AppointmentDate")]
		[ColumnEnum("AppointmentDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		AppointmentDate = 9,
		/// <summary>
		/// AppointmentNote : 
		/// </summary>
		[EnumTextValue("AppointmentNote")]
		[ColumnEnum("AppointmentNote", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		AppointmentNote = 10,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Status = 11,
		/// <summary>
		/// CreateOn : 
		/// </summary>
		[EnumTextValue("CreateOn")]
		[ColumnEnum("CreateOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateOn = 12,
		/// <summary>
		/// UpdateOn : 
		/// </summary>
		[EnumTextValue("UpdateOn")]
		[ColumnEnum("UpdateOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateOn = 13,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		UserId = 14
	}//End enum

	#endregion AppointmentColumn Enum

} // end namespace
