
/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 24 Ekim 2018 Çarşamba
	Important: Do not modify this file. Edit the file ClientAddress.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Ekip.Framework.Entities.Validation;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'ClientAddress' table. [No description found the database]	
	///</summary>
	[DataContract]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ClientAddressBase : EntityBase, IClientAddress, IEntityId<ClientAddressKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		[DataMember]
		private ClientAddressEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		[DataMember]
		private ClientAddressEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ClientAddressEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		private TList<ClientAddress> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		public event ClientAddressEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		public event ClientAddressEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ClientAddressBase"/> instance.
		///</summary>
		public ClientAddressBase()
		{
			this.entityData = new ClientAddressEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ClientAddressBase"/> instance.
		///</summary>
		///<param name="_titleId"></param>
		///<param name="_addressLine"></param>
		///<param name="_provinceId"></param>
		///<param name="_townId"></param>
		///<param name="_neighborhoodId"></param>
		///<param name="_streetId"></param>
		///<param name="_phone1"></param>
		///<param name="_phone2"></param>
		///<param name="_mobile"></param>
		///<param name="_ısUsed"></param>
		///<param name="_createOn"></param>
		///<param name="_updateOn"></param>
		///<param name="_userId"></param>
		public ClientAddressBase(System.Byte _titleId, System.String _addressLine, System.Int32? _provinceId, 
			System.Int32? _townId, System.Int32? _neighborhoodId, System.Int32? _streetId, System.String _phone1, 
			System.String _phone2, System.String _mobile, System.Boolean _ısUsed, System.DateTime _createOn, 
			System.DateTime? _updateOn, System.Int32 _userId)
		{
			this.entityData = new ClientAddressEntityData();
			this.backupData = null;

			this.TitleId = _titleId;
			this.AddressLine = _addressLine;
			this.ProvinceId = _provinceId;
			this.TownId = _townId;
			this.NeighborhoodId = _neighborhoodId;
			this.StreetId = _streetId;
			this.Phone1 = _phone1;
			this.Phone2 = _phone2;
			this.Mobile = _mobile;
			this.IsUsed = _ısUsed;
			this.CreateOn = _createOn;
			this.UpdateOn = _updateOn;
			this.UserId = _userId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ClientAddress"/> instance.
		///</summary>
		///<param name="_titleId"></param>
		///<param name="_addressLine"></param>
		///<param name="_provinceId"></param>
		///<param name="_townId"></param>
		///<param name="_neighborhoodId"></param>
		///<param name="_streetId"></param>
		///<param name="_phone1"></param>
		///<param name="_phone2"></param>
		///<param name="_mobile"></param>
		///<param name="_ısUsed"></param>
		///<param name="_createOn"></param>
		///<param name="_updateOn"></param>
		///<param name="_userId"></param>
		public static ClientAddress CreateClientAddress(System.Byte _titleId, System.String _addressLine, System.Int32? _provinceId, 
			System.Int32? _townId, System.Int32? _neighborhoodId, System.Int32? _streetId, System.String _phone1, 
			System.String _phone2, System.String _mobile, System.Boolean _ısUsed, System.DateTime _createOn, 
			System.DateTime? _updateOn, System.Int32 _userId)
		{
			ClientAddress newClientAddress = new ClientAddress();
			newClientAddress.TitleId = _titleId;
			newClientAddress.AddressLine = _addressLine;
			newClientAddress.ProvinceId = _provinceId;
			newClientAddress.TownId = _townId;
			newClientAddress.NeighborhoodId = _neighborhoodId;
			newClientAddress.StreetId = _streetId;
			newClientAddress.Phone1 = _phone1;
			newClientAddress.Phone2 = _phone2;
			newClientAddress.Mobile = _mobile;
			newClientAddress.IsUsed = _ısUsed;
			newClientAddress.CreateOn = _createOn;
			newClientAddress.UpdateOn = _updateOn;
			newClientAddress.UserId = _userId;
			return newClientAddress;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AddressId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 AddressId
		{
			get
			{
				return this.entityData.AddressId; 
			}
			
			set
			{
				if (this.entityData.AddressId == value)
					return;
				
                OnPropertyChanging("AddressId");                    
				OnColumnChanging(ClientAddressColumn.AddressId, this.entityData.AddressId);
				this.entityData.AddressId = value;
				this.EntityId.AddressId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.AddressId, this.entityData.AddressId);
				OnPropertyChanged("AddressId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TitleId property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte TitleId
		{
			get
			{
				return this.entityData.TitleId; 
			}
			
			set
			{
				if (this.entityData.TitleId == value)
					return;
				
                OnPropertyChanging("TitleId");                    
				OnColumnChanging(ClientAddressColumn.TitleId, this.entityData.TitleId);
				this.entityData.TitleId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.TitleId, this.entityData.TitleId);
				OnPropertyChanged("TitleId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddressLine property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String AddressLine
		{
			get
			{
				return this.entityData.AddressLine; 
			}
			
			set
			{
				if (this.entityData.AddressLine == value)
					return;
				
                OnPropertyChanging("AddressLine");                    
				OnColumnChanging(ClientAddressColumn.AddressLine, this.entityData.AddressLine);
				this.entityData.AddressLine = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.AddressLine, this.entityData.AddressLine);
				OnPropertyChanged("AddressLine");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProvinceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProvinceId
		{
			get
			{
				return this.entityData.ProvinceId; 
			}
			
			set
			{
				if (this.entityData.ProvinceId == value)
					return;
				
                OnPropertyChanging("ProvinceId");                    
				OnColumnChanging(ClientAddressColumn.ProvinceId, this.entityData.ProvinceId);
				this.entityData.ProvinceId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.ProvinceId, this.entityData.ProvinceId);
				OnPropertyChanged("ProvinceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TownId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TownId
		{
			get
			{
				return this.entityData.TownId; 
			}
			
			set
			{
				if (this.entityData.TownId == value)
					return;
				
                OnPropertyChanging("TownId");                    
				OnColumnChanging(ClientAddressColumn.TownId, this.entityData.TownId);
				this.entityData.TownId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.TownId, this.entityData.TownId);
				OnPropertyChanged("TownId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NeighborhoodId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? NeighborhoodId
		{
			get
			{
				return this.entityData.NeighborhoodId; 
			}
			
			set
			{
				if (this.entityData.NeighborhoodId == value)
					return;
				
                OnPropertyChanging("NeighborhoodId");                    
				OnColumnChanging(ClientAddressColumn.NeighborhoodId, this.entityData.NeighborhoodId);
				this.entityData.NeighborhoodId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.NeighborhoodId, this.entityData.NeighborhoodId);
				OnPropertyChanged("NeighborhoodId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StreetId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? StreetId
		{
			get
			{
				return this.entityData.StreetId; 
			}
			
			set
			{
				if (this.entityData.StreetId == value)
					return;
				
                OnPropertyChanging("StreetId");                    
				OnColumnChanging(ClientAddressColumn.StreetId, this.entityData.StreetId);
				this.entityData.StreetId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.StreetId, this.entityData.StreetId);
				OnPropertyChanged("StreetId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Phone1
		{
			get
			{
				return this.entityData.Phone1; 
			}
			
			set
			{
				if (this.entityData.Phone1 == value)
					return;
				
                OnPropertyChanging("Phone1");                    
				OnColumnChanging(ClientAddressColumn.Phone1, this.entityData.Phone1);
				this.entityData.Phone1 = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.Phone1, this.entityData.Phone1);
				OnPropertyChanged("Phone1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Phone2
		{
			get
			{
				return this.entityData.Phone2; 
			}
			
			set
			{
				if (this.entityData.Phone2 == value)
					return;
				
                OnPropertyChanging("Phone2");                    
				OnColumnChanging(ClientAddressColumn.Phone2, this.entityData.Phone2);
				this.entityData.Phone2 = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.Phone2, this.entityData.Phone2);
				OnPropertyChanged("Phone2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Mobile property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Mobile
		{
			get
			{
				return this.entityData.Mobile; 
			}
			
			set
			{
				if (this.entityData.Mobile == value)
					return;
				
                OnPropertyChanging("Mobile");                    
				OnColumnChanging(ClientAddressColumn.Mobile, this.entityData.Mobile);
				this.entityData.Mobile = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.Mobile, this.entityData.Mobile);
				OnPropertyChanged("Mobile");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsUsed property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsUsed
		{
			get
			{
				return this.entityData.IsUsed; 
			}
			
			set
			{
				if (this.entityData.IsUsed == value)
					return;
				
                OnPropertyChanging("IsUsed");                    
				OnColumnChanging(ClientAddressColumn.IsUsed, this.entityData.IsUsed);
				this.entityData.IsUsed = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.IsUsed, this.entityData.IsUsed);
				OnPropertyChanged("IsUsed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateOn property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateOn
		{
			get
			{
				return this.entityData.CreateOn; 
			}
			
			set
			{
				if (this.entityData.CreateOn == value)
					return;
				
                OnPropertyChanging("CreateOn");                    
				OnColumnChanging(ClientAddressColumn.CreateOn, this.entityData.CreateOn);
				this.entityData.CreateOn = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.CreateOn, this.entityData.CreateOn);
				OnPropertyChanged("CreateOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateOn property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateOn
		{
			get
			{
				return this.entityData.UpdateOn; 
			}
			
			set
			{
				if (this.entityData.UpdateOn == value)
					return;
				
                OnPropertyChanging("UpdateOn");                    
				OnColumnChanging(ClientAddressColumn.UpdateOn, this.entityData.UpdateOn);
				this.entityData.UpdateOn = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.UpdateOn, this.entityData.UpdateOn);
				OnPropertyChanged("UpdateOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
				
                OnPropertyChanging("UserId");                    
				OnColumnChanging(ClientAddressColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientAddressColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Client objects
		///	which are related to this object through the relation FK_Client_ClientAddress
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Client> ClientCollection
		{
			get { return entityData.ClientCollection; }
			set { entityData.ClientCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AddressLine", "Address Line", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phone1", "Phone1", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phone2", "Phone2", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Mobile", "Mobile", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ClientAddress"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"AddressId", "TitleId", "AddressLine", "ProvinceId", "TownId", "NeighborhoodId", "StreetId", "Phone1", "Phone2", "Mobile", "IsUsed", "CreateOn", "UpdateOn", "UserId"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ClientAddressEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ClientAddress) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ClientAddress>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ClientAddress);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ClientAddress Entity 
		///</summary>
		protected virtual ClientAddress Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ClientAddress copy = new ClientAddress();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AddressId = this.AddressId;
				copy.TitleId = this.TitleId;
				copy.AddressLine = this.AddressLine;
				copy.ProvinceId = this.ProvinceId;
				copy.TownId = this.TownId;
				copy.NeighborhoodId = this.NeighborhoodId;
				copy.StreetId = this.StreetId;
				copy.Phone1 = this.Phone1;
				copy.Phone2 = this.Phone2;
				copy.Mobile = this.Mobile;
				copy.IsUsed = this.IsUsed;
				copy.CreateOn = this.CreateOn;
				copy.UpdateOn = this.UpdateOn;
				copy.UserId = this.UserId;
			
		
			//deep copy nested objects
			copy.ClientCollection = (TList<Client>) MakeCopyOf(this.ClientCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ClientAddress Entity 
		///</summary>
		public virtual ClientAddress Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ClientAddress Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ClientAddress DeepCopy()
		{
			return EntityHelper.Clone<ClientAddress>(this as ClientAddress);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ClientAddressEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ClientAddressEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ClientAddressEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ClientAddressColumn column)
		{
			switch(column)
			{
					case ClientAddressColumn.AddressId:
					return entityData.AddressId != _originalData.AddressId;
					case ClientAddressColumn.TitleId:
					return entityData.TitleId != _originalData.TitleId;
					case ClientAddressColumn.AddressLine:
					return entityData.AddressLine != _originalData.AddressLine;
					case ClientAddressColumn.ProvinceId:
					return entityData.ProvinceId != _originalData.ProvinceId;
					case ClientAddressColumn.TownId:
					return entityData.TownId != _originalData.TownId;
					case ClientAddressColumn.NeighborhoodId:
					return entityData.NeighborhoodId != _originalData.NeighborhoodId;
					case ClientAddressColumn.StreetId:
					return entityData.StreetId != _originalData.StreetId;
					case ClientAddressColumn.Phone1:
					return entityData.Phone1 != _originalData.Phone1;
					case ClientAddressColumn.Phone2:
					return entityData.Phone2 != _originalData.Phone2;
					case ClientAddressColumn.Mobile:
					return entityData.Mobile != _originalData.Mobile;
					case ClientAddressColumn.IsUsed:
					return entityData.IsUsed != _originalData.IsUsed;
					case ClientAddressColumn.CreateOn:
					return entityData.CreateOn != _originalData.CreateOn;
					case ClientAddressColumn.UpdateOn:
					return entityData.UpdateOn != _originalData.UpdateOn;
					case ClientAddressColumn.UserId:
					return entityData.UserId != _originalData.UserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ClientAddressColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AddressId != _originalData.AddressId;
			result = result || entityData.TitleId != _originalData.TitleId;
			result = result || entityData.AddressLine != _originalData.AddressLine;
			result = result || entityData.ProvinceId != _originalData.ProvinceId;
			result = result || entityData.TownId != _originalData.TownId;
			result = result || entityData.NeighborhoodId != _originalData.NeighborhoodId;
			result = result || entityData.StreetId != _originalData.StreetId;
			result = result || entityData.Phone1 != _originalData.Phone1;
			result = result || entityData.Phone2 != _originalData.Phone2;
			result = result || entityData.Mobile != _originalData.Mobile;
			result = result || entityData.IsUsed != _originalData.IsUsed;
			result = result || entityData.CreateOn != _originalData.CreateOn;
			result = result || entityData.UpdateOn != _originalData.UpdateOn;
			result = result || entityData.UserId != _originalData.UserId;
			return result;
		}	
		
		///<summary>
		///  Returns a ClientAddress Entity with the original data.
		///</summary>
		public ClientAddress GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateClientAddress(
				_originalData.TitleId,
				_originalData.AddressLine,
				_originalData.ProvinceId,
				_originalData.TownId,
				_originalData.NeighborhoodId,
				_originalData.StreetId,
				_originalData.Phone1,
				_originalData.Phone2,
				_originalData.Mobile,
				_originalData.IsUsed,
				_originalData.CreateOn,
				_originalData.UpdateOn,
				_originalData.UserId
				);
				
			return (ClientAddress)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ClientAddressBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ClientAddressBase)
				return ValueEquals(this, (ClientAddressBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ClientAddressBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AddressId.GetHashCode() ^ 
					this.TitleId.GetHashCode() ^ 
					((this.AddressLine == null) ? string.Empty : this.AddressLine.ToString()).GetHashCode() ^ 
					((this.ProvinceId == null) ? string.Empty : this.ProvinceId.ToString()).GetHashCode() ^ 
					((this.TownId == null) ? string.Empty : this.TownId.ToString()).GetHashCode() ^ 
					((this.NeighborhoodId == null) ? string.Empty : this.NeighborhoodId.ToString()).GetHashCode() ^ 
					((this.StreetId == null) ? string.Empty : this.StreetId.ToString()).GetHashCode() ^ 
					((this.Phone1 == null) ? string.Empty : this.Phone1.ToString()).GetHashCode() ^ 
					((this.Phone2 == null) ? string.Empty : this.Phone2.ToString()).GetHashCode() ^ 
					((this.Mobile == null) ? string.Empty : this.Mobile.ToString()).GetHashCode() ^ 
					this.IsUsed.GetHashCode() ^ 
					this.CreateOn.GetHashCode() ^ 
					((this.UpdateOn == null) ? string.Empty : this.UpdateOn.ToString()).GetHashCode() ^ 
					this.UserId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ClientAddressBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ClientAddressBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ClientAddressBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ClientAddressBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ClientAddressBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ClientAddressBase Object1, ClientAddressBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AddressId != Object2.AddressId)
				equal = false;
			if (Object1.TitleId != Object2.TitleId)
				equal = false;
			if ( Object1.AddressLine != null && Object2.AddressLine != null )
			{
				if (Object1.AddressLine != Object2.AddressLine)
					equal = false;
			}
			else if (Object1.AddressLine == null ^ Object2.AddressLine == null )
			{
				equal = false;
			}
			if ( Object1.ProvinceId != null && Object2.ProvinceId != null )
			{
				if (Object1.ProvinceId != Object2.ProvinceId)
					equal = false;
			}
			else if (Object1.ProvinceId == null ^ Object2.ProvinceId == null )
			{
				equal = false;
			}
			if ( Object1.TownId != null && Object2.TownId != null )
			{
				if (Object1.TownId != Object2.TownId)
					equal = false;
			}
			else if (Object1.TownId == null ^ Object2.TownId == null )
			{
				equal = false;
			}
			if ( Object1.NeighborhoodId != null && Object2.NeighborhoodId != null )
			{
				if (Object1.NeighborhoodId != Object2.NeighborhoodId)
					equal = false;
			}
			else if (Object1.NeighborhoodId == null ^ Object2.NeighborhoodId == null )
			{
				equal = false;
			}
			if ( Object1.StreetId != null && Object2.StreetId != null )
			{
				if (Object1.StreetId != Object2.StreetId)
					equal = false;
			}
			else if (Object1.StreetId == null ^ Object2.StreetId == null )
			{
				equal = false;
			}
			if ( Object1.Phone1 != null && Object2.Phone1 != null )
			{
				if (Object1.Phone1 != Object2.Phone1)
					equal = false;
			}
			else if (Object1.Phone1 == null ^ Object2.Phone1 == null )
			{
				equal = false;
			}
			if ( Object1.Phone2 != null && Object2.Phone2 != null )
			{
				if (Object1.Phone2 != Object2.Phone2)
					equal = false;
			}
			else if (Object1.Phone2 == null ^ Object2.Phone2 == null )
			{
				equal = false;
			}
			if ( Object1.Mobile != null && Object2.Mobile != null )
			{
				if (Object1.Mobile != Object2.Mobile)
					equal = false;
			}
			else if (Object1.Mobile == null ^ Object2.Mobile == null )
			{
				equal = false;
			}
			if (Object1.IsUsed != Object2.IsUsed)
				equal = false;
			if (Object1.CreateOn != Object2.CreateOn)
				equal = false;
			if ( Object1.UpdateOn != null && Object2.UpdateOn != null )
			{
				if (Object1.UpdateOn != Object2.UpdateOn)
					equal = false;
			}
			else if (Object1.UpdateOn == null ^ Object2.UpdateOn == null )
			{
				equal = false;
			}
			if (Object1.UserId != Object2.UserId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ClientAddressBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ClientAddressComparer GetComparer()
        {
            return new ClientAddressComparer();
        }
        */

        // Comparer delegates back to ClientAddress
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ClientAddress rhs, ClientAddressColumn which)
        {
            switch (which)
            {
            	
            	
            	case ClientAddressColumn.AddressId:
            		return this.AddressId.CompareTo(rhs.AddressId);
            		
            		                 
            	
            	
            	case ClientAddressColumn.TitleId:
            		return this.TitleId.CompareTo(rhs.TitleId);
            		
            		                 
            	
            	
            	case ClientAddressColumn.AddressLine:
            		return this.AddressLine.CompareTo(rhs.AddressLine);
            		
            		                 
            	
            	
            	case ClientAddressColumn.ProvinceId:
            		return this.ProvinceId.Value.CompareTo(rhs.ProvinceId.Value);
            		
            		                 
            	
            	
            	case ClientAddressColumn.TownId:
            		return this.TownId.Value.CompareTo(rhs.TownId.Value);
            		
            		                 
            	
            	
            	case ClientAddressColumn.NeighborhoodId:
            		return this.NeighborhoodId.Value.CompareTo(rhs.NeighborhoodId.Value);
            		
            		                 
            	
            	
            	case ClientAddressColumn.StreetId:
            		return this.StreetId.Value.CompareTo(rhs.StreetId.Value);
            		
            		                 
            	
            	
            	case ClientAddressColumn.Phone1:
            		return this.Phone1.CompareTo(rhs.Phone1);
            		
            		                 
            	
            	
            	case ClientAddressColumn.Phone2:
            		return this.Phone2.CompareTo(rhs.Phone2);
            		
            		                 
            	
            	
            	case ClientAddressColumn.Mobile:
            		return this.Mobile.CompareTo(rhs.Mobile);
            		
            		                 
            	
            	
            	case ClientAddressColumn.IsUsed:
            		return this.IsUsed.CompareTo(rhs.IsUsed);
            		
            		                 
            	
            	
            	case ClientAddressColumn.CreateOn:
            		return this.CreateOn.CompareTo(rhs.CreateOn);
            		
            		                 
            	
            	
            	case ClientAddressColumn.UpdateOn:
            		return this.UpdateOn.Value.CompareTo(rhs.UpdateOn.Value);
            		
            		                 
            	
            	
            	case ClientAddressColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ClientAddressKey> Members
		
		// member variable for the EntityId property
		private ClientAddressKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ClientAddressKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ClientAddressKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ClientAddress")
					.Append("|").Append( this.AddressId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- AddressId: {0}{14}- TitleId: {1}{14}- AddressLine: {2}{14}- ProvinceId: {3}{14}- TownId: {4}{14}- NeighborhoodId: {5}{14}- StreetId: {6}{14}- Phone1: {7}{14}- Phone2: {8}{14}- Mobile: {9}{14}- IsUsed: {10}{14}- CreateOn: {11}{14}- UpdateOn: {12}{14}- UserId: {13}{14}{16}", 
				this.AddressId,
				this.TitleId,
				(this.AddressLine == null) ? string.Empty : this.AddressLine.ToString(),
				(this.ProvinceId == null) ? string.Empty : this.ProvinceId.ToString(),
				(this.TownId == null) ? string.Empty : this.TownId.ToString(),
				(this.NeighborhoodId == null) ? string.Empty : this.NeighborhoodId.ToString(),
				(this.StreetId == null) ? string.Empty : this.StreetId.ToString(),
				(this.Phone1 == null) ? string.Empty : this.Phone1.ToString(),
				(this.Phone2 == null) ? string.Empty : this.Phone2.ToString(),
				(this.Mobile == null) ? string.Empty : this.Mobile.ToString(),
				this.IsUsed,
				this.CreateOn,
				(this.UpdateOn == null) ? string.Empty : this.UpdateOn.ToString(),
				this.UserId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ClientAddress' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	internal protected class ClientAddressEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// AddressId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ClientAddress"</remarks>
		[DataMember]
		public System.Int32 AddressId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// TitleId : 
		/// </summary>
		[DataMember]
		public System.Byte TitleId = (byte)0;
		
		/// <summary>
		/// AddressLine : 
		/// </summary>
		[DataMember]
		public System.String AddressLine = null;
		
		/// <summary>
		/// ProvinceId : 
		/// </summary>
		[DataMember]
		public System.Int32? ProvinceId = null;
		
		/// <summary>
		/// TownId : 
		/// </summary>
		[DataMember]
		public System.Int32? TownId = null;
		
		/// <summary>
		/// NeighborhoodId : 
		/// </summary>
		[DataMember]
		public System.Int32? NeighborhoodId = null;
		
		/// <summary>
		/// StreetId : 
		/// </summary>
		[DataMember]
		public System.Int32? StreetId = null;
		
		/// <summary>
		/// Phone1 : 
		/// </summary>
		[DataMember]
		public System.String Phone1 = null;
		
		/// <summary>
		/// Phone2 : 
		/// </summary>
		[DataMember]
		public System.String Phone2 = null;
		
		/// <summary>
		/// Mobile : 
		/// </summary>
		[DataMember]
		public System.String Mobile = null;
		
		/// <summary>
		/// IsUsed : 
		/// </summary>
		[DataMember]
		public System.Boolean IsUsed = false;
		
		/// <summary>
		/// CreateOn : 
		/// </summary>
		[DataMember]
		public System.DateTime CreateOn = DateTime.Now;
		
		/// <summary>
		/// UpdateOn : 
		/// </summary>
		[DataMember]
		public System.DateTime? UpdateOn = null;
		
		/// <summary>
		/// UserId : 
		/// </summary>
		[DataMember]
		public System.Int32 UserId = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region ClientCollection
		
		private TList<Client> _clientAddressId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _clientAddressId
		/// </summary>
		[DataMember]
		public TList<Client> ClientCollection
		{
			get
			{
				if (_clientAddressId == null)
				{
				_clientAddressId = new TList<Client>();
				}
	
				return _clientAddressId;
			}
			set { _clientAddressId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ClientAddressEntityData _tmp = new ClientAddressEntityData();
						
			_tmp.AddressId = this.AddressId;
			
			_tmp.TitleId = this.TitleId;
			_tmp.AddressLine = this.AddressLine;
			_tmp.ProvinceId = this.ProvinceId;
			_tmp.TownId = this.TownId;
			_tmp.NeighborhoodId = this.NeighborhoodId;
			_tmp.StreetId = this.StreetId;
			_tmp.Phone1 = this.Phone1;
			_tmp.Phone2 = this.Phone2;
			_tmp.Mobile = this.Mobile;
			_tmp.IsUsed = this.IsUsed;
			_tmp.CreateOn = this.CreateOn;
			_tmp.UpdateOn = this.UpdateOn;
			_tmp.UserId = this.UserId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._clientAddressId != null)
				_tmp.ClientCollection = (TList<Client>) MakeCopyOf(this.ClientCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ClientAddressEntityData _tmp = new ClientAddressEntityData();
						
			_tmp.AddressId = this.AddressId;
			
			_tmp.TitleId = this.TitleId;
			_tmp.AddressLine = this.AddressLine;
			_tmp.ProvinceId = this.ProvinceId;
			_tmp.TownId = this.TownId;
			_tmp.NeighborhoodId = this.NeighborhoodId;
			_tmp.StreetId = this.StreetId;
			_tmp.Phone1 = this.Phone1;
			_tmp.Phone2 = this.Phone2;
			_tmp.Mobile = this.Mobile;
			_tmp.IsUsed = this.IsUsed;
			_tmp.CreateOn = this.CreateOn;
			_tmp.UpdateOn = this.UpdateOn;
			_tmp.UserId = this.UserId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ClientCollection = (TList<Client>) MakeCopyOf(this.ClientCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		[DataMember]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new ClientAddressEntityData();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientAddressColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ClientAddressColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientAddressColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ClientAddressColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientAddressColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ClientAddressColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ClientAddressEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ClientAddressEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientAddressColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ClientAddressColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ClientAddressEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ClientAddressEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ClientAddressEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ClientAddress"/> object.
	/// </remarks>
	public class ClientAddressEventArgs : System.EventArgs
	{
		private ClientAddressColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ClientAddressEventArgs class.
		///</summary>
		public ClientAddressEventArgs(ClientAddressColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ClientAddressEventArgs class.
		///</summary>
		public ClientAddressEventArgs(ClientAddressColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ClientAddressColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ClientAddressColumn" />
		public ClientAddressColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ClientAddress related events.
	///</summary>
	public delegate void ClientAddressEventHandler(object sender, ClientAddressEventArgs e);
	
	#region ClientAddressComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ClientAddressComparer : System.Collections.Generic.IComparer<ClientAddress>
	{
		ClientAddressColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ClientAddressComparer"/> class.
        /// </summary>
		public ClientAddressComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ClientAddressComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ClientAddressComparer(ClientAddressColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ClientAddress"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ClientAddress"/> to compare.</param>
        /// <param name="b">The second <c>ClientAddress</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ClientAddress a, ClientAddress b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ClientAddress entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ClientAddress a, ClientAddress b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ClientAddressColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ClientAddressKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ClientAddress"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ClientAddressKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ClientAddressKey class.
		/// </summary>
		public ClientAddressKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ClientAddressKey class.
		/// </summary>
		public ClientAddressKey(ClientAddressBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AddressId = entity.AddressId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ClientAddressKey class.
		/// </summary>
		public ClientAddressKey(System.Int32 _addressId)
		{
			#region Init Properties

			this.AddressId = _addressId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ClientAddressBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ClientAddressBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AddressId property
		private System.Int32 _addressId;
		
		/// <summary>
		/// Gets or sets the AddressId property.
		/// </summary>
		public System.Int32 AddressId
		{
			get { return _addressId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AddressId = value;
				
				_addressId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AddressId = ( values["AddressId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["AddressId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AddressId", AddressId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AddressId: {0}{1}",
								AddressId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ClientAddressColumn Enum
	
	/// <summary>
	/// Enumerate the ClientAddress columns.
	/// </summary>
	[Serializable]
	public enum ClientAddressColumn : int
	{
		/// <summary>
		/// AddressId : 
		/// </summary>
		[EnumTextValue("Address Id")]
		[ColumnEnum("AddressId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		AddressId = 1,
		/// <summary>
		/// TitleId : 
		/// </summary>
		[EnumTextValue("Title Id")]
		[ColumnEnum("TitleId", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		TitleId = 2,
		/// <summary>
		/// AddressLine : 
		/// </summary>
		[EnumTextValue("Address Line")]
		[ColumnEnum("AddressLine", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1000)]
		AddressLine = 3,
		/// <summary>
		/// ProvinceId : 
		/// </summary>
		[EnumTextValue("Province Id")]
		[ColumnEnum("ProvinceId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProvinceId = 4,
		/// <summary>
		/// TownId : 
		/// </summary>
		[EnumTextValue("Town Id")]
		[ColumnEnum("TownId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TownId = 5,
		/// <summary>
		/// NeighborhoodId : 
		/// </summary>
		[EnumTextValue("Neighborhood Id")]
		[ColumnEnum("NeighborhoodId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		NeighborhoodId = 6,
		/// <summary>
		/// StreetId : 
		/// </summary>
		[EnumTextValue("Street Id")]
		[ColumnEnum("StreetId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		StreetId = 7,
		/// <summary>
		/// Phone1 : 
		/// </summary>
		[EnumTextValue("Phone1")]
		[ColumnEnum("Phone1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Phone1 = 8,
		/// <summary>
		/// Phone2 : 
		/// </summary>
		[EnumTextValue("Phone2")]
		[ColumnEnum("Phone2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Phone2 = 9,
		/// <summary>
		/// Mobile : 
		/// </summary>
		[EnumTextValue("Mobile")]
		[ColumnEnum("Mobile", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Mobile = 10,
		/// <summary>
		/// IsUsed : 
		/// </summary>
		[EnumTextValue("Is Used")]
		[ColumnEnum("IsUsed", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsUsed = 11,
		/// <summary>
		/// CreateOn : 
		/// </summary>
		[EnumTextValue("Create On")]
		[ColumnEnum("CreateOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateOn = 12,
		/// <summary>
		/// UpdateOn : 
		/// </summary>
		[EnumTextValue("Update On")]
		[ColumnEnum("UpdateOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateOn = 13,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("User Id")]
		[ColumnEnum("UserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		UserId = 14
	}//End enum

	#endregion ClientAddressColumn Enum

} // end namespace
