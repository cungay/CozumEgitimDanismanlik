
/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 24 Ekim 2018 Çarşamba
	Important: Do not modify this file. Edit the file Wiscr.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Ekip.Framework.Entities.Validation;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'Wiscr' table. [No description found the database]	
	///</summary>
	[DataContract]
	[DataObject, CLSCompliant(true)]
	public abstract partial class WiscrBase : EntityBase, IWiscr, IEntityId<WiscrKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		[DataMember]
		private WiscrEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		[DataMember]
		private WiscrEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private WiscrEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		private TList<Wiscr> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		public event WiscrEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		public event WiscrEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="WiscrBase"/> instance.
		///</summary>
		public WiscrBase()
		{
			this.entityData = new WiscrEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="WiscrBase"/> instance.
		///</summary>
		///<param name="_generalRawScore"></param>
		///<param name="_generalStandartScore"></param>
		///<param name="_similarityRawScore"></param>
		///<param name="_similarityStandartScore"></param>
		///<param name="_arithmeticRawScore"></param>
		///<param name="_arithmeticStandartScore"></param>
		///<param name="_wordRawScore"></param>
		///<param name="_wordStandartScore"></param>
		///<param name="_judgingRawScore"></param>
		///<param name="_judgingStandartScore"></param>
		///<param name="_setOfNumbersRawScore"></param>
		///<param name="_setOfNumbersStandartScore"></param>
		///<param name="_ımageDefineRawScore"></param>
		///<param name="_ımageDefineStandartScore"></param>
		///<param name="_ımageEditingRawScore"></param>
		///<param name="_ımageEditingStandartScore"></param>
		///<param name="_cubesPatternRawScore"></param>
		///<param name="_cubesPatternStandartScore"></param>
		///<param name="_partsMergeRawScore"></param>
		///<param name="_partsMergeStandartScore"></param>
		///<param name="_passwordRawScore"></param>
		///<param name="_passwordStandartScore"></param>
		///<param name="_mazesRawScore"></param>
		///<param name="_mazesStandartScore"></param>
		///<param name="_totalVerbalScore"></param>
		///<param name="_totalPerformanceScore"></param>
		///<param name="_totalScore"></param>
		///<param name="_testDate"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_userId"></param>
		///<param name="_advisorId"></param>
		public WiscrBase(System.Int32? _generalRawScore, System.Int32? _generalStandartScore, System.Int32? _similarityRawScore, 
			System.Int32? _similarityStandartScore, System.Int32? _arithmeticRawScore, System.Int32? _arithmeticStandartScore, 
			System.Int32? _wordRawScore, System.Int32? _wordStandartScore, System.Int32? _judgingRawScore, System.Int32? _judgingStandartScore, 
			System.Int32? _setOfNumbersRawScore, System.Int32? _setOfNumbersStandartScore, System.Int32? _ımageDefineRawScore, 
			System.Int32? _ımageDefineStandartScore, System.Int32? _ımageEditingRawScore, System.Int32? _ımageEditingStandartScore, 
			System.String _cubesPatternRawScore, System.Int32? _cubesPatternStandartScore, System.Int32? _partsMergeRawScore, 
			System.Int32? _partsMergeStandartScore, System.Int32? _passwordRawScore, System.Int32? _passwordStandartScore, 
			System.Int32? _mazesRawScore, System.Int32? _mazesStandartScore, System.Int32? _totalVerbalScore, System.Int32? _totalPerformanceScore, 
			System.Int32? _totalScore, System.DateTime _testDate, System.DateTime _createDate, System.DateTime? _updateDate, 
			System.Int32 _userId, System.Int32? _advisorId)
		{
			this.entityData = new WiscrEntityData();
			this.backupData = null;

			this.GeneralRawScore = _generalRawScore;
			this.GeneralStandartScore = _generalStandartScore;
			this.SimilarityRawScore = _similarityRawScore;
			this.SimilarityStandartScore = _similarityStandartScore;
			this.ArithmeticRawScore = _arithmeticRawScore;
			this.ArithmeticStandartScore = _arithmeticStandartScore;
			this.WordRawScore = _wordRawScore;
			this.WordStandartScore = _wordStandartScore;
			this.JudgingRawScore = _judgingRawScore;
			this.JudgingStandartScore = _judgingStandartScore;
			this.SetOfNumbersRawScore = _setOfNumbersRawScore;
			this.SetOfNumbersStandartScore = _setOfNumbersStandartScore;
			this.ImageDefineRawScore = _ımageDefineRawScore;
			this.ImageDefineStandartScore = _ımageDefineStandartScore;
			this.ImageEditingRawScore = _ımageEditingRawScore;
			this.ImageEditingStandartScore = _ımageEditingStandartScore;
			this.CubesPatternRawScore = _cubesPatternRawScore;
			this.CubesPatternStandartScore = _cubesPatternStandartScore;
			this.PartsMergeRawScore = _partsMergeRawScore;
			this.PartsMergeStandartScore = _partsMergeStandartScore;
			this.PasswordRawScore = _passwordRawScore;
			this.PasswordStandartScore = _passwordStandartScore;
			this.MazesRawScore = _mazesRawScore;
			this.MazesStandartScore = _mazesStandartScore;
			this.TotalVerbalScore = _totalVerbalScore;
			this.TotalPerformanceScore = _totalPerformanceScore;
			this.TotalScore = _totalScore;
			this.TestDate = _testDate;
			this.CreateDate = _createDate;
			this.UpdateDate = _updateDate;
			this.UserId = _userId;
			this.AdvisorId = _advisorId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Wiscr"/> instance.
		///</summary>
		///<param name="_generalRawScore"></param>
		///<param name="_generalStandartScore"></param>
		///<param name="_similarityRawScore"></param>
		///<param name="_similarityStandartScore"></param>
		///<param name="_arithmeticRawScore"></param>
		///<param name="_arithmeticStandartScore"></param>
		///<param name="_wordRawScore"></param>
		///<param name="_wordStandartScore"></param>
		///<param name="_judgingRawScore"></param>
		///<param name="_judgingStandartScore"></param>
		///<param name="_setOfNumbersRawScore"></param>
		///<param name="_setOfNumbersStandartScore"></param>
		///<param name="_ımageDefineRawScore"></param>
		///<param name="_ımageDefineStandartScore"></param>
		///<param name="_ımageEditingRawScore"></param>
		///<param name="_ımageEditingStandartScore"></param>
		///<param name="_cubesPatternRawScore"></param>
		///<param name="_cubesPatternStandartScore"></param>
		///<param name="_partsMergeRawScore"></param>
		///<param name="_partsMergeStandartScore"></param>
		///<param name="_passwordRawScore"></param>
		///<param name="_passwordStandartScore"></param>
		///<param name="_mazesRawScore"></param>
		///<param name="_mazesStandartScore"></param>
		///<param name="_totalVerbalScore"></param>
		///<param name="_totalPerformanceScore"></param>
		///<param name="_totalScore"></param>
		///<param name="_testDate"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_userId"></param>
		///<param name="_advisorId"></param>
		public static Wiscr CreateWiscr(System.Int32? _generalRawScore, System.Int32? _generalStandartScore, System.Int32? _similarityRawScore, 
			System.Int32? _similarityStandartScore, System.Int32? _arithmeticRawScore, System.Int32? _arithmeticStandartScore, 
			System.Int32? _wordRawScore, System.Int32? _wordStandartScore, System.Int32? _judgingRawScore, System.Int32? _judgingStandartScore, 
			System.Int32? _setOfNumbersRawScore, System.Int32? _setOfNumbersStandartScore, System.Int32? _ımageDefineRawScore, 
			System.Int32? _ımageDefineStandartScore, System.Int32? _ımageEditingRawScore, System.Int32? _ımageEditingStandartScore, 
			System.String _cubesPatternRawScore, System.Int32? _cubesPatternStandartScore, System.Int32? _partsMergeRawScore, 
			System.Int32? _partsMergeStandartScore, System.Int32? _passwordRawScore, System.Int32? _passwordStandartScore, 
			System.Int32? _mazesRawScore, System.Int32? _mazesStandartScore, System.Int32? _totalVerbalScore, System.Int32? _totalPerformanceScore, 
			System.Int32? _totalScore, System.DateTime _testDate, System.DateTime _createDate, System.DateTime? _updateDate, 
			System.Int32 _userId, System.Int32? _advisorId)
		{
			Wiscr newWiscr = new Wiscr();
			newWiscr.GeneralRawScore = _generalRawScore;
			newWiscr.GeneralStandartScore = _generalStandartScore;
			newWiscr.SimilarityRawScore = _similarityRawScore;
			newWiscr.SimilarityStandartScore = _similarityStandartScore;
			newWiscr.ArithmeticRawScore = _arithmeticRawScore;
			newWiscr.ArithmeticStandartScore = _arithmeticStandartScore;
			newWiscr.WordRawScore = _wordRawScore;
			newWiscr.WordStandartScore = _wordStandartScore;
			newWiscr.JudgingRawScore = _judgingRawScore;
			newWiscr.JudgingStandartScore = _judgingStandartScore;
			newWiscr.SetOfNumbersRawScore = _setOfNumbersRawScore;
			newWiscr.SetOfNumbersStandartScore = _setOfNumbersStandartScore;
			newWiscr.ImageDefineRawScore = _ımageDefineRawScore;
			newWiscr.ImageDefineStandartScore = _ımageDefineStandartScore;
			newWiscr.ImageEditingRawScore = _ımageEditingRawScore;
			newWiscr.ImageEditingStandartScore = _ımageEditingStandartScore;
			newWiscr.CubesPatternRawScore = _cubesPatternRawScore;
			newWiscr.CubesPatternStandartScore = _cubesPatternStandartScore;
			newWiscr.PartsMergeRawScore = _partsMergeRawScore;
			newWiscr.PartsMergeStandartScore = _partsMergeStandartScore;
			newWiscr.PasswordRawScore = _passwordRawScore;
			newWiscr.PasswordStandartScore = _passwordStandartScore;
			newWiscr.MazesRawScore = _mazesRawScore;
			newWiscr.MazesStandartScore = _mazesStandartScore;
			newWiscr.TotalVerbalScore = _totalVerbalScore;
			newWiscr.TotalPerformanceScore = _totalPerformanceScore;
			newWiscr.TotalScore = _totalScore;
			newWiscr.TestDate = _testDate;
			newWiscr.CreateDate = _createDate;
			newWiscr.UpdateDate = _updateDate;
			newWiscr.UserId = _userId;
			newWiscr.AdvisorId = _advisorId;
			return newWiscr;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the WiscrId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 WiscrId
		{
			get
			{
				return this.entityData.WiscrId; 
			}
			
			set
			{
				if (this.entityData.WiscrId == value)
					return;
				
                OnPropertyChanging("WiscrId");                    
				OnColumnChanging(WiscrColumn.WiscrId, this.entityData.WiscrId);
				this.entityData.WiscrId = value;
				this.EntityId.WiscrId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.WiscrId, this.entityData.WiscrId);
				OnPropertyChanged("WiscrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GeneralRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GeneralRawScore
		{
			get
			{
				return this.entityData.GeneralRawScore; 
			}
			
			set
			{
				if (this.entityData.GeneralRawScore == value)
					return;
				
                OnPropertyChanging("GeneralRawScore");                    
				OnColumnChanging(WiscrColumn.GeneralRawScore, this.entityData.GeneralRawScore);
				this.entityData.GeneralRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.GeneralRawScore, this.entityData.GeneralRawScore);
				OnPropertyChanged("GeneralRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GeneralStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GeneralStandartScore
		{
			get
			{
				return this.entityData.GeneralStandartScore; 
			}
			
			set
			{
				if (this.entityData.GeneralStandartScore == value)
					return;
				
                OnPropertyChanging("GeneralStandartScore");                    
				OnColumnChanging(WiscrColumn.GeneralStandartScore, this.entityData.GeneralStandartScore);
				this.entityData.GeneralStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.GeneralStandartScore, this.entityData.GeneralStandartScore);
				OnPropertyChanged("GeneralStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SimilarityRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SimilarityRawScore
		{
			get
			{
				return this.entityData.SimilarityRawScore; 
			}
			
			set
			{
				if (this.entityData.SimilarityRawScore == value)
					return;
				
                OnPropertyChanging("SimilarityRawScore");                    
				OnColumnChanging(WiscrColumn.SimilarityRawScore, this.entityData.SimilarityRawScore);
				this.entityData.SimilarityRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.SimilarityRawScore, this.entityData.SimilarityRawScore);
				OnPropertyChanged("SimilarityRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SimilarityStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SimilarityStandartScore
		{
			get
			{
				return this.entityData.SimilarityStandartScore; 
			}
			
			set
			{
				if (this.entityData.SimilarityStandartScore == value)
					return;
				
                OnPropertyChanging("SimilarityStandartScore");                    
				OnColumnChanging(WiscrColumn.SimilarityStandartScore, this.entityData.SimilarityStandartScore);
				this.entityData.SimilarityStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.SimilarityStandartScore, this.entityData.SimilarityStandartScore);
				OnPropertyChanged("SimilarityStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ArithmeticRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ArithmeticRawScore
		{
			get
			{
				return this.entityData.ArithmeticRawScore; 
			}
			
			set
			{
				if (this.entityData.ArithmeticRawScore == value)
					return;
				
                OnPropertyChanging("ArithmeticRawScore");                    
				OnColumnChanging(WiscrColumn.ArithmeticRawScore, this.entityData.ArithmeticRawScore);
				this.entityData.ArithmeticRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.ArithmeticRawScore, this.entityData.ArithmeticRawScore);
				OnPropertyChanged("ArithmeticRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ArithmeticStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ArithmeticStandartScore
		{
			get
			{
				return this.entityData.ArithmeticStandartScore; 
			}
			
			set
			{
				if (this.entityData.ArithmeticStandartScore == value)
					return;
				
                OnPropertyChanging("ArithmeticStandartScore");                    
				OnColumnChanging(WiscrColumn.ArithmeticStandartScore, this.entityData.ArithmeticStandartScore);
				this.entityData.ArithmeticStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.ArithmeticStandartScore, this.entityData.ArithmeticStandartScore);
				OnPropertyChanged("ArithmeticStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WordRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? WordRawScore
		{
			get
			{
				return this.entityData.WordRawScore; 
			}
			
			set
			{
				if (this.entityData.WordRawScore == value)
					return;
				
                OnPropertyChanging("WordRawScore");                    
				OnColumnChanging(WiscrColumn.WordRawScore, this.entityData.WordRawScore);
				this.entityData.WordRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.WordRawScore, this.entityData.WordRawScore);
				OnPropertyChanged("WordRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WordStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? WordStandartScore
		{
			get
			{
				return this.entityData.WordStandartScore; 
			}
			
			set
			{
				if (this.entityData.WordStandartScore == value)
					return;
				
                OnPropertyChanging("WordStandartScore");                    
				OnColumnChanging(WiscrColumn.WordStandartScore, this.entityData.WordStandartScore);
				this.entityData.WordStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.WordStandartScore, this.entityData.WordStandartScore);
				OnPropertyChanged("WordStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JudgingRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? JudgingRawScore
		{
			get
			{
				return this.entityData.JudgingRawScore; 
			}
			
			set
			{
				if (this.entityData.JudgingRawScore == value)
					return;
				
                OnPropertyChanging("JudgingRawScore");                    
				OnColumnChanging(WiscrColumn.JudgingRawScore, this.entityData.JudgingRawScore);
				this.entityData.JudgingRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.JudgingRawScore, this.entityData.JudgingRawScore);
				OnPropertyChanged("JudgingRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JudgingStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? JudgingStandartScore
		{
			get
			{
				return this.entityData.JudgingStandartScore; 
			}
			
			set
			{
				if (this.entityData.JudgingStandartScore == value)
					return;
				
                OnPropertyChanging("JudgingStandartScore");                    
				OnColumnChanging(WiscrColumn.JudgingStandartScore, this.entityData.JudgingStandartScore);
				this.entityData.JudgingStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.JudgingStandartScore, this.entityData.JudgingStandartScore);
				OnPropertyChanged("JudgingStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SetOfNumbersRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SetOfNumbersRawScore
		{
			get
			{
				return this.entityData.SetOfNumbersRawScore; 
			}
			
			set
			{
				if (this.entityData.SetOfNumbersRawScore == value)
					return;
				
                OnPropertyChanging("SetOfNumbersRawScore");                    
				OnColumnChanging(WiscrColumn.SetOfNumbersRawScore, this.entityData.SetOfNumbersRawScore);
				this.entityData.SetOfNumbersRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.SetOfNumbersRawScore, this.entityData.SetOfNumbersRawScore);
				OnPropertyChanged("SetOfNumbersRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SetOfNumbersStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SetOfNumbersStandartScore
		{
			get
			{
				return this.entityData.SetOfNumbersStandartScore; 
			}
			
			set
			{
				if (this.entityData.SetOfNumbersStandartScore == value)
					return;
				
                OnPropertyChanging("SetOfNumbersStandartScore");                    
				OnColumnChanging(WiscrColumn.SetOfNumbersStandartScore, this.entityData.SetOfNumbersStandartScore);
				this.entityData.SetOfNumbersStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.SetOfNumbersStandartScore, this.entityData.SetOfNumbersStandartScore);
				OnPropertyChanged("SetOfNumbersStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImageDefineRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ImageDefineRawScore
		{
			get
			{
				return this.entityData.ImageDefineRawScore; 
			}
			
			set
			{
				if (this.entityData.ImageDefineRawScore == value)
					return;
				
                OnPropertyChanging("ImageDefineRawScore");                    
				OnColumnChanging(WiscrColumn.ImageDefineRawScore, this.entityData.ImageDefineRawScore);
				this.entityData.ImageDefineRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.ImageDefineRawScore, this.entityData.ImageDefineRawScore);
				OnPropertyChanged("ImageDefineRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImageDefineStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ImageDefineStandartScore
		{
			get
			{
				return this.entityData.ImageDefineStandartScore; 
			}
			
			set
			{
				if (this.entityData.ImageDefineStandartScore == value)
					return;
				
                OnPropertyChanging("ImageDefineStandartScore");                    
				OnColumnChanging(WiscrColumn.ImageDefineStandartScore, this.entityData.ImageDefineStandartScore);
				this.entityData.ImageDefineStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.ImageDefineStandartScore, this.entityData.ImageDefineStandartScore);
				OnPropertyChanged("ImageDefineStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImageEditingRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ImageEditingRawScore
		{
			get
			{
				return this.entityData.ImageEditingRawScore; 
			}
			
			set
			{
				if (this.entityData.ImageEditingRawScore == value)
					return;
				
                OnPropertyChanging("ImageEditingRawScore");                    
				OnColumnChanging(WiscrColumn.ImageEditingRawScore, this.entityData.ImageEditingRawScore);
				this.entityData.ImageEditingRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.ImageEditingRawScore, this.entityData.ImageEditingRawScore);
				OnPropertyChanged("ImageEditingRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImageEditingStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ImageEditingStandartScore
		{
			get
			{
				return this.entityData.ImageEditingStandartScore; 
			}
			
			set
			{
				if (this.entityData.ImageEditingStandartScore == value)
					return;
				
                OnPropertyChanging("ImageEditingStandartScore");                    
				OnColumnChanging(WiscrColumn.ImageEditingStandartScore, this.entityData.ImageEditingStandartScore);
				this.entityData.ImageEditingStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.ImageEditingStandartScore, this.entityData.ImageEditingStandartScore);
				OnPropertyChanged("ImageEditingStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CubesPatternRawScore property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String CubesPatternRawScore
		{
			get
			{
				return this.entityData.CubesPatternRawScore; 
			}
			
			set
			{
				if (this.entityData.CubesPatternRawScore == value)
					return;
				
                OnPropertyChanging("CubesPatternRawScore");                    
				OnColumnChanging(WiscrColumn.CubesPatternRawScore, this.entityData.CubesPatternRawScore);
				this.entityData.CubesPatternRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.CubesPatternRawScore, this.entityData.CubesPatternRawScore);
				OnPropertyChanged("CubesPatternRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CubesPatternStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CubesPatternStandartScore
		{
			get
			{
				return this.entityData.CubesPatternStandartScore; 
			}
			
			set
			{
				if (this.entityData.CubesPatternStandartScore == value)
					return;
				
                OnPropertyChanging("CubesPatternStandartScore");                    
				OnColumnChanging(WiscrColumn.CubesPatternStandartScore, this.entityData.CubesPatternStandartScore);
				this.entityData.CubesPatternStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.CubesPatternStandartScore, this.entityData.CubesPatternStandartScore);
				OnPropertyChanged("CubesPatternStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PartsMergeRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PartsMergeRawScore
		{
			get
			{
				return this.entityData.PartsMergeRawScore; 
			}
			
			set
			{
				if (this.entityData.PartsMergeRawScore == value)
					return;
				
                OnPropertyChanging("PartsMergeRawScore");                    
				OnColumnChanging(WiscrColumn.PartsMergeRawScore, this.entityData.PartsMergeRawScore);
				this.entityData.PartsMergeRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.PartsMergeRawScore, this.entityData.PartsMergeRawScore);
				OnPropertyChanged("PartsMergeRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PartsMergeStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PartsMergeStandartScore
		{
			get
			{
				return this.entityData.PartsMergeStandartScore; 
			}
			
			set
			{
				if (this.entityData.PartsMergeStandartScore == value)
					return;
				
                OnPropertyChanging("PartsMergeStandartScore");                    
				OnColumnChanging(WiscrColumn.PartsMergeStandartScore, this.entityData.PartsMergeStandartScore);
				this.entityData.PartsMergeStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.PartsMergeStandartScore, this.entityData.PartsMergeStandartScore);
				OnPropertyChanged("PartsMergeStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PasswordRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PasswordRawScore
		{
			get
			{
				return this.entityData.PasswordRawScore; 
			}
			
			set
			{
				if (this.entityData.PasswordRawScore == value)
					return;
				
                OnPropertyChanging("PasswordRawScore");                    
				OnColumnChanging(WiscrColumn.PasswordRawScore, this.entityData.PasswordRawScore);
				this.entityData.PasswordRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.PasswordRawScore, this.entityData.PasswordRawScore);
				OnPropertyChanged("PasswordRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PasswordStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PasswordStandartScore
		{
			get
			{
				return this.entityData.PasswordStandartScore; 
			}
			
			set
			{
				if (this.entityData.PasswordStandartScore == value)
					return;
				
                OnPropertyChanging("PasswordStandartScore");                    
				OnColumnChanging(WiscrColumn.PasswordStandartScore, this.entityData.PasswordStandartScore);
				this.entityData.PasswordStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.PasswordStandartScore, this.entityData.PasswordStandartScore);
				OnPropertyChanged("PasswordStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MazesRawScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MazesRawScore
		{
			get
			{
				return this.entityData.MazesRawScore; 
			}
			
			set
			{
				if (this.entityData.MazesRawScore == value)
					return;
				
                OnPropertyChanging("MazesRawScore");                    
				OnColumnChanging(WiscrColumn.MazesRawScore, this.entityData.MazesRawScore);
				this.entityData.MazesRawScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.MazesRawScore, this.entityData.MazesRawScore);
				OnPropertyChanged("MazesRawScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MazesStandartScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MazesStandartScore
		{
			get
			{
				return this.entityData.MazesStandartScore; 
			}
			
			set
			{
				if (this.entityData.MazesStandartScore == value)
					return;
				
                OnPropertyChanging("MazesStandartScore");                    
				OnColumnChanging(WiscrColumn.MazesStandartScore, this.entityData.MazesStandartScore);
				this.entityData.MazesStandartScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.MazesStandartScore, this.entityData.MazesStandartScore);
				OnPropertyChanged("MazesStandartScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalVerbalScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TotalVerbalScore
		{
			get
			{
				return this.entityData.TotalVerbalScore; 
			}
			
			set
			{
				if (this.entityData.TotalVerbalScore == value)
					return;
				
                OnPropertyChanging("TotalVerbalScore");                    
				OnColumnChanging(WiscrColumn.TotalVerbalScore, this.entityData.TotalVerbalScore);
				this.entityData.TotalVerbalScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.TotalVerbalScore, this.entityData.TotalVerbalScore);
				OnPropertyChanged("TotalVerbalScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalPerformanceScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TotalPerformanceScore
		{
			get
			{
				return this.entityData.TotalPerformanceScore; 
			}
			
			set
			{
				if (this.entityData.TotalPerformanceScore == value)
					return;
				
                OnPropertyChanging("TotalPerformanceScore");                    
				OnColumnChanging(WiscrColumn.TotalPerformanceScore, this.entityData.TotalPerformanceScore);
				this.entityData.TotalPerformanceScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.TotalPerformanceScore, this.entityData.TotalPerformanceScore);
				OnPropertyChanged("TotalPerformanceScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalScore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TotalScore
		{
			get
			{
				return this.entityData.TotalScore; 
			}
			
			set
			{
				if (this.entityData.TotalScore == value)
					return;
				
                OnPropertyChanging("TotalScore");                    
				OnColumnChanging(WiscrColumn.TotalScore, this.entityData.TotalScore);
				this.entityData.TotalScore = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.TotalScore, this.entityData.TotalScore);
				OnPropertyChanged("TotalScore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TestDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime TestDate
		{
			get
			{
				return this.entityData.TestDate; 
			}
			
			set
			{
				if (this.entityData.TestDate == value)
					return;
				
                OnPropertyChanging("TestDate");                    
				OnColumnChanging(WiscrColumn.TestDate, this.entityData.TestDate);
				this.entityData.TestDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.TestDate, this.entityData.TestDate);
				OnPropertyChanged("TestDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
				
                OnPropertyChanging("CreateDate");                    
				OnColumnChanging(WiscrColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
				
                OnPropertyChanging("UpdateDate");                    
				OnColumnChanging(WiscrColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
				
                OnPropertyChanging("UserId");                    
				OnColumnChanging(WiscrColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdvisorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AdvisorId
		{
			get
			{
				return this.entityData.AdvisorId; 
			}
			
			set
			{
				if (this.entityData.AdvisorId == value)
					return;
				
                OnPropertyChanging("AdvisorId");                    
				OnColumnChanging(WiscrColumn.AdvisorId, this.entityData.AdvisorId);
				this.entityData.AdvisorId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WiscrColumn.AdvisorId, this.entityData.AdvisorId);
				OnPropertyChanged("AdvisorId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Seance objects
		///	which are related to this object through the relation FK_Seance_Wiscr
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Seance> SeanceCollection
		{
			get { return entityData.SeanceCollection; }
			set { entityData.SeanceCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CubesPatternRawScore", "Cubes Pattern Raw Score", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Wiscr"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"WiscrID", "GeneralRawScore", "GeneralStandartScore", "SimilarityRawScore", "SimilarityStandartScore", "ArithmeticRawScore", "ArithmeticStandartScore", "WordRawScore", "WordStandartScore", "JudgingRawScore", "JudgingStandartScore", "SetOfNumbersRawScore", "SetOfNumbersStandartScore", "ImageDefineRawScore", "ImageDefineStandartScore", "ImageEditingRawScore", "ImageEditingStandartScore", "CubesPatternRawScore", "CubesPatternStandartScore", "PartsMergeRawScore", "PartsMergeStandartScore", "PasswordRawScore", "PasswordStandartScore", "MazesRawScore", "MazesStandartScore", "TotalVerbalScore", "TotalPerformanceScore", "TotalScore", "TestDate", "CreateDate", "UpdateDate", "UserID", "AdvisorID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as WiscrEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Wiscr) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Wiscr>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Wiscr);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Wiscr Entity 
		///</summary>
		protected virtual Wiscr Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Wiscr copy = new Wiscr();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.WiscrId = this.WiscrId;
				copy.GeneralRawScore = this.GeneralRawScore;
				copy.GeneralStandartScore = this.GeneralStandartScore;
				copy.SimilarityRawScore = this.SimilarityRawScore;
				copy.SimilarityStandartScore = this.SimilarityStandartScore;
				copy.ArithmeticRawScore = this.ArithmeticRawScore;
				copy.ArithmeticStandartScore = this.ArithmeticStandartScore;
				copy.WordRawScore = this.WordRawScore;
				copy.WordStandartScore = this.WordStandartScore;
				copy.JudgingRawScore = this.JudgingRawScore;
				copy.JudgingStandartScore = this.JudgingStandartScore;
				copy.SetOfNumbersRawScore = this.SetOfNumbersRawScore;
				copy.SetOfNumbersStandartScore = this.SetOfNumbersStandartScore;
				copy.ImageDefineRawScore = this.ImageDefineRawScore;
				copy.ImageDefineStandartScore = this.ImageDefineStandartScore;
				copy.ImageEditingRawScore = this.ImageEditingRawScore;
				copy.ImageEditingStandartScore = this.ImageEditingStandartScore;
				copy.CubesPatternRawScore = this.CubesPatternRawScore;
				copy.CubesPatternStandartScore = this.CubesPatternStandartScore;
				copy.PartsMergeRawScore = this.PartsMergeRawScore;
				copy.PartsMergeStandartScore = this.PartsMergeStandartScore;
				copy.PasswordRawScore = this.PasswordRawScore;
				copy.PasswordStandartScore = this.PasswordStandartScore;
				copy.MazesRawScore = this.MazesRawScore;
				copy.MazesStandartScore = this.MazesStandartScore;
				copy.TotalVerbalScore = this.TotalVerbalScore;
				copy.TotalPerformanceScore = this.TotalPerformanceScore;
				copy.TotalScore = this.TotalScore;
				copy.TestDate = this.TestDate;
				copy.CreateDate = this.CreateDate;
				copy.UpdateDate = this.UpdateDate;
				copy.UserId = this.UserId;
				copy.AdvisorId = this.AdvisorId;
			
		
			//deep copy nested objects
			copy.SeanceCollection = (TList<Seance>) MakeCopyOf(this.SeanceCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Wiscr Entity 
		///</summary>
		public virtual Wiscr Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Wiscr Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Wiscr DeepCopy()
		{
			return EntityHelper.Clone<Wiscr>(this as Wiscr);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as WiscrEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new WiscrEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as WiscrEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(WiscrColumn column)
		{
			switch(column)
			{
					case WiscrColumn.WiscrId:
					return entityData.WiscrId != _originalData.WiscrId;
					case WiscrColumn.GeneralRawScore:
					return entityData.GeneralRawScore != _originalData.GeneralRawScore;
					case WiscrColumn.GeneralStandartScore:
					return entityData.GeneralStandartScore != _originalData.GeneralStandartScore;
					case WiscrColumn.SimilarityRawScore:
					return entityData.SimilarityRawScore != _originalData.SimilarityRawScore;
					case WiscrColumn.SimilarityStandartScore:
					return entityData.SimilarityStandartScore != _originalData.SimilarityStandartScore;
					case WiscrColumn.ArithmeticRawScore:
					return entityData.ArithmeticRawScore != _originalData.ArithmeticRawScore;
					case WiscrColumn.ArithmeticStandartScore:
					return entityData.ArithmeticStandartScore != _originalData.ArithmeticStandartScore;
					case WiscrColumn.WordRawScore:
					return entityData.WordRawScore != _originalData.WordRawScore;
					case WiscrColumn.WordStandartScore:
					return entityData.WordStandartScore != _originalData.WordStandartScore;
					case WiscrColumn.JudgingRawScore:
					return entityData.JudgingRawScore != _originalData.JudgingRawScore;
					case WiscrColumn.JudgingStandartScore:
					return entityData.JudgingStandartScore != _originalData.JudgingStandartScore;
					case WiscrColumn.SetOfNumbersRawScore:
					return entityData.SetOfNumbersRawScore != _originalData.SetOfNumbersRawScore;
					case WiscrColumn.SetOfNumbersStandartScore:
					return entityData.SetOfNumbersStandartScore != _originalData.SetOfNumbersStandartScore;
					case WiscrColumn.ImageDefineRawScore:
					return entityData.ImageDefineRawScore != _originalData.ImageDefineRawScore;
					case WiscrColumn.ImageDefineStandartScore:
					return entityData.ImageDefineStandartScore != _originalData.ImageDefineStandartScore;
					case WiscrColumn.ImageEditingRawScore:
					return entityData.ImageEditingRawScore != _originalData.ImageEditingRawScore;
					case WiscrColumn.ImageEditingStandartScore:
					return entityData.ImageEditingStandartScore != _originalData.ImageEditingStandartScore;
					case WiscrColumn.CubesPatternRawScore:
					return entityData.CubesPatternRawScore != _originalData.CubesPatternRawScore;
					case WiscrColumn.CubesPatternStandartScore:
					return entityData.CubesPatternStandartScore != _originalData.CubesPatternStandartScore;
					case WiscrColumn.PartsMergeRawScore:
					return entityData.PartsMergeRawScore != _originalData.PartsMergeRawScore;
					case WiscrColumn.PartsMergeStandartScore:
					return entityData.PartsMergeStandartScore != _originalData.PartsMergeStandartScore;
					case WiscrColumn.PasswordRawScore:
					return entityData.PasswordRawScore != _originalData.PasswordRawScore;
					case WiscrColumn.PasswordStandartScore:
					return entityData.PasswordStandartScore != _originalData.PasswordStandartScore;
					case WiscrColumn.MazesRawScore:
					return entityData.MazesRawScore != _originalData.MazesRawScore;
					case WiscrColumn.MazesStandartScore:
					return entityData.MazesStandartScore != _originalData.MazesStandartScore;
					case WiscrColumn.TotalVerbalScore:
					return entityData.TotalVerbalScore != _originalData.TotalVerbalScore;
					case WiscrColumn.TotalPerformanceScore:
					return entityData.TotalPerformanceScore != _originalData.TotalPerformanceScore;
					case WiscrColumn.TotalScore:
					return entityData.TotalScore != _originalData.TotalScore;
					case WiscrColumn.TestDate:
					return entityData.TestDate != _originalData.TestDate;
					case WiscrColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case WiscrColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
					case WiscrColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case WiscrColumn.AdvisorId:
					return entityData.AdvisorId != _originalData.AdvisorId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< WiscrColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.WiscrId != _originalData.WiscrId;
			result = result || entityData.GeneralRawScore != _originalData.GeneralRawScore;
			result = result || entityData.GeneralStandartScore != _originalData.GeneralStandartScore;
			result = result || entityData.SimilarityRawScore != _originalData.SimilarityRawScore;
			result = result || entityData.SimilarityStandartScore != _originalData.SimilarityStandartScore;
			result = result || entityData.ArithmeticRawScore != _originalData.ArithmeticRawScore;
			result = result || entityData.ArithmeticStandartScore != _originalData.ArithmeticStandartScore;
			result = result || entityData.WordRawScore != _originalData.WordRawScore;
			result = result || entityData.WordStandartScore != _originalData.WordStandartScore;
			result = result || entityData.JudgingRawScore != _originalData.JudgingRawScore;
			result = result || entityData.JudgingStandartScore != _originalData.JudgingStandartScore;
			result = result || entityData.SetOfNumbersRawScore != _originalData.SetOfNumbersRawScore;
			result = result || entityData.SetOfNumbersStandartScore != _originalData.SetOfNumbersStandartScore;
			result = result || entityData.ImageDefineRawScore != _originalData.ImageDefineRawScore;
			result = result || entityData.ImageDefineStandartScore != _originalData.ImageDefineStandartScore;
			result = result || entityData.ImageEditingRawScore != _originalData.ImageEditingRawScore;
			result = result || entityData.ImageEditingStandartScore != _originalData.ImageEditingStandartScore;
			result = result || entityData.CubesPatternRawScore != _originalData.CubesPatternRawScore;
			result = result || entityData.CubesPatternStandartScore != _originalData.CubesPatternStandartScore;
			result = result || entityData.PartsMergeRawScore != _originalData.PartsMergeRawScore;
			result = result || entityData.PartsMergeStandartScore != _originalData.PartsMergeStandartScore;
			result = result || entityData.PasswordRawScore != _originalData.PasswordRawScore;
			result = result || entityData.PasswordStandartScore != _originalData.PasswordStandartScore;
			result = result || entityData.MazesRawScore != _originalData.MazesRawScore;
			result = result || entityData.MazesStandartScore != _originalData.MazesStandartScore;
			result = result || entityData.TotalVerbalScore != _originalData.TotalVerbalScore;
			result = result || entityData.TotalPerformanceScore != _originalData.TotalPerformanceScore;
			result = result || entityData.TotalScore != _originalData.TotalScore;
			result = result || entityData.TestDate != _originalData.TestDate;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.AdvisorId != _originalData.AdvisorId;
			return result;
		}	
		
		///<summary>
		///  Returns a Wiscr Entity with the original data.
		///</summary>
		public Wiscr GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateWiscr(
				_originalData.GeneralRawScore,
				_originalData.GeneralStandartScore,
				_originalData.SimilarityRawScore,
				_originalData.SimilarityStandartScore,
				_originalData.ArithmeticRawScore,
				_originalData.ArithmeticStandartScore,
				_originalData.WordRawScore,
				_originalData.WordStandartScore,
				_originalData.JudgingRawScore,
				_originalData.JudgingStandartScore,
				_originalData.SetOfNumbersRawScore,
				_originalData.SetOfNumbersStandartScore,
				_originalData.ImageDefineRawScore,
				_originalData.ImageDefineStandartScore,
				_originalData.ImageEditingRawScore,
				_originalData.ImageEditingStandartScore,
				_originalData.CubesPatternRawScore,
				_originalData.CubesPatternStandartScore,
				_originalData.PartsMergeRawScore,
				_originalData.PartsMergeStandartScore,
				_originalData.PasswordRawScore,
				_originalData.PasswordStandartScore,
				_originalData.MazesRawScore,
				_originalData.MazesStandartScore,
				_originalData.TotalVerbalScore,
				_originalData.TotalPerformanceScore,
				_originalData.TotalScore,
				_originalData.TestDate,
				_originalData.CreateDate,
				_originalData.UpdateDate,
				_originalData.UserId,
				_originalData.AdvisorId
				);
				
			return (Wiscr)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="WiscrBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is WiscrBase)
				return ValueEquals(this, (WiscrBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="WiscrBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.WiscrId.GetHashCode() ^ 
					((this.GeneralRawScore == null) ? string.Empty : this.GeneralRawScore.ToString()).GetHashCode() ^ 
					((this.GeneralStandartScore == null) ? string.Empty : this.GeneralStandartScore.ToString()).GetHashCode() ^ 
					((this.SimilarityRawScore == null) ? string.Empty : this.SimilarityRawScore.ToString()).GetHashCode() ^ 
					((this.SimilarityStandartScore == null) ? string.Empty : this.SimilarityStandartScore.ToString()).GetHashCode() ^ 
					((this.ArithmeticRawScore == null) ? string.Empty : this.ArithmeticRawScore.ToString()).GetHashCode() ^ 
					((this.ArithmeticStandartScore == null) ? string.Empty : this.ArithmeticStandartScore.ToString()).GetHashCode() ^ 
					((this.WordRawScore == null) ? string.Empty : this.WordRawScore.ToString()).GetHashCode() ^ 
					((this.WordStandartScore == null) ? string.Empty : this.WordStandartScore.ToString()).GetHashCode() ^ 
					((this.JudgingRawScore == null) ? string.Empty : this.JudgingRawScore.ToString()).GetHashCode() ^ 
					((this.JudgingStandartScore == null) ? string.Empty : this.JudgingStandartScore.ToString()).GetHashCode() ^ 
					((this.SetOfNumbersRawScore == null) ? string.Empty : this.SetOfNumbersRawScore.ToString()).GetHashCode() ^ 
					((this.SetOfNumbersStandartScore == null) ? string.Empty : this.SetOfNumbersStandartScore.ToString()).GetHashCode() ^ 
					((this.ImageDefineRawScore == null) ? string.Empty : this.ImageDefineRawScore.ToString()).GetHashCode() ^ 
					((this.ImageDefineStandartScore == null) ? string.Empty : this.ImageDefineStandartScore.ToString()).GetHashCode() ^ 
					((this.ImageEditingRawScore == null) ? string.Empty : this.ImageEditingRawScore.ToString()).GetHashCode() ^ 
					((this.ImageEditingStandartScore == null) ? string.Empty : this.ImageEditingStandartScore.ToString()).GetHashCode() ^ 
					((this.CubesPatternRawScore == null) ? string.Empty : this.CubesPatternRawScore.ToString()).GetHashCode() ^ 
					((this.CubesPatternStandartScore == null) ? string.Empty : this.CubesPatternStandartScore.ToString()).GetHashCode() ^ 
					((this.PartsMergeRawScore == null) ? string.Empty : this.PartsMergeRawScore.ToString()).GetHashCode() ^ 
					((this.PartsMergeStandartScore == null) ? string.Empty : this.PartsMergeStandartScore.ToString()).GetHashCode() ^ 
					((this.PasswordRawScore == null) ? string.Empty : this.PasswordRawScore.ToString()).GetHashCode() ^ 
					((this.PasswordStandartScore == null) ? string.Empty : this.PasswordStandartScore.ToString()).GetHashCode() ^ 
					((this.MazesRawScore == null) ? string.Empty : this.MazesRawScore.ToString()).GetHashCode() ^ 
					((this.MazesStandartScore == null) ? string.Empty : this.MazesStandartScore.ToString()).GetHashCode() ^ 
					((this.TotalVerbalScore == null) ? string.Empty : this.TotalVerbalScore.ToString()).GetHashCode() ^ 
					((this.TotalPerformanceScore == null) ? string.Empty : this.TotalPerformanceScore.ToString()).GetHashCode() ^ 
					((this.TotalScore == null) ? string.Empty : this.TotalScore.ToString()).GetHashCode() ^ 
					this.TestDate.GetHashCode() ^ 
					this.CreateDate.GetHashCode() ^ 
					((this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString()).GetHashCode() ^ 
					this.UserId.GetHashCode() ^ 
					((this.AdvisorId == null) ? string.Empty : this.AdvisorId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="WiscrBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(WiscrBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="WiscrBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="WiscrBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="WiscrBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(WiscrBase Object1, WiscrBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.WiscrId != Object2.WiscrId)
				equal = false;
			if ( Object1.GeneralRawScore != null && Object2.GeneralRawScore != null )
			{
				if (Object1.GeneralRawScore != Object2.GeneralRawScore)
					equal = false;
			}
			else if (Object1.GeneralRawScore == null ^ Object2.GeneralRawScore == null )
			{
				equal = false;
			}
			if ( Object1.GeneralStandartScore != null && Object2.GeneralStandartScore != null )
			{
				if (Object1.GeneralStandartScore != Object2.GeneralStandartScore)
					equal = false;
			}
			else if (Object1.GeneralStandartScore == null ^ Object2.GeneralStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.SimilarityRawScore != null && Object2.SimilarityRawScore != null )
			{
				if (Object1.SimilarityRawScore != Object2.SimilarityRawScore)
					equal = false;
			}
			else if (Object1.SimilarityRawScore == null ^ Object2.SimilarityRawScore == null )
			{
				equal = false;
			}
			if ( Object1.SimilarityStandartScore != null && Object2.SimilarityStandartScore != null )
			{
				if (Object1.SimilarityStandartScore != Object2.SimilarityStandartScore)
					equal = false;
			}
			else if (Object1.SimilarityStandartScore == null ^ Object2.SimilarityStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.ArithmeticRawScore != null && Object2.ArithmeticRawScore != null )
			{
				if (Object1.ArithmeticRawScore != Object2.ArithmeticRawScore)
					equal = false;
			}
			else if (Object1.ArithmeticRawScore == null ^ Object2.ArithmeticRawScore == null )
			{
				equal = false;
			}
			if ( Object1.ArithmeticStandartScore != null && Object2.ArithmeticStandartScore != null )
			{
				if (Object1.ArithmeticStandartScore != Object2.ArithmeticStandartScore)
					equal = false;
			}
			else if (Object1.ArithmeticStandartScore == null ^ Object2.ArithmeticStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.WordRawScore != null && Object2.WordRawScore != null )
			{
				if (Object1.WordRawScore != Object2.WordRawScore)
					equal = false;
			}
			else if (Object1.WordRawScore == null ^ Object2.WordRawScore == null )
			{
				equal = false;
			}
			if ( Object1.WordStandartScore != null && Object2.WordStandartScore != null )
			{
				if (Object1.WordStandartScore != Object2.WordStandartScore)
					equal = false;
			}
			else if (Object1.WordStandartScore == null ^ Object2.WordStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.JudgingRawScore != null && Object2.JudgingRawScore != null )
			{
				if (Object1.JudgingRawScore != Object2.JudgingRawScore)
					equal = false;
			}
			else if (Object1.JudgingRawScore == null ^ Object2.JudgingRawScore == null )
			{
				equal = false;
			}
			if ( Object1.JudgingStandartScore != null && Object2.JudgingStandartScore != null )
			{
				if (Object1.JudgingStandartScore != Object2.JudgingStandartScore)
					equal = false;
			}
			else if (Object1.JudgingStandartScore == null ^ Object2.JudgingStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.SetOfNumbersRawScore != null && Object2.SetOfNumbersRawScore != null )
			{
				if (Object1.SetOfNumbersRawScore != Object2.SetOfNumbersRawScore)
					equal = false;
			}
			else if (Object1.SetOfNumbersRawScore == null ^ Object2.SetOfNumbersRawScore == null )
			{
				equal = false;
			}
			if ( Object1.SetOfNumbersStandartScore != null && Object2.SetOfNumbersStandartScore != null )
			{
				if (Object1.SetOfNumbersStandartScore != Object2.SetOfNumbersStandartScore)
					equal = false;
			}
			else if (Object1.SetOfNumbersStandartScore == null ^ Object2.SetOfNumbersStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.ImageDefineRawScore != null && Object2.ImageDefineRawScore != null )
			{
				if (Object1.ImageDefineRawScore != Object2.ImageDefineRawScore)
					equal = false;
			}
			else if (Object1.ImageDefineRawScore == null ^ Object2.ImageDefineRawScore == null )
			{
				equal = false;
			}
			if ( Object1.ImageDefineStandartScore != null && Object2.ImageDefineStandartScore != null )
			{
				if (Object1.ImageDefineStandartScore != Object2.ImageDefineStandartScore)
					equal = false;
			}
			else if (Object1.ImageDefineStandartScore == null ^ Object2.ImageDefineStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.ImageEditingRawScore != null && Object2.ImageEditingRawScore != null )
			{
				if (Object1.ImageEditingRawScore != Object2.ImageEditingRawScore)
					equal = false;
			}
			else if (Object1.ImageEditingRawScore == null ^ Object2.ImageEditingRawScore == null )
			{
				equal = false;
			}
			if ( Object1.ImageEditingStandartScore != null && Object2.ImageEditingStandartScore != null )
			{
				if (Object1.ImageEditingStandartScore != Object2.ImageEditingStandartScore)
					equal = false;
			}
			else if (Object1.ImageEditingStandartScore == null ^ Object2.ImageEditingStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.CubesPatternRawScore != null && Object2.CubesPatternRawScore != null )
			{
				if (Object1.CubesPatternRawScore != Object2.CubesPatternRawScore)
					equal = false;
			}
			else if (Object1.CubesPatternRawScore == null ^ Object2.CubesPatternRawScore == null )
			{
				equal = false;
			}
			if ( Object1.CubesPatternStandartScore != null && Object2.CubesPatternStandartScore != null )
			{
				if (Object1.CubesPatternStandartScore != Object2.CubesPatternStandartScore)
					equal = false;
			}
			else if (Object1.CubesPatternStandartScore == null ^ Object2.CubesPatternStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.PartsMergeRawScore != null && Object2.PartsMergeRawScore != null )
			{
				if (Object1.PartsMergeRawScore != Object2.PartsMergeRawScore)
					equal = false;
			}
			else if (Object1.PartsMergeRawScore == null ^ Object2.PartsMergeRawScore == null )
			{
				equal = false;
			}
			if ( Object1.PartsMergeStandartScore != null && Object2.PartsMergeStandartScore != null )
			{
				if (Object1.PartsMergeStandartScore != Object2.PartsMergeStandartScore)
					equal = false;
			}
			else if (Object1.PartsMergeStandartScore == null ^ Object2.PartsMergeStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.PasswordRawScore != null && Object2.PasswordRawScore != null )
			{
				if (Object1.PasswordRawScore != Object2.PasswordRawScore)
					equal = false;
			}
			else if (Object1.PasswordRawScore == null ^ Object2.PasswordRawScore == null )
			{
				equal = false;
			}
			if ( Object1.PasswordStandartScore != null && Object2.PasswordStandartScore != null )
			{
				if (Object1.PasswordStandartScore != Object2.PasswordStandartScore)
					equal = false;
			}
			else if (Object1.PasswordStandartScore == null ^ Object2.PasswordStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.MazesRawScore != null && Object2.MazesRawScore != null )
			{
				if (Object1.MazesRawScore != Object2.MazesRawScore)
					equal = false;
			}
			else if (Object1.MazesRawScore == null ^ Object2.MazesRawScore == null )
			{
				equal = false;
			}
			if ( Object1.MazesStandartScore != null && Object2.MazesStandartScore != null )
			{
				if (Object1.MazesStandartScore != Object2.MazesStandartScore)
					equal = false;
			}
			else if (Object1.MazesStandartScore == null ^ Object2.MazesStandartScore == null )
			{
				equal = false;
			}
			if ( Object1.TotalVerbalScore != null && Object2.TotalVerbalScore != null )
			{
				if (Object1.TotalVerbalScore != Object2.TotalVerbalScore)
					equal = false;
			}
			else if (Object1.TotalVerbalScore == null ^ Object2.TotalVerbalScore == null )
			{
				equal = false;
			}
			if ( Object1.TotalPerformanceScore != null && Object2.TotalPerformanceScore != null )
			{
				if (Object1.TotalPerformanceScore != Object2.TotalPerformanceScore)
					equal = false;
			}
			else if (Object1.TotalPerformanceScore == null ^ Object2.TotalPerformanceScore == null )
			{
				equal = false;
			}
			if ( Object1.TotalScore != null && Object2.TotalScore != null )
			{
				if (Object1.TotalScore != Object2.TotalScore)
					equal = false;
			}
			else if (Object1.TotalScore == null ^ Object2.TotalScore == null )
			{
				equal = false;
			}
			if (Object1.TestDate != Object2.TestDate)
				equal = false;
			if (Object1.CreateDate != Object2.CreateDate)
				equal = false;
			if ( Object1.UpdateDate != null && Object2.UpdateDate != null )
			{
				if (Object1.UpdateDate != Object2.UpdateDate)
					equal = false;
			}
			else if (Object1.UpdateDate == null ^ Object2.UpdateDate == null )
			{
				equal = false;
			}
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if ( Object1.AdvisorId != null && Object2.AdvisorId != null )
			{
				if (Object1.AdvisorId != Object2.AdvisorId)
					equal = false;
			}
			else if (Object1.AdvisorId == null ^ Object2.AdvisorId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((WiscrBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static WiscrComparer GetComparer()
        {
            return new WiscrComparer();
        }
        */

        // Comparer delegates back to Wiscr
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Wiscr rhs, WiscrColumn which)
        {
            switch (which)
            {
            	
            	
            	case WiscrColumn.WiscrId:
            		return this.WiscrId.CompareTo(rhs.WiscrId);
            		
            		                 
            	
            	
            	case WiscrColumn.GeneralRawScore:
            		return this.GeneralRawScore.Value.CompareTo(rhs.GeneralRawScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.GeneralStandartScore:
            		return this.GeneralStandartScore.Value.CompareTo(rhs.GeneralStandartScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.SimilarityRawScore:
            		return this.SimilarityRawScore.Value.CompareTo(rhs.SimilarityRawScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.SimilarityStandartScore:
            		return this.SimilarityStandartScore.Value.CompareTo(rhs.SimilarityStandartScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.ArithmeticRawScore:
            		return this.ArithmeticRawScore.Value.CompareTo(rhs.ArithmeticRawScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.ArithmeticStandartScore:
            		return this.ArithmeticStandartScore.Value.CompareTo(rhs.ArithmeticStandartScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.WordRawScore:
            		return this.WordRawScore.Value.CompareTo(rhs.WordRawScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.WordStandartScore:
            		return this.WordStandartScore.Value.CompareTo(rhs.WordStandartScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.JudgingRawScore:
            		return this.JudgingRawScore.Value.CompareTo(rhs.JudgingRawScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.JudgingStandartScore:
            		return this.JudgingStandartScore.Value.CompareTo(rhs.JudgingStandartScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.SetOfNumbersRawScore:
            		return this.SetOfNumbersRawScore.Value.CompareTo(rhs.SetOfNumbersRawScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.SetOfNumbersStandartScore:
            		return this.SetOfNumbersStandartScore.Value.CompareTo(rhs.SetOfNumbersStandartScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.ImageDefineRawScore:
            		return this.ImageDefineRawScore.Value.CompareTo(rhs.ImageDefineRawScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.ImageDefineStandartScore:
            		return this.ImageDefineStandartScore.Value.CompareTo(rhs.ImageDefineStandartScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.ImageEditingRawScore:
            		return this.ImageEditingRawScore.Value.CompareTo(rhs.ImageEditingRawScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.ImageEditingStandartScore:
            		return this.ImageEditingStandartScore.Value.CompareTo(rhs.ImageEditingStandartScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.CubesPatternRawScore:
            		return this.CubesPatternRawScore.CompareTo(rhs.CubesPatternRawScore);
            		
            		                 
            	
            	
            	case WiscrColumn.CubesPatternStandartScore:
            		return this.CubesPatternStandartScore.Value.CompareTo(rhs.CubesPatternStandartScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.PartsMergeRawScore:
            		return this.PartsMergeRawScore.Value.CompareTo(rhs.PartsMergeRawScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.PartsMergeStandartScore:
            		return this.PartsMergeStandartScore.Value.CompareTo(rhs.PartsMergeStandartScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.PasswordRawScore:
            		return this.PasswordRawScore.Value.CompareTo(rhs.PasswordRawScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.PasswordStandartScore:
            		return this.PasswordStandartScore.Value.CompareTo(rhs.PasswordStandartScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.MazesRawScore:
            		return this.MazesRawScore.Value.CompareTo(rhs.MazesRawScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.MazesStandartScore:
            		return this.MazesStandartScore.Value.CompareTo(rhs.MazesStandartScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.TotalVerbalScore:
            		return this.TotalVerbalScore.Value.CompareTo(rhs.TotalVerbalScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.TotalPerformanceScore:
            		return this.TotalPerformanceScore.Value.CompareTo(rhs.TotalPerformanceScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.TotalScore:
            		return this.TotalScore.Value.CompareTo(rhs.TotalScore.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.TestDate:
            		return this.TestDate.CompareTo(rhs.TestDate);
            		
            		                 
            	
            	
            	case WiscrColumn.CreateDate:
            		return this.CreateDate.CompareTo(rhs.CreateDate);
            		
            		                 
            	
            	
            	case WiscrColumn.UpdateDate:
            		return this.UpdateDate.Value.CompareTo(rhs.UpdateDate.Value);
            		
            		                 
            	
            	
            	case WiscrColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            	
            	
            	case WiscrColumn.AdvisorId:
            		return this.AdvisorId.Value.CompareTo(rhs.AdvisorId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<WiscrKey> Members
		
		// member variable for the EntityId property
		private WiscrKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual WiscrKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new WiscrKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Wiscr")
					.Append("|").Append( this.WiscrId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{34}{33}- WiscrId: {0}{33}- GeneralRawScore: {1}{33}- GeneralStandartScore: {2}{33}- SimilarityRawScore: {3}{33}- SimilarityStandartScore: {4}{33}- ArithmeticRawScore: {5}{33}- ArithmeticStandartScore: {6}{33}- WordRawScore: {7}{33}- WordStandartScore: {8}{33}- JudgingRawScore: {9}{33}- JudgingStandartScore: {10}{33}- SetOfNumbersRawScore: {11}{33}- SetOfNumbersStandartScore: {12}{33}- ImageDefineRawScore: {13}{33}- ImageDefineStandartScore: {14}{33}- ImageEditingRawScore: {15}{33}- ImageEditingStandartScore: {16}{33}- CubesPatternRawScore: {17}{33}- CubesPatternStandartScore: {18}{33}- PartsMergeRawScore: {19}{33}- PartsMergeStandartScore: {20}{33}- PasswordRawScore: {21}{33}- PasswordStandartScore: {22}{33}- MazesRawScore: {23}{33}- MazesStandartScore: {24}{33}- TotalVerbalScore: {25}{33}- TotalPerformanceScore: {26}{33}- TotalScore: {27}{33}- TestDate: {28}{33}- CreateDate: {29}{33}- UpdateDate: {30}{33}- UserId: {31}{33}- AdvisorId: {32}{33}{35}", 
				this.WiscrId,
				(this.GeneralRawScore == null) ? string.Empty : this.GeneralRawScore.ToString(),
				(this.GeneralStandartScore == null) ? string.Empty : this.GeneralStandartScore.ToString(),
				(this.SimilarityRawScore == null) ? string.Empty : this.SimilarityRawScore.ToString(),
				(this.SimilarityStandartScore == null) ? string.Empty : this.SimilarityStandartScore.ToString(),
				(this.ArithmeticRawScore == null) ? string.Empty : this.ArithmeticRawScore.ToString(),
				(this.ArithmeticStandartScore == null) ? string.Empty : this.ArithmeticStandartScore.ToString(),
				(this.WordRawScore == null) ? string.Empty : this.WordRawScore.ToString(),
				(this.WordStandartScore == null) ? string.Empty : this.WordStandartScore.ToString(),
				(this.JudgingRawScore == null) ? string.Empty : this.JudgingRawScore.ToString(),
				(this.JudgingStandartScore == null) ? string.Empty : this.JudgingStandartScore.ToString(),
				(this.SetOfNumbersRawScore == null) ? string.Empty : this.SetOfNumbersRawScore.ToString(),
				(this.SetOfNumbersStandartScore == null) ? string.Empty : this.SetOfNumbersStandartScore.ToString(),
				(this.ImageDefineRawScore == null) ? string.Empty : this.ImageDefineRawScore.ToString(),
				(this.ImageDefineStandartScore == null) ? string.Empty : this.ImageDefineStandartScore.ToString(),
				(this.ImageEditingRawScore == null) ? string.Empty : this.ImageEditingRawScore.ToString(),
				(this.ImageEditingStandartScore == null) ? string.Empty : this.ImageEditingStandartScore.ToString(),
				(this.CubesPatternRawScore == null) ? string.Empty : this.CubesPatternRawScore.ToString(),
				(this.CubesPatternStandartScore == null) ? string.Empty : this.CubesPatternStandartScore.ToString(),
				(this.PartsMergeRawScore == null) ? string.Empty : this.PartsMergeRawScore.ToString(),
				(this.PartsMergeStandartScore == null) ? string.Empty : this.PartsMergeStandartScore.ToString(),
				(this.PasswordRawScore == null) ? string.Empty : this.PasswordRawScore.ToString(),
				(this.PasswordStandartScore == null) ? string.Empty : this.PasswordStandartScore.ToString(),
				(this.MazesRawScore == null) ? string.Empty : this.MazesRawScore.ToString(),
				(this.MazesStandartScore == null) ? string.Empty : this.MazesStandartScore.ToString(),
				(this.TotalVerbalScore == null) ? string.Empty : this.TotalVerbalScore.ToString(),
				(this.TotalPerformanceScore == null) ? string.Empty : this.TotalPerformanceScore.ToString(),
				(this.TotalScore == null) ? string.Empty : this.TotalScore.ToString(),
				this.TestDate,
				this.CreateDate,
				(this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString(),
				this.UserId,
				(this.AdvisorId == null) ? string.Empty : this.AdvisorId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Wiscr' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	internal protected class WiscrEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// WiscrID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Wiscr"</remarks>
		[DataMember]
		public System.Int32 WiscrId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// GeneralRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? GeneralRawScore = null;
		
		/// <summary>
		/// GeneralStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? GeneralStandartScore = null;
		
		/// <summary>
		/// SimilarityRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? SimilarityRawScore = null;
		
		/// <summary>
		/// SimilarityStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? SimilarityStandartScore = null;
		
		/// <summary>
		/// ArithmeticRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? ArithmeticRawScore = null;
		
		/// <summary>
		/// ArithmeticStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? ArithmeticStandartScore = null;
		
		/// <summary>
		/// WordRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? WordRawScore = null;
		
		/// <summary>
		/// WordStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? WordStandartScore = null;
		
		/// <summary>
		/// JudgingRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? JudgingRawScore = null;
		
		/// <summary>
		/// JudgingStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? JudgingStandartScore = null;
		
		/// <summary>
		/// SetOfNumbersRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? SetOfNumbersRawScore = null;
		
		/// <summary>
		/// SetOfNumbersStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? SetOfNumbersStandartScore = null;
		
		/// <summary>
		/// ImageDefineRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? ImageDefineRawScore = null;
		
		/// <summary>
		/// ImageDefineStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? ImageDefineStandartScore = null;
		
		/// <summary>
		/// ImageEditingRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? ImageEditingRawScore = null;
		
		/// <summary>
		/// ImageEditingStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? ImageEditingStandartScore = null;
		
		/// <summary>
		/// CubesPatternRawScore : 
		/// </summary>
		[DataMember]
		public System.String CubesPatternRawScore = null;
		
		/// <summary>
		/// CubesPatternStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? CubesPatternStandartScore = null;
		
		/// <summary>
		/// PartsMergeRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? PartsMergeRawScore = null;
		
		/// <summary>
		/// PartsMergeStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? PartsMergeStandartScore = null;
		
		/// <summary>
		/// PasswordRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? PasswordRawScore = null;
		
		/// <summary>
		/// PasswordStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? PasswordStandartScore = null;
		
		/// <summary>
		/// MazesRawScore : 
		/// </summary>
		[DataMember]
		public System.Int32? MazesRawScore = null;
		
		/// <summary>
		/// MazesStandartScore : 
		/// </summary>
		[DataMember]
		public System.Int32? MazesStandartScore = null;
		
		/// <summary>
		/// TotalVerbalScore : 
		/// </summary>
		[DataMember]
		public System.Int32? TotalVerbalScore = null;
		
		/// <summary>
		/// TotalPerformanceScore : 
		/// </summary>
		[DataMember]
		public System.Int32? TotalPerformanceScore = null;
		
		/// <summary>
		/// TotalScore : 
		/// </summary>
		[DataMember]
		public System.Int32? TotalScore = null;
		
		/// <summary>
		/// TestDate : 
		/// </summary>
		[DataMember]
		public System.DateTime TestDate = DateTime.MinValue;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime CreateDate = DateTime.MinValue;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[DataMember]
		public System.DateTime? UpdateDate = null;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		[DataMember]
		public System.Int32 UserId = (int)0;
		
		/// <summary>
		/// AdvisorID : 
		/// </summary>
		[DataMember]
		public System.Int32? AdvisorId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region SeanceCollection
		
		private TList<Seance> _seanceWiscrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seanceWiscrId
		/// </summary>
		[DataMember]
		public TList<Seance> SeanceCollection
		{
			get
			{
				if (_seanceWiscrId == null)
				{
				_seanceWiscrId = new TList<Seance>();
				}
	
				return _seanceWiscrId;
			}
			set { _seanceWiscrId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			WiscrEntityData _tmp = new WiscrEntityData();
						
			_tmp.WiscrId = this.WiscrId;
			
			_tmp.GeneralRawScore = this.GeneralRawScore;
			_tmp.GeneralStandartScore = this.GeneralStandartScore;
			_tmp.SimilarityRawScore = this.SimilarityRawScore;
			_tmp.SimilarityStandartScore = this.SimilarityStandartScore;
			_tmp.ArithmeticRawScore = this.ArithmeticRawScore;
			_tmp.ArithmeticStandartScore = this.ArithmeticStandartScore;
			_tmp.WordRawScore = this.WordRawScore;
			_tmp.WordStandartScore = this.WordStandartScore;
			_tmp.JudgingRawScore = this.JudgingRawScore;
			_tmp.JudgingStandartScore = this.JudgingStandartScore;
			_tmp.SetOfNumbersRawScore = this.SetOfNumbersRawScore;
			_tmp.SetOfNumbersStandartScore = this.SetOfNumbersStandartScore;
			_tmp.ImageDefineRawScore = this.ImageDefineRawScore;
			_tmp.ImageDefineStandartScore = this.ImageDefineStandartScore;
			_tmp.ImageEditingRawScore = this.ImageEditingRawScore;
			_tmp.ImageEditingStandartScore = this.ImageEditingStandartScore;
			_tmp.CubesPatternRawScore = this.CubesPatternRawScore;
			_tmp.CubesPatternStandartScore = this.CubesPatternStandartScore;
			_tmp.PartsMergeRawScore = this.PartsMergeRawScore;
			_tmp.PartsMergeStandartScore = this.PartsMergeStandartScore;
			_tmp.PasswordRawScore = this.PasswordRawScore;
			_tmp.PasswordStandartScore = this.PasswordStandartScore;
			_tmp.MazesRawScore = this.MazesRawScore;
			_tmp.MazesStandartScore = this.MazesStandartScore;
			_tmp.TotalVerbalScore = this.TotalVerbalScore;
			_tmp.TotalPerformanceScore = this.TotalPerformanceScore;
			_tmp.TotalScore = this.TotalScore;
			_tmp.TestDate = this.TestDate;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UserId = this.UserId;
			_tmp.AdvisorId = this.AdvisorId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._seanceWiscrId != null)
				_tmp.SeanceCollection = (TList<Seance>) MakeCopyOf(this.SeanceCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			WiscrEntityData _tmp = new WiscrEntityData();
						
			_tmp.WiscrId = this.WiscrId;
			
			_tmp.GeneralRawScore = this.GeneralRawScore;
			_tmp.GeneralStandartScore = this.GeneralStandartScore;
			_tmp.SimilarityRawScore = this.SimilarityRawScore;
			_tmp.SimilarityStandartScore = this.SimilarityStandartScore;
			_tmp.ArithmeticRawScore = this.ArithmeticRawScore;
			_tmp.ArithmeticStandartScore = this.ArithmeticStandartScore;
			_tmp.WordRawScore = this.WordRawScore;
			_tmp.WordStandartScore = this.WordStandartScore;
			_tmp.JudgingRawScore = this.JudgingRawScore;
			_tmp.JudgingStandartScore = this.JudgingStandartScore;
			_tmp.SetOfNumbersRawScore = this.SetOfNumbersRawScore;
			_tmp.SetOfNumbersStandartScore = this.SetOfNumbersStandartScore;
			_tmp.ImageDefineRawScore = this.ImageDefineRawScore;
			_tmp.ImageDefineStandartScore = this.ImageDefineStandartScore;
			_tmp.ImageEditingRawScore = this.ImageEditingRawScore;
			_tmp.ImageEditingStandartScore = this.ImageEditingStandartScore;
			_tmp.CubesPatternRawScore = this.CubesPatternRawScore;
			_tmp.CubesPatternStandartScore = this.CubesPatternStandartScore;
			_tmp.PartsMergeRawScore = this.PartsMergeRawScore;
			_tmp.PartsMergeStandartScore = this.PartsMergeStandartScore;
			_tmp.PasswordRawScore = this.PasswordRawScore;
			_tmp.PasswordStandartScore = this.PasswordStandartScore;
			_tmp.MazesRawScore = this.MazesRawScore;
			_tmp.MazesStandartScore = this.MazesStandartScore;
			_tmp.TotalVerbalScore = this.TotalVerbalScore;
			_tmp.TotalPerformanceScore = this.TotalPerformanceScore;
			_tmp.TotalScore = this.TotalScore;
			_tmp.TestDate = this.TestDate;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UserId = this.UserId;
			_tmp.AdvisorId = this.AdvisorId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SeanceCollection = (TList<Seance>) MakeCopyOf(this.SeanceCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		[DataMember]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new WiscrEntityData();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WiscrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(WiscrColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WiscrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(WiscrColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WiscrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(WiscrColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				WiscrEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new WiscrEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WiscrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(WiscrColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				WiscrEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new WiscrEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region WiscrEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Wiscr"/> object.
	/// </remarks>
	public class WiscrEventArgs : System.EventArgs
	{
		private WiscrColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the WiscrEventArgs class.
		///</summary>
		public WiscrEventArgs(WiscrColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the WiscrEventArgs class.
		///</summary>
		public WiscrEventArgs(WiscrColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The WiscrColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="WiscrColumn" />
		public WiscrColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Wiscr related events.
	///</summary>
	public delegate void WiscrEventHandler(object sender, WiscrEventArgs e);
	
	#region WiscrComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class WiscrComparer : System.Collections.Generic.IComparer<Wiscr>
	{
		WiscrColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:WiscrComparer"/> class.
        /// </summary>
		public WiscrComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:WiscrComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public WiscrComparer(WiscrColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Wiscr"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Wiscr"/> to compare.</param>
        /// <param name="b">The second <c>Wiscr</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Wiscr a, Wiscr b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Wiscr entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Wiscr a, Wiscr b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public WiscrColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region WiscrKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Wiscr"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class WiscrKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the WiscrKey class.
		/// </summary>
		public WiscrKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the WiscrKey class.
		/// </summary>
		public WiscrKey(WiscrBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.WiscrId = entity.WiscrId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the WiscrKey class.
		/// </summary>
		public WiscrKey(System.Int32 _wiscrId)
		{
			#region Init Properties

			this.WiscrId = _wiscrId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private WiscrBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public WiscrBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the WiscrId property
		private System.Int32 _wiscrId;
		
		/// <summary>
		/// Gets or sets the WiscrId property.
		/// </summary>
		public System.Int32 WiscrId
		{
			get { return _wiscrId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.WiscrId = value;
				
				_wiscrId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				WiscrId = ( values["WiscrId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["WiscrId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("WiscrId", WiscrId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("WiscrId: {0}{1}",
								WiscrId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region WiscrColumn Enum
	
	/// <summary>
	/// Enumerate the Wiscr columns.
	/// </summary>
	[Serializable]
	public enum WiscrColumn : int
	{
		/// <summary>
		/// WiscrId : 
		/// </summary>
		[EnumTextValue("Wiscr Id")]
		[ColumnEnum("WiscrID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		WiscrId = 1,
		/// <summary>
		/// GeneralRawScore : 
		/// </summary>
		[EnumTextValue("General Raw Score")]
		[ColumnEnum("GeneralRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GeneralRawScore = 2,
		/// <summary>
		/// GeneralStandartScore : 
		/// </summary>
		[EnumTextValue("General Standart Score")]
		[ColumnEnum("GeneralStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GeneralStandartScore = 3,
		/// <summary>
		/// SimilarityRawScore : 
		/// </summary>
		[EnumTextValue("Similarity Raw Score")]
		[ColumnEnum("SimilarityRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SimilarityRawScore = 4,
		/// <summary>
		/// SimilarityStandartScore : 
		/// </summary>
		[EnumTextValue("Similarity Standart Score")]
		[ColumnEnum("SimilarityStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SimilarityStandartScore = 5,
		/// <summary>
		/// ArithmeticRawScore : 
		/// </summary>
		[EnumTextValue("Arithmetic Raw Score")]
		[ColumnEnum("ArithmeticRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ArithmeticRawScore = 6,
		/// <summary>
		/// ArithmeticStandartScore : 
		/// </summary>
		[EnumTextValue("Arithmetic Standart Score")]
		[ColumnEnum("ArithmeticStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ArithmeticStandartScore = 7,
		/// <summary>
		/// WordRawScore : 
		/// </summary>
		[EnumTextValue("Word Raw Score")]
		[ColumnEnum("WordRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WordRawScore = 8,
		/// <summary>
		/// WordStandartScore : 
		/// </summary>
		[EnumTextValue("Word Standart Score")]
		[ColumnEnum("WordStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WordStandartScore = 9,
		/// <summary>
		/// JudgingRawScore : 
		/// </summary>
		[EnumTextValue("Judging Raw Score")]
		[ColumnEnum("JudgingRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		JudgingRawScore = 10,
		/// <summary>
		/// JudgingStandartScore : 
		/// </summary>
		[EnumTextValue("Judging Standart Score")]
		[ColumnEnum("JudgingStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		JudgingStandartScore = 11,
		/// <summary>
		/// SetOfNumbersRawScore : 
		/// </summary>
		[EnumTextValue("Set Of Numbers Raw Score")]
		[ColumnEnum("SetOfNumbersRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SetOfNumbersRawScore = 12,
		/// <summary>
		/// SetOfNumbersStandartScore : 
		/// </summary>
		[EnumTextValue("Set Of Numbers Standart Score")]
		[ColumnEnum("SetOfNumbersStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SetOfNumbersStandartScore = 13,
		/// <summary>
		/// ImageDefineRawScore : 
		/// </summary>
		[EnumTextValue("Image Define Raw Score")]
		[ColumnEnum("ImageDefineRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ImageDefineRawScore = 14,
		/// <summary>
		/// ImageDefineStandartScore : 
		/// </summary>
		[EnumTextValue("Image Define Standart Score")]
		[ColumnEnum("ImageDefineStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ImageDefineStandartScore = 15,
		/// <summary>
		/// ImageEditingRawScore : 
		/// </summary>
		[EnumTextValue("Image Editing Raw Score")]
		[ColumnEnum("ImageEditingRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ImageEditingRawScore = 16,
		/// <summary>
		/// ImageEditingStandartScore : 
		/// </summary>
		[EnumTextValue("Image Editing Standart Score")]
		[ColumnEnum("ImageEditingStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ImageEditingStandartScore = 17,
		/// <summary>
		/// CubesPatternRawScore : 
		/// </summary>
		[EnumTextValue("Cubes Pattern Raw Score")]
		[ColumnEnum("CubesPatternRawScore", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 10)]
		CubesPatternRawScore = 18,
		/// <summary>
		/// CubesPatternStandartScore : 
		/// </summary>
		[EnumTextValue("Cubes Pattern Standart Score")]
		[ColumnEnum("CubesPatternStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CubesPatternStandartScore = 19,
		/// <summary>
		/// PartsMergeRawScore : 
		/// </summary>
		[EnumTextValue("Parts Merge Raw Score")]
		[ColumnEnum("PartsMergeRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PartsMergeRawScore = 20,
		/// <summary>
		/// PartsMergeStandartScore : 
		/// </summary>
		[EnumTextValue("Parts Merge Standart Score")]
		[ColumnEnum("PartsMergeStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PartsMergeStandartScore = 21,
		/// <summary>
		/// PasswordRawScore : 
		/// </summary>
		[EnumTextValue("Password Raw Score")]
		[ColumnEnum("PasswordRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PasswordRawScore = 22,
		/// <summary>
		/// PasswordStandartScore : 
		/// </summary>
		[EnumTextValue("Password Standart Score")]
		[ColumnEnum("PasswordStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PasswordStandartScore = 23,
		/// <summary>
		/// MazesRawScore : 
		/// </summary>
		[EnumTextValue("Mazes Raw Score")]
		[ColumnEnum("MazesRawScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MazesRawScore = 24,
		/// <summary>
		/// MazesStandartScore : 
		/// </summary>
		[EnumTextValue("Mazes Standart Score")]
		[ColumnEnum("MazesStandartScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MazesStandartScore = 25,
		/// <summary>
		/// TotalVerbalScore : 
		/// </summary>
		[EnumTextValue("Total Verbal Score")]
		[ColumnEnum("TotalVerbalScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotalVerbalScore = 26,
		/// <summary>
		/// TotalPerformanceScore : 
		/// </summary>
		[EnumTextValue("Total Performance Score")]
		[ColumnEnum("TotalPerformanceScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotalPerformanceScore = 27,
		/// <summary>
		/// TotalScore : 
		/// </summary>
		[EnumTextValue("Total Score")]
		[ColumnEnum("TotalScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotalScore = 28,
		/// <summary>
		/// TestDate : 
		/// </summary>
		[EnumTextValue("Test Date")]
		[ColumnEnum("TestDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		TestDate = 29,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("Create Date")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDate = 30,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("Update Date")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateDate = 31,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("User Id")]
		[ColumnEnum("UserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		UserId = 32,
		/// <summary>
		/// AdvisorId : 
		/// </summary>
		[EnumTextValue("Advisor Id")]
		[ColumnEnum("AdvisorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AdvisorId = 33
	}//End enum

	#endregion WiscrColumn Enum

} // end namespace
