/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 24 Ekim 2018 Çarşamba
	Important: Do not modify this file. Edit the file ClientView.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'ClientView' view. [No description found in the database]	
	///</summary>
	[DataContract]
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ClientViewBase")]
	public abstract partial class ClientViewBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// ClientID : 
		/// </summary>
		private System.Int32		  _clientId = (int)0;
		
		/// <summary>
		/// FileNumber : 
		/// </summary>
		private System.Int32		  _fileNumber = (int)0;
		
		/// <summary>
		/// FullName : 
		/// </summary>
		private System.String		  _fullName = string.Empty;
		
		/// <summary>
		/// MiddleName : 
		/// </summary>
		private System.String		  _middleName = null;
		
		/// <summary>
		/// Reference : 
		/// </summary>
		private System.String		  _reference = null;
		
		/// <summary>
		/// Pediatrician : 
		/// </summary>
		private System.String		  _pediatrician = null;
		
		/// <summary>
		/// Blood : 
		/// </summary>
		private System.Byte		  _blood = (byte)0;
		
		/// <summary>
		/// BirthDate : 
		/// </summary>
		private System.DateTime?		  _birthDate = null;
		
		/// <summary>
		/// FirstContactDate : 
		/// </summary>
		private System.DateTime?		  _firstContactDate = null;
		
		/// <summary>
		/// Gender : 
		/// </summary>
		private System.Byte		  _gender = (byte)0;
		
		/// <summary>
		/// IdCard : 
		/// </summary>
		private System.String		  _ıdCard = null;
		
		/// <summary>
		/// Age : 
		/// </summary>
		private System.Int32?		  _age = null;
		
		/// <summary>
		/// Mother : 
		/// </summary>
		private System.String		  _mother = null;
		
		/// <summary>
		/// MotherBusiness : 
		/// </summary>
		private System.String		  _motherBusiness = null;
		
		/// <summary>
		/// MotherEmail : 
		/// </summary>
		private System.String		  _motherEmail = null;
		
		/// <summary>
		/// MotherMobile : 
		/// </summary>
		private System.String		  _motherMobile = null;
		
		/// <summary>
		/// Father : 
		/// </summary>
		private System.String		  _father = null;
		
		/// <summary>
		/// FatherBusiness : 
		/// </summary>
		private System.String		  _fatherBusiness = null;
		
		/// <summary>
		/// FatherEmail : 
		/// </summary>
		private System.String		  _fatherEmail = null;
		
		/// <summary>
		/// FatherMobile : 
		/// </summary>
		private System.String		  _fatherMobile = null;
		
		/// <summary>
		/// AddressLine : 
		/// </summary>
		private System.String		  _addressLine = null;
		
		/// <summary>
		/// TitleId : 
		/// </summary>
		private System.Byte?		  _titleId = null;
		
		/// <summary>
		/// CityName : 
		/// </summary>
		private System.String		  _cityName = null;
		
		/// <summary>
		/// DistrictName : 
		/// </summary>
		private System.String		  _districtName = null;
		
		/// <summary>
		/// Region : 
		/// </summary>
		private System.String		  _region = null;
		
		/// <summary>
		/// CityID : 
		/// </summary>
		private System.Int32?		  _cityId = null;
		
		/// <summary>
		/// RegionID : 
		/// </summary>
		private System.Int32?		  _regionId = null;
		
		/// <summary>
		/// DistrictID : 
		/// </summary>
		private System.Int32?		  _districtId = null;
		
		/// <summary>
		/// AdvisorID : 
		/// </summary>
		private System.Int32?		  _advisorId = null;
		
		/// <summary>
		/// AdvisorName : 
		/// </summary>
		private System.String		  _advisorName = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ClientViewBase"/> instance.
		///</summary>
		public ClientViewBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ClientViewBase"/> instance.
		///</summary>
		///<param name="_clientId"></param>
		///<param name="_fileNumber"></param>
		///<param name="_fullName"></param>
		///<param name="_middleName"></param>
		///<param name="_reference"></param>
		///<param name="_pediatrician"></param>
		///<param name="_blood"></param>
		///<param name="_birthDate"></param>
		///<param name="_firstContactDate"></param>
		///<param name="_gender"></param>
		///<param name="_ıdCard"></param>
		///<param name="_age"></param>
		///<param name="_mother"></param>
		///<param name="_motherBusiness"></param>
		///<param name="_motherEmail"></param>
		///<param name="_motherMobile"></param>
		///<param name="_father"></param>
		///<param name="_fatherBusiness"></param>
		///<param name="_fatherEmail"></param>
		///<param name="_fatherMobile"></param>
		///<param name="_addressLine"></param>
		///<param name="_titleId"></param>
		///<param name="_cityName"></param>
		///<param name="_districtName"></param>
		///<param name="_region"></param>
		///<param name="_cityId"></param>
		///<param name="_regionId"></param>
		///<param name="_districtId"></param>
		///<param name="_advisorId"></param>
		///<param name="_advisorName"></param>
		public ClientViewBase(System.Int32 _clientId, System.Int32 _fileNumber, System.String _fullName, System.String _middleName, System.String _reference, System.String _pediatrician, System.Byte _blood, System.DateTime? _birthDate, System.DateTime? _firstContactDate, System.Byte _gender, System.String _ıdCard, System.Int32? _age, System.String _mother, System.String _motherBusiness, System.String _motherEmail, System.String _motherMobile, System.String _father, System.String _fatherBusiness, System.String _fatherEmail, System.String _fatherMobile, System.String _addressLine, System.Byte? _titleId, System.String _cityName, System.String _districtName, System.String _region, System.Int32? _cityId, System.Int32? _regionId, System.Int32? _districtId, System.Int32? _advisorId, System.String _advisorName)
		{
			this._clientId = _clientId;
			this._fileNumber = _fileNumber;
			this._fullName = _fullName;
			this._middleName = _middleName;
			this._reference = _reference;
			this._pediatrician = _pediatrician;
			this._blood = _blood;
			this._birthDate = _birthDate;
			this._firstContactDate = _firstContactDate;
			this._gender = _gender;
			this._ıdCard = _ıdCard;
			this._age = _age;
			this._mother = _mother;
			this._motherBusiness = _motherBusiness;
			this._motherEmail = _motherEmail;
			this._motherMobile = _motherMobile;
			this._father = _father;
			this._fatherBusiness = _fatherBusiness;
			this._fatherEmail = _fatherEmail;
			this._fatherMobile = _fatherMobile;
			this._addressLine = _addressLine;
			this._titleId = _titleId;
			this._cityName = _cityName;
			this._districtName = _districtName;
			this._region = _region;
			this._cityId = _cityId;
			this._regionId = _regionId;
			this._districtId = _districtId;
			this._advisorId = _advisorId;
			this._advisorName = _advisorName;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ClientView"/> instance.
		///</summary>
		///<param name="_clientId"></param>
		///<param name="_fileNumber"></param>
		///<param name="_fullName"></param>
		///<param name="_middleName"></param>
		///<param name="_reference"></param>
		///<param name="_pediatrician"></param>
		///<param name="_blood"></param>
		///<param name="_birthDate"></param>
		///<param name="_firstContactDate"></param>
		///<param name="_gender"></param>
		///<param name="_ıdCard"></param>
		///<param name="_age"></param>
		///<param name="_mother"></param>
		///<param name="_motherBusiness"></param>
		///<param name="_motherEmail"></param>
		///<param name="_motherMobile"></param>
		///<param name="_father"></param>
		///<param name="_fatherBusiness"></param>
		///<param name="_fatherEmail"></param>
		///<param name="_fatherMobile"></param>
		///<param name="_addressLine"></param>
		///<param name="_titleId"></param>
		///<param name="_cityName"></param>
		///<param name="_districtName"></param>
		///<param name="_region"></param>
		///<param name="_cityId"></param>
		///<param name="_regionId"></param>
		///<param name="_districtId"></param>
		///<param name="_advisorId"></param>
		///<param name="_advisorName"></param>
		public static ClientView CreateClientView(System.Int32 _clientId, System.Int32 _fileNumber, System.String _fullName, System.String _middleName, System.String _reference, System.String _pediatrician, System.Byte _blood, System.DateTime? _birthDate, System.DateTime? _firstContactDate, System.Byte _gender, System.String _ıdCard, System.Int32? _age, System.String _mother, System.String _motherBusiness, System.String _motherEmail, System.String _motherMobile, System.String _father, System.String _fatherBusiness, System.String _fatherEmail, System.String _fatherMobile, System.String _addressLine, System.Byte? _titleId, System.String _cityName, System.String _districtName, System.String _region, System.Int32? _cityId, System.Int32? _regionId, System.Int32? _districtId, System.Int32? _advisorId, System.String _advisorName)
		{
			ClientView newClientView = new ClientView();
			newClientView.ClientId = _clientId;
			newClientView.FileNumber = _fileNumber;
			newClientView.FullName = _fullName;
			newClientView.MiddleName = _middleName;
			newClientView.Reference = _reference;
			newClientView.Pediatrician = _pediatrician;
			newClientView.Blood = _blood;
			newClientView.BirthDate = _birthDate;
			newClientView.FirstContactDate = _firstContactDate;
			newClientView.Gender = _gender;
			newClientView.IdCard = _ıdCard;
			newClientView.Age = _age;
			newClientView.Mother = _mother;
			newClientView.MotherBusiness = _motherBusiness;
			newClientView.MotherEmail = _motherEmail;
			newClientView.MotherMobile = _motherMobile;
			newClientView.Father = _father;
			newClientView.FatherBusiness = _fatherBusiness;
			newClientView.FatherEmail = _fatherEmail;
			newClientView.FatherMobile = _fatherMobile;
			newClientView.AddressLine = _addressLine;
			newClientView.TitleId = _titleId;
			newClientView.CityName = _cityName;
			newClientView.DistrictName = _districtName;
			newClientView.Region = _region;
			newClientView.CityId = _cityId;
			newClientView.RegionId = _regionId;
			newClientView.DistrictId = _districtId;
			newClientView.AdvisorId = _advisorId;
			newClientView.AdvisorName = _advisorName;
			return newClientView;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the ClientID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 ClientId
		{
			get
			{
				return this._clientId; 
			}
			set
			{
				if (_clientId == value)
					return;
					
				this._clientId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ClientId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FileNumber property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 FileNumber
		{
			get
			{
				return this._fileNumber; 
			}
			set
			{
				if (_fileNumber == value)
					return;
					
				this._fileNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("FileNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FullName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FullName
		{
			get
			{
				return this._fullName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "FullName does not allow null values.");
				if (_fullName == value)
					return;
					
				this._fullName = value;
				this._isDirty = true;
				
				OnPropertyChanged("FullName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MiddleName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MiddleName
		{
			get
			{
				return this._middleName; 
			}
			set
			{
				if (_middleName == value)
					return;
					
				this._middleName = value;
				this._isDirty = true;
				
				OnPropertyChanged("MiddleName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Reference property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Reference
		{
			get
			{
				return this._reference; 
			}
			set
			{
				if (_reference == value)
					return;
					
				this._reference = value;
				this._isDirty = true;
				
				OnPropertyChanged("Reference");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Pediatrician property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Pediatrician
		{
			get
			{
				return this._pediatrician; 
			}
			set
			{
				if (_pediatrician == value)
					return;
					
				this._pediatrician = value;
				this._isDirty = true;
				
				OnPropertyChanged("Pediatrician");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Blood property. 
		///		
		/// </summary>
		/// <value>This type is tinyint</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Byte Blood
		{
			get
			{
				return this._blood; 
			}
			set
			{
				if (_blood == value)
					return;
					
				this._blood = value;
				this._isDirty = true;
				
				OnPropertyChanged("Blood");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BirthDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsBirthDateNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? BirthDate
		{
			get
			{
				return this._birthDate; 
			}
			set
			{
				if (_birthDate == value && BirthDate != null )
					return;
					
				this._birthDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("BirthDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FirstContactDate property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFirstContactDateNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? FirstContactDate
		{
			get
			{
				return this._firstContactDate; 
			}
			set
			{
				if (_firstContactDate == value && FirstContactDate != null )
					return;
					
				this._firstContactDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("FirstContactDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Gender property. 
		///		
		/// </summary>
		/// <value>This type is tinyint</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Byte Gender
		{
			get
			{
				return this._gender; 
			}
			set
			{
				if (_gender == value)
					return;
					
				this._gender = value;
				this._isDirty = true;
				
				OnPropertyChanged("Gender");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the IdCard property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String IdCard
		{
			get
			{
				return this._ıdCard; 
			}
			set
			{
				if (_ıdCard == value)
					return;
					
				this._ıdCard = value;
				this._isDirty = true;
				
				OnPropertyChanged("IdCard");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Age property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAgeNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Age
		{
			get
			{
				return this._age; 
			}
			set
			{
				if (_age == value && Age != null )
					return;
					
				this._age = value;
				this._isDirty = true;
				
				OnPropertyChanged("Age");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Mother property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Mother
		{
			get
			{
				return this._mother; 
			}
			set
			{
				if (_mother == value)
					return;
					
				this._mother = value;
				this._isDirty = true;
				
				OnPropertyChanged("Mother");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MotherBusiness property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MotherBusiness
		{
			get
			{
				return this._motherBusiness; 
			}
			set
			{
				if (_motherBusiness == value)
					return;
					
				this._motherBusiness = value;
				this._isDirty = true;
				
				OnPropertyChanged("MotherBusiness");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MotherEmail property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MotherEmail
		{
			get
			{
				return this._motherEmail; 
			}
			set
			{
				if (_motherEmail == value)
					return;
					
				this._motherEmail = value;
				this._isDirty = true;
				
				OnPropertyChanged("MotherEmail");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MotherMobile property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MotherMobile
		{
			get
			{
				return this._motherMobile; 
			}
			set
			{
				if (_motherMobile == value)
					return;
					
				this._motherMobile = value;
				this._isDirty = true;
				
				OnPropertyChanged("MotherMobile");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Father property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Father
		{
			get
			{
				return this._father; 
			}
			set
			{
				if (_father == value)
					return;
					
				this._father = value;
				this._isDirty = true;
				
				OnPropertyChanged("Father");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FatherBusiness property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FatherBusiness
		{
			get
			{
				return this._fatherBusiness; 
			}
			set
			{
				if (_fatherBusiness == value)
					return;
					
				this._fatherBusiness = value;
				this._isDirty = true;
				
				OnPropertyChanged("FatherBusiness");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FatherEmail property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FatherEmail
		{
			get
			{
				return this._fatherEmail; 
			}
			set
			{
				if (_fatherEmail == value)
					return;
					
				this._fatherEmail = value;
				this._isDirty = true;
				
				OnPropertyChanged("FatherEmail");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FatherMobile property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FatherMobile
		{
			get
			{
				return this._fatherMobile; 
			}
			set
			{
				if (_fatherMobile == value)
					return;
					
				this._fatherMobile = value;
				this._isDirty = true;
				
				OnPropertyChanged("FatherMobile");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AddressLine property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AddressLine
		{
			get
			{
				return this._addressLine; 
			}
			set
			{
				if (_addressLine == value)
					return;
					
				this._addressLine = value;
				this._isDirty = true;
				
				OnPropertyChanged("AddressLine");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TitleId property. 
		///		
		/// </summary>
		/// <value>This type is tinyint</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (byte)0. It is up to the developer
		/// to check the value of IsTitleIdNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Byte? TitleId
		{
			get
			{
				return this._titleId; 
			}
			set
			{
				if (_titleId == value && TitleId != null )
					return;
					
				this._titleId = value;
				this._isDirty = true;
				
				OnPropertyChanged("TitleId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CityName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CityName
		{
			get
			{
				return this._cityName; 
			}
			set
			{
				if (_cityName == value)
					return;
					
				this._cityName = value;
				this._isDirty = true;
				
				OnPropertyChanged("CityName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DistrictName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DistrictName
		{
			get
			{
				return this._districtName; 
			}
			set
			{
				if (_districtName == value)
					return;
					
				this._districtName = value;
				this._isDirty = true;
				
				OnPropertyChanged("DistrictName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Region property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Region
		{
			get
			{
				return this._region; 
			}
			set
			{
				if (_region == value)
					return;
					
				this._region = value;
				this._isDirty = true;
				
				OnPropertyChanged("Region");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CityID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCityIdNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? CityId
		{
			get
			{
				return this._cityId; 
			}
			set
			{
				if (_cityId == value && CityId != null )
					return;
					
				this._cityId = value;
				this._isDirty = true;
				
				OnPropertyChanged("CityId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RegionID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRegionIdNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? RegionId
		{
			get
			{
				return this._regionId; 
			}
			set
			{
				if (_regionId == value && RegionId != null )
					return;
					
				this._regionId = value;
				this._isDirty = true;
				
				OnPropertyChanged("RegionId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DistrictID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDistrictIdNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? DistrictId
		{
			get
			{
				return this._districtId; 
			}
			set
			{
				if (_districtId == value && DistrictId != null )
					return;
					
				this._districtId = value;
				this._isDirty = true;
				
				OnPropertyChanged("DistrictId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AdvisorID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAdvisorIdNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? AdvisorId
		{
			get
			{
				return this._advisorId; 
			}
			set
			{
				if (_advisorId == value && AdvisorId != null )
					return;
					
				this._advisorId = value;
				this._isDirty = true;
				
				OnPropertyChanged("AdvisorId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AdvisorName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AdvisorName
		{
			get
			{
				return this._advisorName; 
			}
			set
			{
				if (_advisorName == value)
					return;
					
				this._advisorName = value;
				this._isDirty = true;
				
				OnPropertyChanged("AdvisorName");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "ClientView"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ClientViewBase Entity 
		///</summary>
		public virtual ClientViewBase Copy()
		{
			//shallow copy entity
			ClientView copy = new ClientView();
				copy.ClientId = this.ClientId;
				copy.FileNumber = this.FileNumber;
				copy.FullName = this.FullName;
				copy.MiddleName = this.MiddleName;
				copy.Reference = this.Reference;
				copy.Pediatrician = this.Pediatrician;
				copy.Blood = this.Blood;
				copy.BirthDate = this.BirthDate;
				copy.FirstContactDate = this.FirstContactDate;
				copy.Gender = this.Gender;
				copy.IdCard = this.IdCard;
				copy.Age = this.Age;
				copy.Mother = this.Mother;
				copy.MotherBusiness = this.MotherBusiness;
				copy.MotherEmail = this.MotherEmail;
				copy.MotherMobile = this.MotherMobile;
				copy.Father = this.Father;
				copy.FatherBusiness = this.FatherBusiness;
				copy.FatherEmail = this.FatherEmail;
				copy.FatherMobile = this.FatherMobile;
				copy.AddressLine = this.AddressLine;
				copy.TitleId = this.TitleId;
				copy.CityName = this.CityName;
				copy.DistrictName = this.DistrictName;
				copy.Region = this.Region;
				copy.CityId = this.CityId;
				copy.RegionId = this.RegionId;
				copy.DistrictId = this.DistrictId;
				copy.AdvisorId = this.AdvisorId;
				copy.AdvisorName = this.AdvisorName;
			copy.AcceptChanges();
			return (ClientView)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ClientViewBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ClientViewBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ClientViewBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ClientViewBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ClientViewBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ClientViewBase Object1, ClientViewBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.ClientId != Object2.ClientId)
				equal = false;
			if (Object1.FileNumber != Object2.FileNumber)
				equal = false;
			if (Object1.FullName != Object2.FullName)
				equal = false;
			if (Object1.MiddleName != null && Object2.MiddleName != null )
			{
				if (Object1.MiddleName != Object2.MiddleName)
					equal = false;
			}
			else if (Object1.MiddleName == null ^ Object1.MiddleName == null )
			{
				equal = false;
			}
			if (Object1.Reference != null && Object2.Reference != null )
			{
				if (Object1.Reference != Object2.Reference)
					equal = false;
			}
			else if (Object1.Reference == null ^ Object1.Reference == null )
			{
				equal = false;
			}
			if (Object1.Pediatrician != null && Object2.Pediatrician != null )
			{
				if (Object1.Pediatrician != Object2.Pediatrician)
					equal = false;
			}
			else if (Object1.Pediatrician == null ^ Object1.Pediatrician == null )
			{
				equal = false;
			}
			if (Object1.Blood != Object2.Blood)
				equal = false;
			if (Object1.BirthDate != null && Object2.BirthDate != null )
			{
				if (Object1.BirthDate != Object2.BirthDate)
					equal = false;
			}
			else if (Object1.BirthDate == null ^ Object1.BirthDate == null )
			{
				equal = false;
			}
			if (Object1.FirstContactDate != null && Object2.FirstContactDate != null )
			{
				if (Object1.FirstContactDate != Object2.FirstContactDate)
					equal = false;
			}
			else if (Object1.FirstContactDate == null ^ Object1.FirstContactDate == null )
			{
				equal = false;
			}
			if (Object1.Gender != Object2.Gender)
				equal = false;
			if (Object1.IdCard != null && Object2.IdCard != null )
			{
				if (Object1.IdCard != Object2.IdCard)
					equal = false;
			}
			else if (Object1.IdCard == null ^ Object1.IdCard == null )
			{
				equal = false;
			}
			if (Object1.Age != null && Object2.Age != null )
			{
				if (Object1.Age != Object2.Age)
					equal = false;
			}
			else if (Object1.Age == null ^ Object1.Age == null )
			{
				equal = false;
			}
			if (Object1.Mother != null && Object2.Mother != null )
			{
				if (Object1.Mother != Object2.Mother)
					equal = false;
			}
			else if (Object1.Mother == null ^ Object1.Mother == null )
			{
				equal = false;
			}
			if (Object1.MotherBusiness != null && Object2.MotherBusiness != null )
			{
				if (Object1.MotherBusiness != Object2.MotherBusiness)
					equal = false;
			}
			else if (Object1.MotherBusiness == null ^ Object1.MotherBusiness == null )
			{
				equal = false;
			}
			if (Object1.MotherEmail != null && Object2.MotherEmail != null )
			{
				if (Object1.MotherEmail != Object2.MotherEmail)
					equal = false;
			}
			else if (Object1.MotherEmail == null ^ Object1.MotherEmail == null )
			{
				equal = false;
			}
			if (Object1.MotherMobile != null && Object2.MotherMobile != null )
			{
				if (Object1.MotherMobile != Object2.MotherMobile)
					equal = false;
			}
			else if (Object1.MotherMobile == null ^ Object1.MotherMobile == null )
			{
				equal = false;
			}
			if (Object1.Father != null && Object2.Father != null )
			{
				if (Object1.Father != Object2.Father)
					equal = false;
			}
			else if (Object1.Father == null ^ Object1.Father == null )
			{
				equal = false;
			}
			if (Object1.FatherBusiness != null && Object2.FatherBusiness != null )
			{
				if (Object1.FatherBusiness != Object2.FatherBusiness)
					equal = false;
			}
			else if (Object1.FatherBusiness == null ^ Object1.FatherBusiness == null )
			{
				equal = false;
			}
			if (Object1.FatherEmail != null && Object2.FatherEmail != null )
			{
				if (Object1.FatherEmail != Object2.FatherEmail)
					equal = false;
			}
			else if (Object1.FatherEmail == null ^ Object1.FatherEmail == null )
			{
				equal = false;
			}
			if (Object1.FatherMobile != null && Object2.FatherMobile != null )
			{
				if (Object1.FatherMobile != Object2.FatherMobile)
					equal = false;
			}
			else if (Object1.FatherMobile == null ^ Object1.FatherMobile == null )
			{
				equal = false;
			}
			if (Object1.AddressLine != null && Object2.AddressLine != null )
			{
				if (Object1.AddressLine != Object2.AddressLine)
					equal = false;
			}
			else if (Object1.AddressLine == null ^ Object1.AddressLine == null )
			{
				equal = false;
			}
			if (Object1.TitleId != null && Object2.TitleId != null )
			{
				if (Object1.TitleId != Object2.TitleId)
					equal = false;
			}
			else if (Object1.TitleId == null ^ Object1.TitleId == null )
			{
				equal = false;
			}
			if (Object1.CityName != null && Object2.CityName != null )
			{
				if (Object1.CityName != Object2.CityName)
					equal = false;
			}
			else if (Object1.CityName == null ^ Object1.CityName == null )
			{
				equal = false;
			}
			if (Object1.DistrictName != null && Object2.DistrictName != null )
			{
				if (Object1.DistrictName != Object2.DistrictName)
					equal = false;
			}
			else if (Object1.DistrictName == null ^ Object1.DistrictName == null )
			{
				equal = false;
			}
			if (Object1.Region != null && Object2.Region != null )
			{
				if (Object1.Region != Object2.Region)
					equal = false;
			}
			else if (Object1.Region == null ^ Object1.Region == null )
			{
				equal = false;
			}
			if (Object1.CityId != null && Object2.CityId != null )
			{
				if (Object1.CityId != Object2.CityId)
					equal = false;
			}
			else if (Object1.CityId == null ^ Object1.CityId == null )
			{
				equal = false;
			}
			if (Object1.RegionId != null && Object2.RegionId != null )
			{
				if (Object1.RegionId != Object2.RegionId)
					equal = false;
			}
			else if (Object1.RegionId == null ^ Object1.RegionId == null )
			{
				equal = false;
			}
			if (Object1.DistrictId != null && Object2.DistrictId != null )
			{
				if (Object1.DistrictId != Object2.DistrictId)
					equal = false;
			}
			else if (Object1.DistrictId == null ^ Object1.DistrictId == null )
			{
				equal = false;
			}
			if (Object1.AdvisorId != null && Object2.AdvisorId != null )
			{
				if (Object1.AdvisorId != Object2.AdvisorId)
					equal = false;
			}
			else if (Object1.AdvisorId == null ^ Object1.AdvisorId == null )
			{
				equal = false;
			}
			if (Object1.AdvisorName != null && Object2.AdvisorName != null )
			{
				if (Object1.AdvisorName != Object2.AdvisorName)
					equal = false;
			}
			else if (Object1.AdvisorName == null ^ Object1.AdvisorName == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ClientView entity, string propertyName)
		{
			switch (propertyName)
			{
				case "ClientId":
					return entity.ClientId;
				case "FileNumber":
					return entity.FileNumber;
				case "FullName":
					return entity.FullName;
				case "MiddleName":
					return entity.MiddleName;
				case "Reference":
					return entity.Reference;
				case "Pediatrician":
					return entity.Pediatrician;
				case "Blood":
					return entity.Blood;
				case "BirthDate":
					return entity.BirthDate;
				case "FirstContactDate":
					return entity.FirstContactDate;
				case "Gender":
					return entity.Gender;
				case "IdCard":
					return entity.IdCard;
				case "Age":
					return entity.Age;
				case "Mother":
					return entity.Mother;
				case "MotherBusiness":
					return entity.MotherBusiness;
				case "MotherEmail":
					return entity.MotherEmail;
				case "MotherMobile":
					return entity.MotherMobile;
				case "Father":
					return entity.Father;
				case "FatherBusiness":
					return entity.FatherBusiness;
				case "FatherEmail":
					return entity.FatherEmail;
				case "FatherMobile":
					return entity.FatherMobile;
				case "AddressLine":
					return entity.AddressLine;
				case "TitleId":
					return entity.TitleId;
				case "CityName":
					return entity.CityName;
				case "DistrictName":
					return entity.DistrictName;
				case "Region":
					return entity.Region;
				case "CityId":
					return entity.CityId;
				case "RegionId":
					return entity.RegionId;
				case "DistrictId":
					return entity.DistrictId;
				case "AdvisorId":
					return entity.AdvisorId;
				case "AdvisorName":
					return entity.AdvisorName;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ClientView, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{31}{30}- ClientId: {0}{30}- FileNumber: {1}{30}- FullName: {2}{30}- MiddleName: {3}{30}- Reference: {4}{30}- Pediatrician: {5}{30}- Blood: {6}{30}- BirthDate: {7}{30}- FirstContactDate: {8}{30}- Gender: {9}{30}- IdCard: {10}{30}- Age: {11}{30}- Mother: {12}{30}- MotherBusiness: {13}{30}- MotherEmail: {14}{30}- MotherMobile: {15}{30}- Father: {16}{30}- FatherBusiness: {17}{30}- FatherEmail: {18}{30}- FatherMobile: {19}{30}- AddressLine: {20}{30}- TitleId: {21}{30}- CityName: {22}{30}- DistrictName: {23}{30}- Region: {24}{30}- CityId: {25}{30}- RegionId: {26}{30}- DistrictId: {27}{30}- AdvisorId: {28}{30}- AdvisorName: {29}{30}", 
				this.ClientId,
				this.FileNumber,
				this.FullName,
				(this.MiddleName == null) ? string.Empty : this.MiddleName.ToString(),
			     
				(this.Reference == null) ? string.Empty : this.Reference.ToString(),
			     
				(this.Pediatrician == null) ? string.Empty : this.Pediatrician.ToString(),
			     
				this.Blood,
				(this.BirthDate == null) ? string.Empty : this.BirthDate.ToString(),
			     
				(this.FirstContactDate == null) ? string.Empty : this.FirstContactDate.ToString(),
			     
				this.Gender,
				(this.IdCard == null) ? string.Empty : this.IdCard.ToString(),
			     
				(this.Age == null) ? string.Empty : this.Age.ToString(),
			     
				(this.Mother == null) ? string.Empty : this.Mother.ToString(),
			     
				(this.MotherBusiness == null) ? string.Empty : this.MotherBusiness.ToString(),
			     
				(this.MotherEmail == null) ? string.Empty : this.MotherEmail.ToString(),
			     
				(this.MotherMobile == null) ? string.Empty : this.MotherMobile.ToString(),
			     
				(this.Father == null) ? string.Empty : this.Father.ToString(),
			     
				(this.FatherBusiness == null) ? string.Empty : this.FatherBusiness.ToString(),
			     
				(this.FatherEmail == null) ? string.Empty : this.FatherEmail.ToString(),
			     
				(this.FatherMobile == null) ? string.Empty : this.FatherMobile.ToString(),
			     
				(this.AddressLine == null) ? string.Empty : this.AddressLine.ToString(),
			     
				(this.TitleId == null) ? string.Empty : this.TitleId.ToString(),
			     
				(this.CityName == null) ? string.Empty : this.CityName.ToString(),
			     
				(this.DistrictName == null) ? string.Empty : this.DistrictName.ToString(),
			     
				(this.Region == null) ? string.Empty : this.Region.ToString(),
			     
				(this.CityId == null) ? string.Empty : this.CityId.ToString(),
			     
				(this.RegionId == null) ? string.Empty : this.RegionId.ToString(),
			     
				(this.DistrictId == null) ? string.Empty : this.DistrictId.ToString(),
			     
				(this.AdvisorId == null) ? string.Empty : this.AdvisorId.ToString(),
			     
				(this.AdvisorName == null) ? string.Empty : this.AdvisorName.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ClientView columns.
	/// </summary>
	[Serializable]
	public enum ClientViewColumn
	{
		/// <summary>
		/// ClientID : 
		/// </summary>
		[EnumTextValue("ClientID")]
		[ColumnEnum("ClientID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ClientId,
		/// <summary>
		/// FileNumber : 
		/// </summary>
		[EnumTextValue("FileNumber")]
		[ColumnEnum("FileNumber", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		FileNumber,
		/// <summary>
		/// FullName : 
		/// </summary>
		[EnumTextValue("FullName")]
		[ColumnEnum("FullName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		FullName,
		/// <summary>
		/// MiddleName : 
		/// </summary>
		[EnumTextValue("MiddleName")]
		[ColumnEnum("MiddleName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		MiddleName,
		/// <summary>
		/// Reference : 
		/// </summary>
		[EnumTextValue("Reference")]
		[ColumnEnum("Reference", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 250)]
		Reference,
		/// <summary>
		/// Pediatrician : 
		/// </summary>
		[EnumTextValue("Pediatrician")]
		[ColumnEnum("Pediatrician", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Pediatrician,
		/// <summary>
		/// Blood : 
		/// </summary>
		[EnumTextValue("Blood")]
		[ColumnEnum("Blood", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		Blood,
		/// <summary>
		/// BirthDate : 
		/// </summary>
		[EnumTextValue("BirthDate")]
		[ColumnEnum("BirthDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		BirthDate,
		/// <summary>
		/// FirstContactDate : 
		/// </summary>
		[EnumTextValue("FirstContactDate")]
		[ColumnEnum("FirstContactDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FirstContactDate,
		/// <summary>
		/// Gender : 
		/// </summary>
		[EnumTextValue("Gender")]
		[ColumnEnum("Gender", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		Gender,
		/// <summary>
		/// IdCard : 
		/// </summary>
		[EnumTextValue("IdCard")]
		[ColumnEnum("IdCard", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 11)]
		IdCard,
		/// <summary>
		/// Age : 
		/// </summary>
		[EnumTextValue("Age")]
		[ColumnEnum("Age", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Age,
		/// <summary>
		/// Mother : 
		/// </summary>
		[EnumTextValue("Mother")]
		[ColumnEnum("Mother", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Mother,
		/// <summary>
		/// MotherBusiness : 
		/// </summary>
		[EnumTextValue("MotherBusiness")]
		[ColumnEnum("MotherBusiness", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MotherBusiness,
		/// <summary>
		/// MotherEmail : 
		/// </summary>
		[EnumTextValue("MotherEmail")]
		[ColumnEnum("MotherEmail", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		MotherEmail,
		/// <summary>
		/// MotherMobile : 
		/// </summary>
		[EnumTextValue("MotherMobile")]
		[ColumnEnum("MotherMobile", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MotherMobile,
		/// <summary>
		/// Father : 
		/// </summary>
		[EnumTextValue("Father")]
		[ColumnEnum("Father", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Father,
		/// <summary>
		/// FatherBusiness : 
		/// </summary>
		[EnumTextValue("FatherBusiness")]
		[ColumnEnum("FatherBusiness", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		FatherBusiness,
		/// <summary>
		/// FatherEmail : 
		/// </summary>
		[EnumTextValue("FatherEmail")]
		[ColumnEnum("FatherEmail", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		FatherEmail,
		/// <summary>
		/// FatherMobile : 
		/// </summary>
		[EnumTextValue("FatherMobile")]
		[ColumnEnum("FatherMobile", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		FatherMobile,
		/// <summary>
		/// AddressLine : 
		/// </summary>
		[EnumTextValue("AddressLine")]
		[ColumnEnum("AddressLine", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1000)]
		AddressLine,
		/// <summary>
		/// TitleId : 
		/// </summary>
		[EnumTextValue("TitleId")]
		[ColumnEnum("TitleId", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		TitleId,
		/// <summary>
		/// CityName : 
		/// </summary>
		[EnumTextValue("CityName")]
		[ColumnEnum("CityName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		CityName,
		/// <summary>
		/// DistrictName : 
		/// </summary>
		[EnumTextValue("DistrictName")]
		[ColumnEnum("DistrictName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		DistrictName,
		/// <summary>
		/// Region : 
		/// </summary>
		[EnumTextValue("Region")]
		[ColumnEnum("Region", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 150)]
		Region,
		/// <summary>
		/// CityID : 
		/// </summary>
		[EnumTextValue("CityID")]
		[ColumnEnum("CityID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CityId,
		/// <summary>
		/// RegionID : 
		/// </summary>
		[EnumTextValue("RegionID")]
		[ColumnEnum("RegionID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RegionId,
		/// <summary>
		/// DistrictID : 
		/// </summary>
		[EnumTextValue("DistrictID")]
		[ColumnEnum("DistrictID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DistrictId,
		/// <summary>
		/// AdvisorID : 
		/// </summary>
		[EnumTextValue("AdvisorID")]
		[ColumnEnum("AdvisorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AdvisorId,
		/// <summary>
		/// AdvisorName : 
		/// </summary>
		[EnumTextValue("AdvisorName")]
		[ColumnEnum("AdvisorName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		AdvisorName
	}//End enum

} // end namespace
