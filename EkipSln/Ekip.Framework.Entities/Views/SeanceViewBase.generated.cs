/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 18 Temmuz 2018 Çarşamba
	Important: Do not modify this file. Edit the file SeanceView.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'SeanceView' view. [No description found in the database]	
	///</summary>
	[DataContract]
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("SeanceViewBase")]
	public abstract partial class SeanceViewBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// ClientID : 
		/// </summary>
		private System.Int32		  _clientId = (int)0;
		
		/// <summary>
		/// SeanceID : 
		/// </summary>
		private System.Int32		  _seanceId = (int)0;
		
		/// <summary>
		/// AdvisorID : 
		/// </summary>
		private System.Int32?		  _advisorId = null;
		
		/// <summary>
		/// FileNumber : 
		/// </summary>
		private System.Int32		  _fileNumber = (int)0;
		
		/// <summary>
		/// FirstContactDate : 
		/// </summary>
		private System.DateTime?		  _firstContactDate = null;
		
		/// <summary>
		/// ClientName : 
		/// </summary>
		private System.String		  _clientName = string.Empty;
		
		/// <summary>
		/// Gender : 
		/// </summary>
		private System.String		  _gender = null;
		
		/// <summary>
		/// BirthDate : 
		/// </summary>
		private System.DateTime?		  _birthDate = null;
		
		/// <summary>
		/// Pediatrician : 
		/// </summary>
		private System.String		  _pediatrician = null;
		
		/// <summary>
		/// SeanceNote : 
		/// </summary>
		private System.String		  _seanceNote = null;
		
		/// <summary>
		/// SeanceDate : 
		/// </summary>
		private System.DateTime?		  _seanceDate = null;
		
		/// <summary>
		/// SeanceTime : 
		/// </summary>
		private System.String		  _seanceTime = null;
		
		/// <summary>
		/// SeanceStatus : 
		/// </summary>
		private System.Byte		  _seanceStatus = (byte)0;
		
		/// <summary>
		/// Advisor : 
		/// </summary>
		private System.String		  _advisor = null;
		
		/// <summary>
		/// Father : 
		/// </summary>
		private System.String		  _father = null;
		
		/// <summary>
		/// FatherHome : 
		/// </summary>
		private System.String		  _fatherHome = null;
		
		/// <summary>
		/// FatherMobile : 
		/// </summary>
		private System.String		  _fatherMobile = null;
		
		/// <summary>
		/// FatherBusiness : 
		/// </summary>
		private System.String		  _fatherBusiness = null;
		
		/// <summary>
		/// FatherEmail : 
		/// </summary>
		private System.String		  _fatherEmail = null;
		
		/// <summary>
		/// Mother : 
		/// </summary>
		private System.String		  _mother = null;
		
		/// <summary>
		/// MotherHome : 
		/// </summary>
		private System.String		  _motherHome = null;
		
		/// <summary>
		/// MotherMobile : 
		/// </summary>
		private System.String		  _motherMobile = null;
		
		/// <summary>
		/// MotherBusiness : 
		/// </summary>
		private System.String		  _motherBusiness = null;
		
		/// <summary>
		/// MotherEmail : 
		/// </summary>
		private System.String		  _motherEmail = null;
		
		/// <summary>
		/// ReasonIdList : 
		/// </summary>
		private System.String		  _reasonIdList = null;
		
		/// <summary>
		/// ReasonValueList : 
		/// </summary>
		private System.String		  _reasonValueList = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SeanceViewBase"/> instance.
		///</summary>
		public SeanceViewBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="SeanceViewBase"/> instance.
		///</summary>
		///<param name="_clientId"></param>
		///<param name="_seanceId"></param>
		///<param name="_advisorId"></param>
		///<param name="_fileNumber"></param>
		///<param name="_firstContactDate"></param>
		///<param name="_clientName"></param>
		///<param name="_gender"></param>
		///<param name="_birthDate"></param>
		///<param name="_pediatrician"></param>
		///<param name="_seanceNote"></param>
		///<param name="_seanceDate"></param>
		///<param name="_seanceTime"></param>
		///<param name="_seanceStatus"></param>
		///<param name="_advisor"></param>
		///<param name="_father"></param>
		///<param name="_fatherHome"></param>
		///<param name="_fatherMobile"></param>
		///<param name="_fatherBusiness"></param>
		///<param name="_fatherEmail"></param>
		///<param name="_mother"></param>
		///<param name="_motherHome"></param>
		///<param name="_motherMobile"></param>
		///<param name="_motherBusiness"></param>
		///<param name="_motherEmail"></param>
		///<param name="_reasonIdList"></param>
		///<param name="_reasonValueList"></param>
		public SeanceViewBase(System.Int32 _clientId, System.Int32 _seanceId, System.Int32? _advisorId, System.Int32 _fileNumber, System.DateTime? _firstContactDate, System.String _clientName, System.String _gender, System.DateTime? _birthDate, System.String _pediatrician, System.String _seanceNote, System.DateTime? _seanceDate, System.String _seanceTime, System.Byte _seanceStatus, System.String _advisor, System.String _father, System.String _fatherHome, System.String _fatherMobile, System.String _fatherBusiness, System.String _fatherEmail, System.String _mother, System.String _motherHome, System.String _motherMobile, System.String _motherBusiness, System.String _motherEmail, System.String _reasonIdList, System.String _reasonValueList)
		{
			this._clientId = _clientId;
			this._seanceId = _seanceId;
			this._advisorId = _advisorId;
			this._fileNumber = _fileNumber;
			this._firstContactDate = _firstContactDate;
			this._clientName = _clientName;
			this._gender = _gender;
			this._birthDate = _birthDate;
			this._pediatrician = _pediatrician;
			this._seanceNote = _seanceNote;
			this._seanceDate = _seanceDate;
			this._seanceTime = _seanceTime;
			this._seanceStatus = _seanceStatus;
			this._advisor = _advisor;
			this._father = _father;
			this._fatherHome = _fatherHome;
			this._fatherMobile = _fatherMobile;
			this._fatherBusiness = _fatherBusiness;
			this._fatherEmail = _fatherEmail;
			this._mother = _mother;
			this._motherHome = _motherHome;
			this._motherMobile = _motherMobile;
			this._motherBusiness = _motherBusiness;
			this._motherEmail = _motherEmail;
			this._reasonIdList = _reasonIdList;
			this._reasonValueList = _reasonValueList;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SeanceView"/> instance.
		///</summary>
		///<param name="_clientId"></param>
		///<param name="_seanceId"></param>
		///<param name="_advisorId"></param>
		///<param name="_fileNumber"></param>
		///<param name="_firstContactDate"></param>
		///<param name="_clientName"></param>
		///<param name="_gender"></param>
		///<param name="_birthDate"></param>
		///<param name="_pediatrician"></param>
		///<param name="_seanceNote"></param>
		///<param name="_seanceDate"></param>
		///<param name="_seanceTime"></param>
		///<param name="_seanceStatus"></param>
		///<param name="_advisor"></param>
		///<param name="_father"></param>
		///<param name="_fatherHome"></param>
		///<param name="_fatherMobile"></param>
		///<param name="_fatherBusiness"></param>
		///<param name="_fatherEmail"></param>
		///<param name="_mother"></param>
		///<param name="_motherHome"></param>
		///<param name="_motherMobile"></param>
		///<param name="_motherBusiness"></param>
		///<param name="_motherEmail"></param>
		///<param name="_reasonIdList"></param>
		///<param name="_reasonValueList"></param>
		public static SeanceView CreateSeanceView(System.Int32 _clientId, System.Int32 _seanceId, System.Int32? _advisorId, System.Int32 _fileNumber, System.DateTime? _firstContactDate, System.String _clientName, System.String _gender, System.DateTime? _birthDate, System.String _pediatrician, System.String _seanceNote, System.DateTime? _seanceDate, System.String _seanceTime, System.Byte _seanceStatus, System.String _advisor, System.String _father, System.String _fatherHome, System.String _fatherMobile, System.String _fatherBusiness, System.String _fatherEmail, System.String _mother, System.String _motherHome, System.String _motherMobile, System.String _motherBusiness, System.String _motherEmail, System.String _reasonIdList, System.String _reasonValueList)
		{
			SeanceView newSeanceView = new SeanceView();
			newSeanceView.ClientId = _clientId;
			newSeanceView.SeanceId = _seanceId;
			newSeanceView.AdvisorId = _advisorId;
			newSeanceView.FileNumber = _fileNumber;
			newSeanceView.FirstContactDate = _firstContactDate;
			newSeanceView.ClientName = _clientName;
			newSeanceView.Gender = _gender;
			newSeanceView.BirthDate = _birthDate;
			newSeanceView.Pediatrician = _pediatrician;
			newSeanceView.SeanceNote = _seanceNote;
			newSeanceView.SeanceDate = _seanceDate;
			newSeanceView.SeanceTime = _seanceTime;
			newSeanceView.SeanceStatus = _seanceStatus;
			newSeanceView.Advisor = _advisor;
			newSeanceView.Father = _father;
			newSeanceView.FatherHome = _fatherHome;
			newSeanceView.FatherMobile = _fatherMobile;
			newSeanceView.FatherBusiness = _fatherBusiness;
			newSeanceView.FatherEmail = _fatherEmail;
			newSeanceView.Mother = _mother;
			newSeanceView.MotherHome = _motherHome;
			newSeanceView.MotherMobile = _motherMobile;
			newSeanceView.MotherBusiness = _motherBusiness;
			newSeanceView.MotherEmail = _motherEmail;
			newSeanceView.ReasonIdList = _reasonIdList;
			newSeanceView.ReasonValueList = _reasonValueList;
			return newSeanceView;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the ClientID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 ClientId
		{
			get
			{
				return this._clientId; 
			}
			set
			{
				if (_clientId == value)
					return;
					
				this._clientId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ClientId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeanceID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 SeanceId
		{
			get
			{
				return this._seanceId; 
			}
			set
			{
				if (_seanceId == value)
					return;
					
				this._seanceId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeanceId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AdvisorID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAdvisorIdNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? AdvisorId
		{
			get
			{
				return this._advisorId; 
			}
			set
			{
				if (_advisorId == value && AdvisorId != null )
					return;
					
				this._advisorId = value;
				this._isDirty = true;
				
				OnPropertyChanged("AdvisorId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FileNumber property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 FileNumber
		{
			get
			{
				return this._fileNumber; 
			}
			set
			{
				if (_fileNumber == value)
					return;
					
				this._fileNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("FileNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FirstContactDate property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFirstContactDateNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? FirstContactDate
		{
			get
			{
				return this._firstContactDate; 
			}
			set
			{
				if (_firstContactDate == value && FirstContactDate != null )
					return;
					
				this._firstContactDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("FirstContactDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ClientName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ClientName
		{
			get
			{
				return this._clientName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "ClientName does not allow null values.");
				if (_clientName == value)
					return;
					
				this._clientName = value;
				this._isDirty = true;
				
				OnPropertyChanged("ClientName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Gender property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Gender
		{
			get
			{
				return this._gender; 
			}
			set
			{
				if (_gender == value)
					return;
					
				this._gender = value;
				this._isDirty = true;
				
				OnPropertyChanged("Gender");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BirthDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsBirthDateNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? BirthDate
		{
			get
			{
				return this._birthDate; 
			}
			set
			{
				if (_birthDate == value && BirthDate != null )
					return;
					
				this._birthDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("BirthDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Pediatrician property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Pediatrician
		{
			get
			{
				return this._pediatrician; 
			}
			set
			{
				if (_pediatrician == value)
					return;
					
				this._pediatrician = value;
				this._isDirty = true;
				
				OnPropertyChanged("Pediatrician");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeanceNote property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SeanceNote
		{
			get
			{
				return this._seanceNote; 
			}
			set
			{
				if (_seanceNote == value)
					return;
					
				this._seanceNote = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeanceNote");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeanceDate property. 
		///		
		/// </summary>
		/// <value>This type is date</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsSeanceDateNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? SeanceDate
		{
			get
			{
				return this._seanceDate; 
			}
			set
			{
				if (_seanceDate == value && SeanceDate != null )
					return;
					
				this._seanceDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeanceDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeanceTime property. 
		///		
		/// </summary>
		/// <value>This type is char</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SeanceTime
		{
			get
			{
				return this._seanceTime; 
			}
			set
			{
				if (_seanceTime == value)
					return;
					
				this._seanceTime = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeanceTime");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeanceStatus property. 
		///		
		/// </summary>
		/// <value>This type is tinyint</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Byte SeanceStatus
		{
			get
			{
				return this._seanceStatus; 
			}
			set
			{
				if (_seanceStatus == value)
					return;
					
				this._seanceStatus = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeanceStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Advisor property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Advisor
		{
			get
			{
				return this._advisor; 
			}
			set
			{
				if (_advisor == value)
					return;
					
				this._advisor = value;
				this._isDirty = true;
				
				OnPropertyChanged("Advisor");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Father property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Father
		{
			get
			{
				return this._father; 
			}
			set
			{
				if (_father == value)
					return;
					
				this._father = value;
				this._isDirty = true;
				
				OnPropertyChanged("Father");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FatherHome property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FatherHome
		{
			get
			{
				return this._fatherHome; 
			}
			set
			{
				if (_fatherHome == value)
					return;
					
				this._fatherHome = value;
				this._isDirty = true;
				
				OnPropertyChanged("FatherHome");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FatherMobile property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FatherMobile
		{
			get
			{
				return this._fatherMobile; 
			}
			set
			{
				if (_fatherMobile == value)
					return;
					
				this._fatherMobile = value;
				this._isDirty = true;
				
				OnPropertyChanged("FatherMobile");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FatherBusiness property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FatherBusiness
		{
			get
			{
				return this._fatherBusiness; 
			}
			set
			{
				if (_fatherBusiness == value)
					return;
					
				this._fatherBusiness = value;
				this._isDirty = true;
				
				OnPropertyChanged("FatherBusiness");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FatherEmail property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FatherEmail
		{
			get
			{
				return this._fatherEmail; 
			}
			set
			{
				if (_fatherEmail == value)
					return;
					
				this._fatherEmail = value;
				this._isDirty = true;
				
				OnPropertyChanged("FatherEmail");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Mother property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Mother
		{
			get
			{
				return this._mother; 
			}
			set
			{
				if (_mother == value)
					return;
					
				this._mother = value;
				this._isDirty = true;
				
				OnPropertyChanged("Mother");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MotherHome property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MotherHome
		{
			get
			{
				return this._motherHome; 
			}
			set
			{
				if (_motherHome == value)
					return;
					
				this._motherHome = value;
				this._isDirty = true;
				
				OnPropertyChanged("MotherHome");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MotherMobile property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MotherMobile
		{
			get
			{
				return this._motherMobile; 
			}
			set
			{
				if (_motherMobile == value)
					return;
					
				this._motherMobile = value;
				this._isDirty = true;
				
				OnPropertyChanged("MotherMobile");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MotherBusiness property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MotherBusiness
		{
			get
			{
				return this._motherBusiness; 
			}
			set
			{
				if (_motherBusiness == value)
					return;
					
				this._motherBusiness = value;
				this._isDirty = true;
				
				OnPropertyChanged("MotherBusiness");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MotherEmail property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MotherEmail
		{
			get
			{
				return this._motherEmail; 
			}
			set
			{
				if (_motherEmail == value)
					return;
					
				this._motherEmail = value;
				this._isDirty = true;
				
				OnPropertyChanged("MotherEmail");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ReasonIdList property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ReasonIdList
		{
			get
			{
				return this._reasonIdList; 
			}
			set
			{
				if (_reasonIdList == value)
					return;
					
				this._reasonIdList = value;
				this._isDirty = true;
				
				OnPropertyChanged("ReasonIdList");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ReasonValueList property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ReasonValueList
		{
			get
			{
				return this._reasonValueList; 
			}
			set
			{
				if (_reasonValueList == value)
					return;
					
				this._reasonValueList = value;
				this._isDirty = true;
				
				OnPropertyChanged("ReasonValueList");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "SeanceView"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SeanceViewBase Entity 
		///</summary>
		public virtual SeanceViewBase Copy()
		{
			//shallow copy entity
			SeanceView copy = new SeanceView();
				copy.ClientId = this.ClientId;
				copy.SeanceId = this.SeanceId;
				copy.AdvisorId = this.AdvisorId;
				copy.FileNumber = this.FileNumber;
				copy.FirstContactDate = this.FirstContactDate;
				copy.ClientName = this.ClientName;
				copy.Gender = this.Gender;
				copy.BirthDate = this.BirthDate;
				copy.Pediatrician = this.Pediatrician;
				copy.SeanceNote = this.SeanceNote;
				copy.SeanceDate = this.SeanceDate;
				copy.SeanceTime = this.SeanceTime;
				copy.SeanceStatus = this.SeanceStatus;
				copy.Advisor = this.Advisor;
				copy.Father = this.Father;
				copy.FatherHome = this.FatherHome;
				copy.FatherMobile = this.FatherMobile;
				copy.FatherBusiness = this.FatherBusiness;
				copy.FatherEmail = this.FatherEmail;
				copy.Mother = this.Mother;
				copy.MotherHome = this.MotherHome;
				copy.MotherMobile = this.MotherMobile;
				copy.MotherBusiness = this.MotherBusiness;
				copy.MotherEmail = this.MotherEmail;
				copy.ReasonIdList = this.ReasonIdList;
				copy.ReasonValueList = this.ReasonValueList;
			copy.AcceptChanges();
			return (SeanceView)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SeanceViewBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SeanceViewBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="SeanceViewBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="SeanceViewBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SeanceViewBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(SeanceViewBase Object1, SeanceViewBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.ClientId != Object2.ClientId)
				equal = false;
			if (Object1.SeanceId != Object2.SeanceId)
				equal = false;
			if (Object1.AdvisorId != null && Object2.AdvisorId != null )
			{
				if (Object1.AdvisorId != Object2.AdvisorId)
					equal = false;
			}
			else if (Object1.AdvisorId == null ^ Object1.AdvisorId == null )
			{
				equal = false;
			}
			if (Object1.FileNumber != Object2.FileNumber)
				equal = false;
			if (Object1.FirstContactDate != null && Object2.FirstContactDate != null )
			{
				if (Object1.FirstContactDate != Object2.FirstContactDate)
					equal = false;
			}
			else if (Object1.FirstContactDate == null ^ Object1.FirstContactDate == null )
			{
				equal = false;
			}
			if (Object1.ClientName != Object2.ClientName)
				equal = false;
			if (Object1.Gender != null && Object2.Gender != null )
			{
				if (Object1.Gender != Object2.Gender)
					equal = false;
			}
			else if (Object1.Gender == null ^ Object1.Gender == null )
			{
				equal = false;
			}
			if (Object1.BirthDate != null && Object2.BirthDate != null )
			{
				if (Object1.BirthDate != Object2.BirthDate)
					equal = false;
			}
			else if (Object1.BirthDate == null ^ Object1.BirthDate == null )
			{
				equal = false;
			}
			if (Object1.Pediatrician != null && Object2.Pediatrician != null )
			{
				if (Object1.Pediatrician != Object2.Pediatrician)
					equal = false;
			}
			else if (Object1.Pediatrician == null ^ Object1.Pediatrician == null )
			{
				equal = false;
			}
			if (Object1.SeanceNote != null && Object2.SeanceNote != null )
			{
				if (Object1.SeanceNote != Object2.SeanceNote)
					equal = false;
			}
			else if (Object1.SeanceNote == null ^ Object1.SeanceNote == null )
			{
				equal = false;
			}
			if (Object1.SeanceDate != null && Object2.SeanceDate != null )
			{
				if (Object1.SeanceDate != Object2.SeanceDate)
					equal = false;
			}
			else if (Object1.SeanceDate == null ^ Object1.SeanceDate == null )
			{
				equal = false;
			}
			if (Object1.SeanceTime != null && Object2.SeanceTime != null )
			{
				if (Object1.SeanceTime != Object2.SeanceTime)
					equal = false;
			}
			else if (Object1.SeanceTime == null ^ Object1.SeanceTime == null )
			{
				equal = false;
			}
			if (Object1.SeanceStatus != Object2.SeanceStatus)
				equal = false;
			if (Object1.Advisor != null && Object2.Advisor != null )
			{
				if (Object1.Advisor != Object2.Advisor)
					equal = false;
			}
			else if (Object1.Advisor == null ^ Object1.Advisor == null )
			{
				equal = false;
			}
			if (Object1.Father != null && Object2.Father != null )
			{
				if (Object1.Father != Object2.Father)
					equal = false;
			}
			else if (Object1.Father == null ^ Object1.Father == null )
			{
				equal = false;
			}
			if (Object1.FatherHome != null && Object2.FatherHome != null )
			{
				if (Object1.FatherHome != Object2.FatherHome)
					equal = false;
			}
			else if (Object1.FatherHome == null ^ Object1.FatherHome == null )
			{
				equal = false;
			}
			if (Object1.FatherMobile != null && Object2.FatherMobile != null )
			{
				if (Object1.FatherMobile != Object2.FatherMobile)
					equal = false;
			}
			else if (Object1.FatherMobile == null ^ Object1.FatherMobile == null )
			{
				equal = false;
			}
			if (Object1.FatherBusiness != null && Object2.FatherBusiness != null )
			{
				if (Object1.FatherBusiness != Object2.FatherBusiness)
					equal = false;
			}
			else if (Object1.FatherBusiness == null ^ Object1.FatherBusiness == null )
			{
				equal = false;
			}
			if (Object1.FatherEmail != null && Object2.FatherEmail != null )
			{
				if (Object1.FatherEmail != Object2.FatherEmail)
					equal = false;
			}
			else if (Object1.FatherEmail == null ^ Object1.FatherEmail == null )
			{
				equal = false;
			}
			if (Object1.Mother != null && Object2.Mother != null )
			{
				if (Object1.Mother != Object2.Mother)
					equal = false;
			}
			else if (Object1.Mother == null ^ Object1.Mother == null )
			{
				equal = false;
			}
			if (Object1.MotherHome != null && Object2.MotherHome != null )
			{
				if (Object1.MotherHome != Object2.MotherHome)
					equal = false;
			}
			else if (Object1.MotherHome == null ^ Object1.MotherHome == null )
			{
				equal = false;
			}
			if (Object1.MotherMobile != null && Object2.MotherMobile != null )
			{
				if (Object1.MotherMobile != Object2.MotherMobile)
					equal = false;
			}
			else if (Object1.MotherMobile == null ^ Object1.MotherMobile == null )
			{
				equal = false;
			}
			if (Object1.MotherBusiness != null && Object2.MotherBusiness != null )
			{
				if (Object1.MotherBusiness != Object2.MotherBusiness)
					equal = false;
			}
			else if (Object1.MotherBusiness == null ^ Object1.MotherBusiness == null )
			{
				equal = false;
			}
			if (Object1.MotherEmail != null && Object2.MotherEmail != null )
			{
				if (Object1.MotherEmail != Object2.MotherEmail)
					equal = false;
			}
			else if (Object1.MotherEmail == null ^ Object1.MotherEmail == null )
			{
				equal = false;
			}
			if (Object1.ReasonIdList != null && Object2.ReasonIdList != null )
			{
				if (Object1.ReasonIdList != Object2.ReasonIdList)
					equal = false;
			}
			else if (Object1.ReasonIdList == null ^ Object1.ReasonIdList == null )
			{
				equal = false;
			}
			if (Object1.ReasonValueList != null && Object2.ReasonValueList != null )
			{
				if (Object1.ReasonValueList != Object2.ReasonValueList)
					equal = false;
			}
			else if (Object1.ReasonValueList == null ^ Object1.ReasonValueList == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(SeanceView entity, string propertyName)
		{
			switch (propertyName)
			{
				case "ClientId":
					return entity.ClientId;
				case "SeanceId":
					return entity.SeanceId;
				case "AdvisorId":
					return entity.AdvisorId;
				case "FileNumber":
					return entity.FileNumber;
				case "FirstContactDate":
					return entity.FirstContactDate;
				case "ClientName":
					return entity.ClientName;
				case "Gender":
					return entity.Gender;
				case "BirthDate":
					return entity.BirthDate;
				case "Pediatrician":
					return entity.Pediatrician;
				case "SeanceNote":
					return entity.SeanceNote;
				case "SeanceDate":
					return entity.SeanceDate;
				case "SeanceTime":
					return entity.SeanceTime;
				case "SeanceStatus":
					return entity.SeanceStatus;
				case "Advisor":
					return entity.Advisor;
				case "Father":
					return entity.Father;
				case "FatherHome":
					return entity.FatherHome;
				case "FatherMobile":
					return entity.FatherMobile;
				case "FatherBusiness":
					return entity.FatherBusiness;
				case "FatherEmail":
					return entity.FatherEmail;
				case "Mother":
					return entity.Mother;
				case "MotherHome":
					return entity.MotherHome;
				case "MotherMobile":
					return entity.MotherMobile;
				case "MotherBusiness":
					return entity.MotherBusiness;
				case "MotherEmail":
					return entity.MotherEmail;
				case "ReasonIdList":
					return entity.ReasonIdList;
				case "ReasonValueList":
					return entity.ReasonValueList;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as SeanceView, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{27}{26}- ClientId: {0}{26}- SeanceId: {1}{26}- AdvisorId: {2}{26}- FileNumber: {3}{26}- FirstContactDate: {4}{26}- ClientName: {5}{26}- Gender: {6}{26}- BirthDate: {7}{26}- Pediatrician: {8}{26}- SeanceNote: {9}{26}- SeanceDate: {10}{26}- SeanceTime: {11}{26}- SeanceStatus: {12}{26}- Advisor: {13}{26}- Father: {14}{26}- FatherHome: {15}{26}- FatherMobile: {16}{26}- FatherBusiness: {17}{26}- FatherEmail: {18}{26}- Mother: {19}{26}- MotherHome: {20}{26}- MotherMobile: {21}{26}- MotherBusiness: {22}{26}- MotherEmail: {23}{26}- ReasonIdList: {24}{26}- ReasonValueList: {25}{26}", 
				this.ClientId,
				this.SeanceId,
				(this.AdvisorId == null) ? string.Empty : this.AdvisorId.ToString(),
			     
				this.FileNumber,
				(this.FirstContactDate == null) ? string.Empty : this.FirstContactDate.ToString(),
			     
				this.ClientName,
				(this.Gender == null) ? string.Empty : this.Gender.ToString(),
			     
				(this.BirthDate == null) ? string.Empty : this.BirthDate.ToString(),
			     
				(this.Pediatrician == null) ? string.Empty : this.Pediatrician.ToString(),
			     
				(this.SeanceNote == null) ? string.Empty : this.SeanceNote.ToString(),
			     
				(this.SeanceDate == null) ? string.Empty : this.SeanceDate.ToString(),
			     
				(this.SeanceTime == null) ? string.Empty : this.SeanceTime.ToString(),
			     
				this.SeanceStatus,
				(this.Advisor == null) ? string.Empty : this.Advisor.ToString(),
			     
				(this.Father == null) ? string.Empty : this.Father.ToString(),
			     
				(this.FatherHome == null) ? string.Empty : this.FatherHome.ToString(),
			     
				(this.FatherMobile == null) ? string.Empty : this.FatherMobile.ToString(),
			     
				(this.FatherBusiness == null) ? string.Empty : this.FatherBusiness.ToString(),
			     
				(this.FatherEmail == null) ? string.Empty : this.FatherEmail.ToString(),
			     
				(this.Mother == null) ? string.Empty : this.Mother.ToString(),
			     
				(this.MotherHome == null) ? string.Empty : this.MotherHome.ToString(),
			     
				(this.MotherMobile == null) ? string.Empty : this.MotherMobile.ToString(),
			     
				(this.MotherBusiness == null) ? string.Empty : this.MotherBusiness.ToString(),
			     
				(this.MotherEmail == null) ? string.Empty : this.MotherEmail.ToString(),
			     
				(this.ReasonIdList == null) ? string.Empty : this.ReasonIdList.ToString(),
			     
				(this.ReasonValueList == null) ? string.Empty : this.ReasonValueList.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the SeanceView columns.
	/// </summary>
	[Serializable]
	public enum SeanceViewColumn
	{
		/// <summary>
		/// ClientID : 
		/// </summary>
		[EnumTextValue("ClientID")]
		[ColumnEnum("ClientID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ClientId,
		/// <summary>
		/// SeanceID : 
		/// </summary>
		[EnumTextValue("SeanceID")]
		[ColumnEnum("SeanceID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SeanceId,
		/// <summary>
		/// AdvisorID : 
		/// </summary>
		[EnumTextValue("AdvisorID")]
		[ColumnEnum("AdvisorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AdvisorId,
		/// <summary>
		/// FileNumber : 
		/// </summary>
		[EnumTextValue("FileNumber")]
		[ColumnEnum("FileNumber", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		FileNumber,
		/// <summary>
		/// FirstContactDate : 
		/// </summary>
		[EnumTextValue("FirstContactDate")]
		[ColumnEnum("FirstContactDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FirstContactDate,
		/// <summary>
		/// ClientName : 
		/// </summary>
		[EnumTextValue("ClientName")]
		[ColumnEnum("ClientName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		ClientName,
		/// <summary>
		/// Gender : 
		/// </summary>
		[EnumTextValue("Gender")]
		[ColumnEnum("Gender", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 5)]
		Gender,
		/// <summary>
		/// BirthDate : 
		/// </summary>
		[EnumTextValue("BirthDate")]
		[ColumnEnum("BirthDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		BirthDate,
		/// <summary>
		/// Pediatrician : 
		/// </summary>
		[EnumTextValue("Pediatrician")]
		[ColumnEnum("Pediatrician", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Pediatrician,
		/// <summary>
		/// SeanceNote : 
		/// </summary>
		[EnumTextValue("SeanceNote")]
		[ColumnEnum("SeanceNote", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		SeanceNote,
		/// <summary>
		/// SeanceDate : 
		/// </summary>
		[EnumTextValue("SeanceDate")]
		[ColumnEnum("SeanceDate", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		SeanceDate,
		/// <summary>
		/// SeanceTime : 
		/// </summary>
		[EnumTextValue("SeanceTime")]
		[ColumnEnum("SeanceTime", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 5)]
		SeanceTime,
		/// <summary>
		/// SeanceStatus : 
		/// </summary>
		[EnumTextValue("SeanceStatus")]
		[ColumnEnum("SeanceStatus", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		SeanceStatus,
		/// <summary>
		/// Advisor : 
		/// </summary>
		[EnumTextValue("Advisor")]
		[ColumnEnum("Advisor", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Advisor,
		/// <summary>
		/// Father : 
		/// </summary>
		[EnumTextValue("Father")]
		[ColumnEnum("Father", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Father,
		/// <summary>
		/// FatherHome : 
		/// </summary>
		[EnumTextValue("FatherHome")]
		[ColumnEnum("FatherHome", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		FatherHome,
		/// <summary>
		/// FatherMobile : 
		/// </summary>
		[EnumTextValue("FatherMobile")]
		[ColumnEnum("FatherMobile", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		FatherMobile,
		/// <summary>
		/// FatherBusiness : 
		/// </summary>
		[EnumTextValue("FatherBusiness")]
		[ColumnEnum("FatherBusiness", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		FatherBusiness,
		/// <summary>
		/// FatherEmail : 
		/// </summary>
		[EnumTextValue("FatherEmail")]
		[ColumnEnum("FatherEmail", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		FatherEmail,
		/// <summary>
		/// Mother : 
		/// </summary>
		[EnumTextValue("Mother")]
		[ColumnEnum("Mother", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Mother,
		/// <summary>
		/// MotherHome : 
		/// </summary>
		[EnumTextValue("MotherHome")]
		[ColumnEnum("MotherHome", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MotherHome,
		/// <summary>
		/// MotherMobile : 
		/// </summary>
		[EnumTextValue("MotherMobile")]
		[ColumnEnum("MotherMobile", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MotherMobile,
		/// <summary>
		/// MotherBusiness : 
		/// </summary>
		[EnumTextValue("MotherBusiness")]
		[ColumnEnum("MotherBusiness", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MotherBusiness,
		/// <summary>
		/// MotherEmail : 
		/// </summary>
		[EnumTextValue("MotherEmail")]
		[ColumnEnum("MotherEmail", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		MotherEmail,
		/// <summary>
		/// ReasonIdList : 
		/// </summary>
		[EnumTextValue("ReasonIdList")]
		[ColumnEnum("ReasonIdList", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2000)]
		ReasonIdList,
		/// <summary>
		/// ReasonValueList : 
		/// </summary>
		[EnumTextValue("ReasonValueList")]
		[ColumnEnum("ReasonValueList", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		ReasonValueList
	}//End enum

} // end namespace
