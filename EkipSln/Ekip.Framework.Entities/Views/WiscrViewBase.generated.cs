/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 6 Kasım 2018 Salı
	Important: Do not modify this file. Edit the file WiscrView.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'WiscrView' view. [No description found in the database]	
	///</summary>
	[DataContract]
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("WiscrViewBase")]
	public abstract partial class WiscrViewBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// SeanceID : 
		/// </summary>
		private System.Int32		  _seanceId = (int)0;
		
		/// <summary>
		/// ClientID : 
		/// </summary>
		private System.Int32		  _clientId = (int)0;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		private System.DateTime?		  _createDate = null;
		
		/// <summary>
		/// SeanceDate : 
		/// </summary>
		private System.DateTime?		  _seanceDate = null;
		
		/// <summary>
		/// SeanceTime : 
		/// </summary>
		private System.TimeSpan?		  _seanceTime = null;
		
		/// <summary>
		/// SeanceStatusId : 
		/// </summary>
		private System.Byte		  _seanceStatusId = (byte)0;
		
		/// <summary>
		/// SeanceAdvisorID : 
		/// </summary>
		private System.Int32		  _seanceAdvisorId = (int)0;
		
		/// <summary>
		/// SeanceAdvisorName : 
		/// </summary>
		private System.String		  _seanceAdvisorName = null;
		
		/// <summary>
		/// TestDate : 
		/// </summary>
		private System.DateTime?		  _testDate = null;
		
		/// <summary>
		/// TestAdvisorID : 
		/// </summary>
		private System.Int32?		  _testAdvisorId = null;
		
		/// <summary>
		/// TestAdvisorName : 
		/// </summary>
		private System.String		  _testAdvisorName = null;
		
		/// <summary>
		/// TotalVerbalScore : 
		/// </summary>
		private System.Int32?		  _totalVerbalScore = null;
		
		/// <summary>
		/// TotalPerformanceScore : 
		/// </summary>
		private System.Int32?		  _totalPerformanceScore = null;
		
		/// <summary>
		/// TotalScore : 
		/// </summary>
		private System.Int32?		  _totalScore = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="WiscrViewBase"/> instance.
		///</summary>
		public WiscrViewBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="WiscrViewBase"/> instance.
		///</summary>
		///<param name="_seanceId"></param>
		///<param name="_clientId"></param>
		///<param name="_createDate"></param>
		///<param name="_seanceDate"></param>
		///<param name="_seanceTime"></param>
		///<param name="_seanceStatusId"></param>
		///<param name="_seanceAdvisorId"></param>
		///<param name="_seanceAdvisorName"></param>
		///<param name="_testDate"></param>
		///<param name="_testAdvisorId"></param>
		///<param name="_testAdvisorName"></param>
		///<param name="_totalVerbalScore"></param>
		///<param name="_totalPerformanceScore"></param>
		///<param name="_totalScore"></param>
		public WiscrViewBase(System.Int32 _seanceId, System.Int32 _clientId, System.DateTime? _createDate, System.DateTime? _seanceDate, System.TimeSpan? _seanceTime, System.Byte _seanceStatusId, System.Int32 _seanceAdvisorId, System.String _seanceAdvisorName, System.DateTime? _testDate, System.Int32? _testAdvisorId, System.String _testAdvisorName, System.Int32? _totalVerbalScore, System.Int32? _totalPerformanceScore, System.Int32? _totalScore)
		{
			this._seanceId = _seanceId;
			this._clientId = _clientId;
			this._createDate = _createDate;
			this._seanceDate = _seanceDate;
			this._seanceTime = _seanceTime;
			this._seanceStatusId = _seanceStatusId;
			this._seanceAdvisorId = _seanceAdvisorId;
			this._seanceAdvisorName = _seanceAdvisorName;
			this._testDate = _testDate;
			this._testAdvisorId = _testAdvisorId;
			this._testAdvisorName = _testAdvisorName;
			this._totalVerbalScore = _totalVerbalScore;
			this._totalPerformanceScore = _totalPerformanceScore;
			this._totalScore = _totalScore;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="WiscrView"/> instance.
		///</summary>
		///<param name="_seanceId"></param>
		///<param name="_clientId"></param>
		///<param name="_createDate"></param>
		///<param name="_seanceDate"></param>
		///<param name="_seanceTime"></param>
		///<param name="_seanceStatusId"></param>
		///<param name="_seanceAdvisorId"></param>
		///<param name="_seanceAdvisorName"></param>
		///<param name="_testDate"></param>
		///<param name="_testAdvisorId"></param>
		///<param name="_testAdvisorName"></param>
		///<param name="_totalVerbalScore"></param>
		///<param name="_totalPerformanceScore"></param>
		///<param name="_totalScore"></param>
		public static WiscrView CreateWiscrView(System.Int32 _seanceId, System.Int32 _clientId, System.DateTime? _createDate, System.DateTime? _seanceDate, System.TimeSpan? _seanceTime, System.Byte _seanceStatusId, System.Int32 _seanceAdvisorId, System.String _seanceAdvisorName, System.DateTime? _testDate, System.Int32? _testAdvisorId, System.String _testAdvisorName, System.Int32? _totalVerbalScore, System.Int32? _totalPerformanceScore, System.Int32? _totalScore)
		{
			WiscrView newWiscrView = new WiscrView();
			newWiscrView.SeanceId = _seanceId;
			newWiscrView.ClientId = _clientId;
			newWiscrView.CreateDate = _createDate;
			newWiscrView.SeanceDate = _seanceDate;
			newWiscrView.SeanceTime = _seanceTime;
			newWiscrView.SeanceStatusId = _seanceStatusId;
			newWiscrView.SeanceAdvisorId = _seanceAdvisorId;
			newWiscrView.SeanceAdvisorName = _seanceAdvisorName;
			newWiscrView.TestDate = _testDate;
			newWiscrView.TestAdvisorId = _testAdvisorId;
			newWiscrView.TestAdvisorName = _testAdvisorName;
			newWiscrView.TotalVerbalScore = _totalVerbalScore;
			newWiscrView.TotalPerformanceScore = _totalPerformanceScore;
			newWiscrView.TotalScore = _totalScore;
			return newWiscrView;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the SeanceID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 SeanceId
		{
			get
			{
				return this._seanceId; 
			}
			set
			{
				if (_seanceId == value)
					return;
					
				this._seanceId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeanceId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ClientID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 ClientId
		{
			get
			{
				return this._clientId; 
			}
			set
			{
				if (_clientId == value)
					return;
					
				this._clientId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ClientId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreateDateNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? CreateDate
		{
			get
			{
				return this._createDate; 
			}
			set
			{
				if (_createDate == value && CreateDate != null )
					return;
					
				this._createDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeanceDate property. 
		///		
		/// </summary>
		/// <value>This type is date</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsSeanceDateNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? SeanceDate
		{
			get
			{
				return this._seanceDate; 
			}
			set
			{
				if (_seanceDate == value && SeanceDate != null )
					return;
					
				this._seanceDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeanceDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeanceTime property. 
		///		
		/// </summary>
		/// <value>This type is time</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return new TimeSpan(1,0,0,0,0). It is up to the developer
		/// to check the value of IsSeanceTimeNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.TimeSpan? SeanceTime
		{
			get
			{
				return this._seanceTime; 
			}
			set
			{
				if (_seanceTime == value && SeanceTime != null )
					return;
					
				this._seanceTime = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeanceTime");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeanceStatusId property. 
		///		
		/// </summary>
		/// <value>This type is tinyint</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Byte SeanceStatusId
		{
			get
			{
				return this._seanceStatusId; 
			}
			set
			{
				if (_seanceStatusId == value)
					return;
					
				this._seanceStatusId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeanceStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeanceAdvisorID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DataMember]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 SeanceAdvisorId
		{
			get
			{
				return this._seanceAdvisorId; 
			}
			set
			{
				if (_seanceAdvisorId == value)
					return;
					
				this._seanceAdvisorId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeanceAdvisorId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeanceAdvisorName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SeanceAdvisorName
		{
			get
			{
				return this._seanceAdvisorName; 
			}
			set
			{
				if (_seanceAdvisorName == value)
					return;
					
				this._seanceAdvisorName = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeanceAdvisorName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TestDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTestDateNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? TestDate
		{
			get
			{
				return this._testDate; 
			}
			set
			{
				if (_testDate == value && TestDate != null )
					return;
					
				this._testDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("TestDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TestAdvisorID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTestAdvisorIdNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? TestAdvisorId
		{
			get
			{
				return this._testAdvisorId; 
			}
			set
			{
				if (_testAdvisorId == value && TestAdvisorId != null )
					return;
					
				this._testAdvisorId = value;
				this._isDirty = true;
				
				OnPropertyChanged("TestAdvisorId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TestAdvisorName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TestAdvisorName
		{
			get
			{
				return this._testAdvisorName; 
			}
			set
			{
				if (_testAdvisorName == value)
					return;
					
				this._testAdvisorName = value;
				this._isDirty = true;
				
				OnPropertyChanged("TestAdvisorName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TotalVerbalScore property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTotalVerbalScoreNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? TotalVerbalScore
		{
			get
			{
				return this._totalVerbalScore; 
			}
			set
			{
				if (_totalVerbalScore == value && TotalVerbalScore != null )
					return;
					
				this._totalVerbalScore = value;
				this._isDirty = true;
				
				OnPropertyChanged("TotalVerbalScore");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TotalPerformanceScore property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTotalPerformanceScoreNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? TotalPerformanceScore
		{
			get
			{
				return this._totalPerformanceScore; 
			}
			set
			{
				if (_totalPerformanceScore == value && TotalPerformanceScore != null )
					return;
					
				this._totalPerformanceScore = value;
				this._isDirty = true;
				
				OnPropertyChanged("TotalPerformanceScore");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TotalScore property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTotalScoreNull() and perform business logic appropriately.
		/// </remarks>
		[DataMember]
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? TotalScore
		{
			get
			{
				return this._totalScore; 
			}
			set
			{
				if (_totalScore == value && TotalScore != null )
					return;
					
				this._totalScore = value;
				this._isDirty = true;
				
				OnPropertyChanged("TotalScore");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "WiscrView"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed WiscrViewBase Entity 
		///</summary>
		public virtual WiscrViewBase Copy()
		{
			//shallow copy entity
			WiscrView copy = new WiscrView();
				copy.SeanceId = this.SeanceId;
				copy.ClientId = this.ClientId;
				copy.CreateDate = this.CreateDate;
				copy.SeanceDate = this.SeanceDate;
				copy.SeanceTime = this.SeanceTime;
				copy.SeanceStatusId = this.SeanceStatusId;
				copy.SeanceAdvisorId = this.SeanceAdvisorId;
				copy.SeanceAdvisorName = this.SeanceAdvisorName;
				copy.TestDate = this.TestDate;
				copy.TestAdvisorId = this.TestAdvisorId;
				copy.TestAdvisorName = this.TestAdvisorName;
				copy.TotalVerbalScore = this.TotalVerbalScore;
				copy.TotalPerformanceScore = this.TotalPerformanceScore;
				copy.TotalScore = this.TotalScore;
			copy.AcceptChanges();
			return (WiscrView)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="WiscrViewBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(WiscrViewBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="WiscrViewBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="WiscrViewBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="WiscrViewBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(WiscrViewBase Object1, WiscrViewBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.SeanceId != Object2.SeanceId)
				equal = false;
			if (Object1.ClientId != Object2.ClientId)
				equal = false;
			if (Object1.CreateDate != null && Object2.CreateDate != null )
			{
				if (Object1.CreateDate != Object2.CreateDate)
					equal = false;
			}
			else if (Object1.CreateDate == null ^ Object1.CreateDate == null )
			{
				equal = false;
			}
			if (Object1.SeanceDate != null && Object2.SeanceDate != null )
			{
				if (Object1.SeanceDate != Object2.SeanceDate)
					equal = false;
			}
			else if (Object1.SeanceDate == null ^ Object1.SeanceDate == null )
			{
				equal = false;
			}
			if (Object1.SeanceTime != null && Object2.SeanceTime != null )
			{
				if (Object1.SeanceTime != Object2.SeanceTime)
					equal = false;
			}
			else if (Object1.SeanceTime == null ^ Object1.SeanceTime == null )
			{
				equal = false;
			}
			if (Object1.SeanceStatusId != Object2.SeanceStatusId)
				equal = false;
			if (Object1.SeanceAdvisorId != Object2.SeanceAdvisorId)
				equal = false;
			if (Object1.SeanceAdvisorName != null && Object2.SeanceAdvisorName != null )
			{
				if (Object1.SeanceAdvisorName != Object2.SeanceAdvisorName)
					equal = false;
			}
			else if (Object1.SeanceAdvisorName == null ^ Object1.SeanceAdvisorName == null )
			{
				equal = false;
			}
			if (Object1.TestDate != null && Object2.TestDate != null )
			{
				if (Object1.TestDate != Object2.TestDate)
					equal = false;
			}
			else if (Object1.TestDate == null ^ Object1.TestDate == null )
			{
				equal = false;
			}
			if (Object1.TestAdvisorId != null && Object2.TestAdvisorId != null )
			{
				if (Object1.TestAdvisorId != Object2.TestAdvisorId)
					equal = false;
			}
			else if (Object1.TestAdvisorId == null ^ Object1.TestAdvisorId == null )
			{
				equal = false;
			}
			if (Object1.TestAdvisorName != null && Object2.TestAdvisorName != null )
			{
				if (Object1.TestAdvisorName != Object2.TestAdvisorName)
					equal = false;
			}
			else if (Object1.TestAdvisorName == null ^ Object1.TestAdvisorName == null )
			{
				equal = false;
			}
			if (Object1.TotalVerbalScore != null && Object2.TotalVerbalScore != null )
			{
				if (Object1.TotalVerbalScore != Object2.TotalVerbalScore)
					equal = false;
			}
			else if (Object1.TotalVerbalScore == null ^ Object1.TotalVerbalScore == null )
			{
				equal = false;
			}
			if (Object1.TotalPerformanceScore != null && Object2.TotalPerformanceScore != null )
			{
				if (Object1.TotalPerformanceScore != Object2.TotalPerformanceScore)
					equal = false;
			}
			else if (Object1.TotalPerformanceScore == null ^ Object1.TotalPerformanceScore == null )
			{
				equal = false;
			}
			if (Object1.TotalScore != null && Object2.TotalScore != null )
			{
				if (Object1.TotalScore != Object2.TotalScore)
					equal = false;
			}
			else if (Object1.TotalScore == null ^ Object1.TotalScore == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(WiscrView entity, string propertyName)
		{
			switch (propertyName)
			{
				case "SeanceId":
					return entity.SeanceId;
				case "ClientId":
					return entity.ClientId;
				case "CreateDate":
					return entity.CreateDate;
				case "SeanceDate":
					return entity.SeanceDate;
				case "SeanceTime":
					return entity.SeanceTime;
				case "SeanceStatusId":
					return entity.SeanceStatusId;
				case "SeanceAdvisorId":
					return entity.SeanceAdvisorId;
				case "SeanceAdvisorName":
					return entity.SeanceAdvisorName;
				case "TestDate":
					return entity.TestDate;
				case "TestAdvisorId":
					return entity.TestAdvisorId;
				case "TestAdvisorName":
					return entity.TestAdvisorName;
				case "TotalVerbalScore":
					return entity.TotalVerbalScore;
				case "TotalPerformanceScore":
					return entity.TotalPerformanceScore;
				case "TotalScore":
					return entity.TotalScore;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as WiscrView, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- SeanceId: {0}{14}- ClientId: {1}{14}- CreateDate: {2}{14}- SeanceDate: {3}{14}- SeanceTime: {4}{14}- SeanceStatusId: {5}{14}- SeanceAdvisorId: {6}{14}- SeanceAdvisorName: {7}{14}- TestDate: {8}{14}- TestAdvisorId: {9}{14}- TestAdvisorName: {10}{14}- TotalVerbalScore: {11}{14}- TotalPerformanceScore: {12}{14}- TotalScore: {13}{14}", 
				this.SeanceId,
				this.ClientId,
				(this.CreateDate == null) ? string.Empty : this.CreateDate.ToString(),
			     
				(this.SeanceDate == null) ? string.Empty : this.SeanceDate.ToString(),
			     
				(this.SeanceTime == null) ? string.Empty : this.SeanceTime.ToString(),
			     
				this.SeanceStatusId,
				this.SeanceAdvisorId,
				(this.SeanceAdvisorName == null) ? string.Empty : this.SeanceAdvisorName.ToString(),
			     
				(this.TestDate == null) ? string.Empty : this.TestDate.ToString(),
			     
				(this.TestAdvisorId == null) ? string.Empty : this.TestAdvisorId.ToString(),
			     
				(this.TestAdvisorName == null) ? string.Empty : this.TestAdvisorName.ToString(),
			     
				(this.TotalVerbalScore == null) ? string.Empty : this.TotalVerbalScore.ToString(),
			     
				(this.TotalPerformanceScore == null) ? string.Empty : this.TotalPerformanceScore.ToString(),
			     
				(this.TotalScore == null) ? string.Empty : this.TotalScore.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the WiscrView columns.
	/// </summary>
	[Serializable]
	public enum WiscrViewColumn
	{
		/// <summary>
		/// SeanceID : 
		/// </summary>
		[EnumTextValue("SeanceID")]
		[ColumnEnum("SeanceID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SeanceId,
		/// <summary>
		/// ClientID : 
		/// </summary>
		[EnumTextValue("ClientID")]
		[ColumnEnum("ClientID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ClientId,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("CreateDate")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreateDate,
		/// <summary>
		/// SeanceDate : 
		/// </summary>
		[EnumTextValue("SeanceDate")]
		[ColumnEnum("SeanceDate", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		SeanceDate,
		/// <summary>
		/// SeanceTime : 
		/// </summary>
		[EnumTextValue("SeanceTime")]
		[ColumnEnum("SeanceTime", typeof(System.TimeSpan), System.Data.DbType.Time, false, false, true)]
		SeanceTime,
		/// <summary>
		/// SeanceStatusId : 
		/// </summary>
		[EnumTextValue("SeanceStatusId")]
		[ColumnEnum("SeanceStatusId", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		SeanceStatusId,
		/// <summary>
		/// SeanceAdvisorID : 
		/// </summary>
		[EnumTextValue("SeanceAdvisorID")]
		[ColumnEnum("SeanceAdvisorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SeanceAdvisorId,
		/// <summary>
		/// SeanceAdvisorName : 
		/// </summary>
		[EnumTextValue("SeanceAdvisorName")]
		[ColumnEnum("SeanceAdvisorName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		SeanceAdvisorName,
		/// <summary>
		/// TestDate : 
		/// </summary>
		[EnumTextValue("TestDate")]
		[ColumnEnum("TestDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TestDate,
		/// <summary>
		/// TestAdvisorID : 
		/// </summary>
		[EnumTextValue("TestAdvisorID")]
		[ColumnEnum("TestAdvisorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TestAdvisorId,
		/// <summary>
		/// TestAdvisorName : 
		/// </summary>
		[EnumTextValue("TestAdvisorName")]
		[ColumnEnum("TestAdvisorName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		TestAdvisorName,
		/// <summary>
		/// TotalVerbalScore : 
		/// </summary>
		[EnumTextValue("TotalVerbalScore")]
		[ColumnEnum("TotalVerbalScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotalVerbalScore,
		/// <summary>
		/// TotalPerformanceScore : 
		/// </summary>
		[EnumTextValue("TotalPerformanceScore")]
		[ColumnEnum("TotalPerformanceScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotalPerformanceScore,
		/// <summary>
		/// TotalScore : 
		/// </summary>
		[EnumTextValue("TotalScore")]
		[ColumnEnum("TotalScore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotalScore
	}//End enum

} // end namespace
