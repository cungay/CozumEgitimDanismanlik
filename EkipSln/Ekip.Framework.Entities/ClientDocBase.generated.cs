
/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : 24 Ekim 2018 Çarşamba
	Important: Do not modify this file. Edit the file ClientDoc.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Ekip.Framework.Entities.Validation;
#endregion

namespace Ekip.Framework.Entities
{
	///<summary>
	/// An object representation of the 'ClientDoc' table. [No description found the database]	
	///</summary>
	[DataContract]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ClientDocBase : EntityBase, IClientDoc, IEntityId<ClientDocKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		[DataMember]
		private ClientDocEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		[DataMember]
		private ClientDocEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ClientDocEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		private TList<ClientDoc> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		public event ClientDocEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		public event ClientDocEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ClientDocBase"/> instance.
		///</summary>
		public ClientDocBase()
		{
			this.entityData = new ClientDocEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ClientDocBase"/> instance.
		///</summary>
		///<param name="_fileId"></param>
		///<param name="_clientId"></param>
		///<param name="_fileName"></param>
		///<param name="_fullName"></param>
		///<param name="_filePath"></param>
		///<param name="_creationDate"></param>
		///<param name="_creationTime"></param>
		///<param name="_fileExtension"></param>
		///<param name="_fileSize"></param>
		///<param name="_fileContent"></param>
		///<param name="_createOn"></param>
		///<param name="_updateOn"></param>
		///<param name="_createUserId"></param>
		public ClientDocBase(System.Int32 _fileId, System.Int32 _clientId, System.String _fileName, 
			System.String _fullName, System.String _filePath, System.DateTime _creationDate, System.TimeSpan _creationTime, 
			System.String _fileExtension, System.Double _fileSize, System.Byte[] _fileContent, System.DateTime _createOn, 
			System.DateTime? _updateOn, System.Int32 _createUserId)
		{
			this.entityData = new ClientDocEntityData();
			this.backupData = null;

			this.FileId = _fileId;
			this.ClientId = _clientId;
			this.FileName = _fileName;
			this.FullName = _fullName;
			this.FilePath = _filePath;
			this.CreationDate = _creationDate;
			this.CreationTime = _creationTime;
			this.FileExtension = _fileExtension;
			this.FileSize = _fileSize;
			this.FileContent = _fileContent;
			this.CreateOn = _createOn;
			this.UpdateOn = _updateOn;
			this.CreateUserId = _createUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ClientDoc"/> instance.
		///</summary>
		///<param name="_fileId"></param>
		///<param name="_clientId"></param>
		///<param name="_fileName"></param>
		///<param name="_fullName"></param>
		///<param name="_filePath"></param>
		///<param name="_creationDate"></param>
		///<param name="_creationTime"></param>
		///<param name="_fileExtension"></param>
		///<param name="_fileSize"></param>
		///<param name="_fileContent"></param>
		///<param name="_createOn"></param>
		///<param name="_updateOn"></param>
		///<param name="_createUserId"></param>
		public static ClientDoc CreateClientDoc(System.Int32 _fileId, System.Int32 _clientId, System.String _fileName, 
			System.String _fullName, System.String _filePath, System.DateTime _creationDate, System.TimeSpan _creationTime, 
			System.String _fileExtension, System.Double _fileSize, System.Byte[] _fileContent, System.DateTime _createOn, 
			System.DateTime? _updateOn, System.Int32 _createUserId)
		{
			ClientDoc newClientDoc = new ClientDoc();
			newClientDoc.FileId = _fileId;
			newClientDoc.ClientId = _clientId;
			newClientDoc.FileName = _fileName;
			newClientDoc.FullName = _fullName;
			newClientDoc.FilePath = _filePath;
			newClientDoc.CreationDate = _creationDate;
			newClientDoc.CreationTime = _creationTime;
			newClientDoc.FileExtension = _fileExtension;
			newClientDoc.FileSize = _fileSize;
			newClientDoc.FileContent = _fileContent;
			newClientDoc.CreateOn = _createOn;
			newClientDoc.UpdateOn = _updateOn;
			newClientDoc.CreateUserId = _createUserId;
			return newClientDoc;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FileId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 FileId
		{
			get
			{
				return this.entityData.FileId; 
			}
			
			set
			{
				if (this.entityData.FileId == value)
					return;
				
                OnPropertyChanging("FileId");                    
				OnColumnChanging(ClientDocColumn.FileId, this.entityData.FileId);
				this.entityData.FileId = value;
				this.EntityId.FileId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientDocColumn.FileId, this.entityData.FileId);
				OnPropertyChanged("FileId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FileId property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the FileId property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalFileId
		{
			get { return this.entityData.OriginalFileId; }
			set { this.entityData.OriginalFileId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ClientId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ClientId
		{
			get
			{
				return this.entityData.ClientId; 
			}
			
			set
			{
				if (this.entityData.ClientId == value)
					return;
				
                OnPropertyChanging("ClientId");                    
				OnColumnChanging(ClientDocColumn.ClientId, this.entityData.ClientId);
				this.entityData.ClientId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientDocColumn.ClientId, this.entityData.ClientId);
				OnPropertyChanged("ClientId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FileName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String FileName
		{
			get
			{
				return this.entityData.FileName; 
			}
			
			set
			{
				if (this.entityData.FileName == value)
					return;
				
                OnPropertyChanging("FileName");                    
				OnColumnChanging(ClientDocColumn.FileName, this.entityData.FileName);
				this.entityData.FileName = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientDocColumn.FileName, this.entityData.FileName);
				OnPropertyChanged("FileName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FullName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 250)]
		public virtual System.String FullName
		{
			get
			{
				return this.entityData.FullName; 
			}
			
			set
			{
				if (this.entityData.FullName == value)
					return;
				
                OnPropertyChanging("FullName");                    
				OnColumnChanging(ClientDocColumn.FullName, this.entityData.FullName);
				this.entityData.FullName = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientDocColumn.FullName, this.entityData.FullName);
				OnPropertyChanged("FullName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FilePath property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 250)]
		public virtual System.String FilePath
		{
			get
			{
				return this.entityData.FilePath; 
			}
			
			set
			{
				if (this.entityData.FilePath == value)
					return;
				
                OnPropertyChanging("FilePath");                    
				OnColumnChanging(ClientDocColumn.FilePath, this.entityData.FilePath);
				this.entityData.FilePath = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientDocColumn.FilePath, this.entityData.FilePath);
				OnPropertyChanged("FilePath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
				
                OnPropertyChanging("CreationDate");                    
				OnColumnChanging(ClientDocColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientDocColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationTime property. 
		///		
		/// </summary>
		/// <value>This type is time.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.TimeSpan CreationTime
		{
			get
			{
				return this.entityData.CreationTime; 
			}
			
			set
			{
				if (this.entityData.CreationTime == value)
					return;
				
                OnPropertyChanging("CreationTime");                    
				OnColumnChanging(ClientDocColumn.CreationTime, this.entityData.CreationTime);
				this.entityData.CreationTime = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientDocColumn.CreationTime, this.entityData.CreationTime);
				OnPropertyChanged("CreationTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FileExtension property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 5)]
		public virtual System.String FileExtension
		{
			get
			{
				return this.entityData.FileExtension; 
			}
			
			set
			{
				if (this.entityData.FileExtension == value)
					return;
				
                OnPropertyChanging("FileExtension");                    
				OnColumnChanging(ClientDocColumn.FileExtension, this.entityData.FileExtension);
				this.entityData.FileExtension = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientDocColumn.FileExtension, this.entityData.FileExtension);
				OnPropertyChanged("FileExtension");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FileSize property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Double FileSize
		{
			get
			{
				return this.entityData.FileSize; 
			}
			
			set
			{
				if (this.entityData.FileSize == value)
					return;
				
                OnPropertyChanging("FileSize");                    
				OnColumnChanging(ClientDocColumn.FileSize, this.entityData.FileSize);
				this.entityData.FileSize = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientDocColumn.FileSize, this.entityData.FileSize);
				OnPropertyChanged("FileSize");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FileContent property. 
		///		
		/// </summary>
		/// <value>This type is varbinary.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte[] FileContent
		{
			get
			{
				return this.entityData.FileContent; 
			}
			
			set
			{
				if (this.entityData.FileContent == value)
					return;
				
                OnPropertyChanging("FileContent");                    
				OnColumnChanging(ClientDocColumn.FileContent, this.entityData.FileContent);
				this.entityData.FileContent = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientDocColumn.FileContent, this.entityData.FileContent);
				OnPropertyChanged("FileContent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateOn
		{
			get
			{
				return this.entityData.CreateOn; 
			}
			
			set
			{
				if (this.entityData.CreateOn == value)
					return;
				
                OnPropertyChanging("CreateOn");                    
				OnColumnChanging(ClientDocColumn.CreateOn, this.entityData.CreateOn);
				this.entityData.CreateOn = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientDocColumn.CreateOn, this.entityData.CreateOn);
				OnPropertyChanged("CreateOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateOn
		{
			get
			{
				return this.entityData.UpdateOn; 
			}
			
			set
			{
				if (this.entityData.UpdateOn == value)
					return;
				
                OnPropertyChanging("UpdateOn");                    
				OnColumnChanging(ClientDocColumn.UpdateOn, this.entityData.UpdateOn);
				this.entityData.UpdateOn = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientDocColumn.UpdateOn, this.entityData.UpdateOn);
				OnPropertyChanged("UpdateOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CreateUserId
		{
			get
			{
				return this.entityData.CreateUserId; 
			}
			
			set
			{
				if (this.entityData.CreateUserId == value)
					return;
				
                OnPropertyChanging("CreateUserId");                    
				OnColumnChanging(ClientDocColumn.CreateUserId, this.entityData.CreateUserId);
				this.entityData.CreateUserId = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClientDocColumn.CreateUserId, this.entityData.CreateUserId);
				OnPropertyChanged("CreateUserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FileName", "File Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FileName", "File Name", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FullName", "Full Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FullName", "Full Name", 250));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FilePath", "File Path"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FilePath", "File Path", 250));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FileExtension", "File Extension"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FileExtension", "File Extension", 5));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FileContent", "File Content"));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ClientDoc"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FileId", "ClientId", "FileName", "FullName", "FilePath", "CreationDate", "CreationTime", "FileExtension", "FileSize", "FileContent", "CreateOn", "UpdateOn", "CreateUserId"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ClientDocEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ClientDoc) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ClientDoc>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ClientDoc);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ClientDoc Entity 
		///</summary>
		protected virtual ClientDoc Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ClientDoc copy = new ClientDoc();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FileId = this.FileId;
					copy.OriginalFileId = this.OriginalFileId;
				copy.ClientId = this.ClientId;
				copy.FileName = this.FileName;
				copy.FullName = this.FullName;
				copy.FilePath = this.FilePath;
				copy.CreationDate = this.CreationDate;
				copy.CreationTime = this.CreationTime;
				copy.FileExtension = this.FileExtension;
				copy.FileSize = this.FileSize;
				copy.FileContent = this.FileContent;
				copy.CreateOn = this.CreateOn;
				copy.UpdateOn = this.UpdateOn;
				copy.CreateUserId = this.CreateUserId;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ClientDoc Entity 
		///</summary>
		public virtual ClientDoc Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ClientDoc Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ClientDoc DeepCopy()
		{
			return EntityHelper.Clone<ClientDoc>(this as ClientDoc);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ClientDocEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ClientDocEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ClientDocEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ClientDocColumn column)
		{
			switch(column)
			{
					case ClientDocColumn.FileId:
					return entityData.FileId != _originalData.FileId;
					case ClientDocColumn.ClientId:
					return entityData.ClientId != _originalData.ClientId;
					case ClientDocColumn.FileName:
					return entityData.FileName != _originalData.FileName;
					case ClientDocColumn.FullName:
					return entityData.FullName != _originalData.FullName;
					case ClientDocColumn.FilePath:
					return entityData.FilePath != _originalData.FilePath;
					case ClientDocColumn.CreationDate:
					return entityData.CreationDate != _originalData.CreationDate;
					case ClientDocColumn.CreationTime:
					return entityData.CreationTime != _originalData.CreationTime;
					case ClientDocColumn.FileExtension:
					return entityData.FileExtension != _originalData.FileExtension;
					case ClientDocColumn.FileSize:
					return entityData.FileSize != _originalData.FileSize;
					case ClientDocColumn.FileContent:
					return entityData.FileContent != _originalData.FileContent;
					case ClientDocColumn.CreateOn:
					return entityData.CreateOn != _originalData.CreateOn;
					case ClientDocColumn.UpdateOn:
					return entityData.UpdateOn != _originalData.UpdateOn;
					case ClientDocColumn.CreateUserId:
					return entityData.CreateUserId != _originalData.CreateUserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ClientDocColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FileId != _originalData.FileId;
			result = result || entityData.ClientId != _originalData.ClientId;
			result = result || entityData.FileName != _originalData.FileName;
			result = result || entityData.FullName != _originalData.FullName;
			result = result || entityData.FilePath != _originalData.FilePath;
			result = result || entityData.CreationDate != _originalData.CreationDate;
			result = result || entityData.CreationTime != _originalData.CreationTime;
			result = result || entityData.FileExtension != _originalData.FileExtension;
			result = result || entityData.FileSize != _originalData.FileSize;
			result = result || entityData.FileContent != _originalData.FileContent;
			result = result || entityData.CreateOn != _originalData.CreateOn;
			result = result || entityData.UpdateOn != _originalData.UpdateOn;
			result = result || entityData.CreateUserId != _originalData.CreateUserId;
			return result;
		}	
		
		///<summary>
		///  Returns a ClientDoc Entity with the original data.
		///</summary>
		public ClientDoc GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateClientDoc(
				_originalData.FileId,
				_originalData.ClientId,
				_originalData.FileName,
				_originalData.FullName,
				_originalData.FilePath,
				_originalData.CreationDate,
				_originalData.CreationTime,
				_originalData.FileExtension,
				_originalData.FileSize,
				_originalData.FileContent,
				_originalData.CreateOn,
				_originalData.UpdateOn,
				_originalData.CreateUserId
				);
				
			return (ClientDoc)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ClientDocBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ClientDocBase)
				return ValueEquals(this, (ClientDocBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ClientDocBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FileId.GetHashCode() ^ 
					this.ClientId.GetHashCode() ^ 
					this.FileName.GetHashCode() ^ 
					this.FullName.GetHashCode() ^ 
					this.FilePath.GetHashCode() ^ 
					this.CreationDate.GetHashCode() ^ 
					this.CreationTime.GetHashCode() ^ 
					this.FileExtension.GetHashCode() ^ 
					this.FileSize.GetHashCode() ^ 
					this.FileContent.GetHashCode() ^ 
					this.CreateOn.GetHashCode() ^ 
					((this.UpdateOn == null) ? string.Empty : this.UpdateOn.ToString()).GetHashCode() ^ 
					this.CreateUserId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ClientDocBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ClientDocBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ClientDocBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ClientDocBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ClientDocBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ClientDocBase Object1, ClientDocBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FileId != Object2.FileId)
				equal = false;
			if (Object1.ClientId != Object2.ClientId)
				equal = false;
			if (Object1.FileName != Object2.FileName)
				equal = false;
			if (Object1.FullName != Object2.FullName)
				equal = false;
			if (Object1.FilePath != Object2.FilePath)
				equal = false;
			if (Object1.CreationDate != Object2.CreationDate)
				equal = false;
			if (Object1.CreationTime != Object2.CreationTime)
				equal = false;
			if (Object1.FileExtension != Object2.FileExtension)
				equal = false;
			if (Object1.FileSize != Object2.FileSize)
				equal = false;
			if (Object1.FileContent != Object2.FileContent)
				equal = false;
			if (Object1.CreateOn != Object2.CreateOn)
				equal = false;
			if ( Object1.UpdateOn != null && Object2.UpdateOn != null )
			{
				if (Object1.UpdateOn != Object2.UpdateOn)
					equal = false;
			}
			else if (Object1.UpdateOn == null ^ Object2.UpdateOn == null )
			{
				equal = false;
			}
			if (Object1.CreateUserId != Object2.CreateUserId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ClientDocBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ClientDocComparer GetComparer()
        {
            return new ClientDocComparer();
        }
        */

        // Comparer delegates back to ClientDoc
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ClientDoc rhs, ClientDocColumn which)
        {
            switch (which)
            {
            	
            	
            	case ClientDocColumn.FileId:
            		return this.FileId.CompareTo(rhs.FileId);
            		
            		                 
            	
            	
            	case ClientDocColumn.ClientId:
            		return this.ClientId.CompareTo(rhs.ClientId);
            		
            		                 
            	
            	
            	case ClientDocColumn.FileName:
            		return this.FileName.CompareTo(rhs.FileName);
            		
            		                 
            	
            	
            	case ClientDocColumn.FullName:
            		return this.FullName.CompareTo(rhs.FullName);
            		
            		                 
            	
            	
            	case ClientDocColumn.FilePath:
            		return this.FilePath.CompareTo(rhs.FilePath);
            		
            		                 
            	
            	
            	case ClientDocColumn.CreationDate:
            		return this.CreationDate.CompareTo(rhs.CreationDate);
            		
            		                 
            	
            	
            	case ClientDocColumn.CreationTime:
            		return this.CreationTime.CompareTo(rhs.CreationTime);
            		
            		                 
            	
            	
            	case ClientDocColumn.FileExtension:
            		return this.FileExtension.CompareTo(rhs.FileExtension);
            		
            		                 
            	
            	
            	case ClientDocColumn.FileSize:
            		return this.FileSize.CompareTo(rhs.FileSize);
            		
            		                 
            	
            		                 
            	
            	
            	case ClientDocColumn.CreateOn:
            		return this.CreateOn.CompareTo(rhs.CreateOn);
            		
            		                 
            	
            	
            	case ClientDocColumn.UpdateOn:
            		return this.UpdateOn.Value.CompareTo(rhs.UpdateOn.Value);
            		
            		                 
            	
            	
            	case ClientDocColumn.CreateUserId:
            		return this.CreateUserId.CompareTo(rhs.CreateUserId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ClientDocKey> Members
		
		// member variable for the EntityId property
		private ClientDocKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ClientDocKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ClientDocKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ClientDoc")
					.Append("|").Append( this.FileId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- FileId: {0}{13}- ClientId: {1}{13}- FileName: {2}{13}- FullName: {3}{13}- FilePath: {4}{13}- CreationDate: {5}{13}- CreationTime: {6}{13}- FileExtension: {7}{13}- FileSize: {8}{13}- FileContent: {9}{13}- CreateOn: {10}{13}- UpdateOn: {11}{13}- CreateUserId: {12}{13}{15}", 
				this.FileId,
				this.ClientId,
				this.FileName,
				this.FullName,
				this.FilePath,
				this.CreationDate,
				this.CreationTime,
				this.FileExtension,
				this.FileSize,
				this.FileContent,
				this.CreateOn,
				(this.UpdateOn == null) ? string.Empty : this.UpdateOn.ToString(),
				this.CreateUserId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ClientDoc' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	internal protected class ClientDocEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FileId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ClientDoc"</remarks>
		[DataMember]
		public System.Int32 FileId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		[DataMember]
		public System.Int32 OriginalFileId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// ClientId : 
		/// </summary>
		[DataMember]
		public System.Int32 ClientId = (int)0;
		
		/// <summary>
		/// FileName : 
		/// </summary>
		[DataMember]
		public System.String FileName = string.Empty;
		
		/// <summary>
		/// FullName : 
		/// </summary>
		[DataMember]
		public System.String FullName = string.Empty;
		
		/// <summary>
		/// FilePath : 
		/// </summary>
		[DataMember]
		public System.String FilePath = string.Empty;
		
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[DataMember]
		public System.DateTime CreationDate = DateTime.MinValue;
		
		/// <summary>
		/// CreationTime : 
		/// </summary>
		[DataMember]
		public System.TimeSpan CreationTime = new TimeSpan(1,0,0,0,0);
		
		/// <summary>
		/// FileExtension : 
		/// </summary>
		[DataMember]
		public System.String FileExtension = string.Empty;
		
		/// <summary>
		/// FileSize : 
		/// </summary>
		[DataMember]
		public System.Double FileSize = 0.0f;
		
		/// <summary>
		/// FileContent : 
		/// </summary>
		[DataMember]
		public System.Byte[] FileContent = new byte[] {};
		
		/// <summary>
		/// CreateOn : 
		/// </summary>
		[DataMember]
		public System.DateTime CreateOn = DateTime.Now;
		
		/// <summary>
		/// UpdateOn : 
		/// </summary>
		[DataMember]
		public System.DateTime? UpdateOn = null;
		
		/// <summary>
		/// CreateUserId : 
		/// </summary>
		[DataMember]
		public System.Int32 CreateUserId = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ClientDocEntityData _tmp = new ClientDocEntityData();
						
			_tmp.FileId = this.FileId;
			_tmp.OriginalFileId = this.OriginalFileId;
			
			_tmp.ClientId = this.ClientId;
			_tmp.FileName = this.FileName;
			_tmp.FullName = this.FullName;
			_tmp.FilePath = this.FilePath;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationTime = this.CreationTime;
			_tmp.FileExtension = this.FileExtension;
			_tmp.FileSize = this.FileSize;
			_tmp.FileContent = this.FileContent;
			_tmp.CreateOn = this.CreateOn;
			_tmp.UpdateOn = this.UpdateOn;
			_tmp.CreateUserId = this.CreateUserId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ClientDocEntityData _tmp = new ClientDocEntityData();
						
			_tmp.FileId = this.FileId;
			_tmp.OriginalFileId = this.OriginalFileId;
			
			_tmp.ClientId = this.ClientId;
			_tmp.FileName = this.FileName;
			_tmp.FullName = this.FullName;
			_tmp.FilePath = this.FilePath;
			_tmp.CreationDate = this.CreationDate;
			_tmp.CreationTime = this.CreationTime;
			_tmp.FileExtension = this.FileExtension;
			_tmp.FileSize = this.FileSize;
			_tmp.FileContent = this.FileContent;
			_tmp.CreateOn = this.CreateOn;
			_tmp.UpdateOn = this.UpdateOn;
			_tmp.CreateUserId = this.CreateUserId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		[DataMember]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new ClientDocEntityData();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientDocColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ClientDocColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientDocColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ClientDocColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientDocColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ClientDocColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ClientDocEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ClientDocEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClientDocColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ClientDocColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ClientDocEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ClientDocEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ClientDocEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ClientDoc"/> object.
	/// </remarks>
	public class ClientDocEventArgs : System.EventArgs
	{
		private ClientDocColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ClientDocEventArgs class.
		///</summary>
		public ClientDocEventArgs(ClientDocColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ClientDocEventArgs class.
		///</summary>
		public ClientDocEventArgs(ClientDocColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ClientDocColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ClientDocColumn" />
		public ClientDocColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ClientDoc related events.
	///</summary>
	public delegate void ClientDocEventHandler(object sender, ClientDocEventArgs e);
	
	#region ClientDocComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ClientDocComparer : System.Collections.Generic.IComparer<ClientDoc>
	{
		ClientDocColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ClientDocComparer"/> class.
        /// </summary>
		public ClientDocComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ClientDocComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ClientDocComparer(ClientDocColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ClientDoc"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ClientDoc"/> to compare.</param>
        /// <param name="b">The second <c>ClientDoc</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ClientDoc a, ClientDoc b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ClientDoc entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ClientDoc a, ClientDoc b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ClientDocColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ClientDocKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ClientDoc"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ClientDocKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ClientDocKey class.
		/// </summary>
		public ClientDocKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ClientDocKey class.
		/// </summary>
		public ClientDocKey(ClientDocBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FileId = entity.FileId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ClientDocKey class.
		/// </summary>
		public ClientDocKey(System.Int32 _fileId)
		{
			#region Init Properties

			this.FileId = _fileId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ClientDocBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ClientDocBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FileId property
		private System.Int32 _fileId;
		
		/// <summary>
		/// Gets or sets the FileId property.
		/// </summary>
		public System.Int32 FileId
		{
			get { return _fileId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FileId = value;
				
				_fileId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FileId = ( values["FileId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["FileId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FileId", FileId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FileId: {0}{1}",
								FileId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ClientDocColumn Enum
	
	/// <summary>
	/// Enumerate the ClientDoc columns.
	/// </summary>
	[Serializable]
	public enum ClientDocColumn : int
	{
		/// <summary>
		/// FileId : 
		/// </summary>
		[EnumTextValue("File Id")]
		[ColumnEnum("FileId", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		FileId = 1,
		/// <summary>
		/// ClientId : 
		/// </summary>
		[EnumTextValue("Client Id")]
		[ColumnEnum("ClientId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ClientId = 2,
		/// <summary>
		/// FileName : 
		/// </summary>
		[EnumTextValue("File Name")]
		[ColumnEnum("FileName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		FileName = 3,
		/// <summary>
		/// FullName : 
		/// </summary>
		[EnumTextValue("Full Name")]
		[ColumnEnum("FullName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 250)]
		FullName = 4,
		/// <summary>
		/// FilePath : 
		/// </summary>
		[EnumTextValue("File Path")]
		[ColumnEnum("FilePath", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 250)]
		FilePath = 5,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("Creation Date")]
		[ColumnEnum("CreationDate", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		CreationDate = 6,
		/// <summary>
		/// CreationTime : 
		/// </summary>
		[EnumTextValue("Creation Time")]
		[ColumnEnum("CreationTime", typeof(System.TimeSpan), System.Data.DbType.Time, false, false, false)]
		CreationTime = 7,
		/// <summary>
		/// FileExtension : 
		/// </summary>
		[EnumTextValue("File Extension")]
		[ColumnEnum("FileExtension", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 5)]
		FileExtension = 8,
		/// <summary>
		/// FileSize : 
		/// </summary>
		[EnumTextValue("File Size")]
		[ColumnEnum("FileSize", typeof(System.Double), System.Data.DbType.Double, false, false, false)]
		FileSize = 9,
		/// <summary>
		/// FileContent : 
		/// </summary>
		[EnumTextValue("File Content")]
		[ColumnEnum("FileContent", typeof(System.Byte[]), System.Data.DbType.Binary, false, false, false)]
		FileContent = 10,
		/// <summary>
		/// CreateOn : 
		/// </summary>
		[EnumTextValue("Create On")]
		[ColumnEnum("CreateOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateOn = 11,
		/// <summary>
		/// UpdateOn : 
		/// </summary>
		[EnumTextValue("Update On")]
		[ColumnEnum("UpdateOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateOn = 12,
		/// <summary>
		/// CreateUserId : 
		/// </summary>
		[EnumTextValue("Create User Id")]
		[ColumnEnum("CreateUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CreateUserId = 13
	}//End enum

	#endregion ClientDocColumn Enum

} // end namespace
